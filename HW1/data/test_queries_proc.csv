query_id,query,query_tokens
1,"Connection to peer handler.

        We send bgp open message to peer and initialize related attributes.","[""connection"", ""to"", ""peer"", ""handler"", ""we"", ""send"", ""bgp"", ""open"", ""message"", ""to"", ""peer"", ""and"", ""initialize"", ""related"", ""attributes""]"
2,"Permanently delete user. User should be softly deleted first.
        Zendesk API `Reference <https://developer.zendesk.com/rest_api/docs/core/users#permanently-delete-user>`__.

        Note: This endpoint does not support multiple ids or list of `User` objects.

        :param user: User object or id.
        :return: User object with `permanently_deleted` status","[""permanently"", ""delete"", ""user"", ""user"", ""should"", ""be"", ""softly"", ""deleted"", ""first"", ""zendesk"", ""api"", ""str"", ""note"", ""this"", ""endpoint"", ""does"", ""not"", ""support"", ""multiple"", ""ids"", ""or"", ""list"", ""of"", ""str"", ""objects"", ""param"", ""user"", ""user"", ""object"", ""or"", ""id"", ""return"", ""user"", ""object"", ""with"", ""str"", ""status""]"
3,Start a new paragraph.,"[""start"", ""a"", ""new"", ""paragraph""]"
4,"r""""""
        Draw a random value from this Parameter's distribution.

        If ``value`` was not initialised with a ``scipy.stats`` object, then
        the scalar/ndarray value is returned.

        Parameters
        ----------
        random_state : None, int or RandomState, optional
            random seed

        Returns
        -------
        ndarray :
            of size ``self.shape``, a random draw from the distribution, or
            ``self.value`` if not initialised with a ``scipy.stats`` object.

        Note
        ----
        Random draws are *clipped* to the bounds, and so it is up to the user
        to input a sensible sampling distribution!","[""r"", ""str"", ""draw"", ""a"", ""random"", ""value"", ""from"", ""this"", ""parameter"", ""s"", ""distribution"", ""if"", ""str"", ""value"", ""str"", ""was"", ""not"", ""initialised"", ""with"", ""a"", ""str"", ""scipy"", ""stats"", ""str"", ""object"", ""then"", ""the"", ""scalar"", ""ndarray"", ""value"", ""is"", ""returned"", ""parameters"", ""random"", ""state"", ""none"", ""int"", ""or"", ""random"", ""state"", ""optional"", ""random"", ""seed"", ""returns"", ""ndarray"", ""of"", ""size"", ""str"", ""self"", ""shape"", ""str"", ""a"", ""random"", ""draw"", ""from"", ""the"", ""distribution"", ""or"", ""str"", ""self"", ""value"", ""str"", ""if"", ""not"", ""initialised"", ""with"", ""a"", ""str"", ""scipy"", ""stats"", ""str"", ""object"", ""note"", ""random"", ""draws"", ""are"", ""clipped"", ""to"", ""the"", ""bounds"", ""and"", ""so"", ""it"", ""is"", ""up"", ""to"", ""the"", ""user"", ""to"", ""input"", ""a"", ""sensible"", ""sampling"", ""distribution""]"
5,"Fetches the FeinCMS Page object that the path points to.

        Override this to deal with different types of object from Page.","[""fetches"", ""the"", ""fein"", ""cms"", ""page"", ""object"", ""that"", ""the"", ""path"", ""points"", ""to"", ""override"", ""this"", ""to"", ""deal"", ""with"", ""different"", ""types"", ""of"", ""object"", ""from"", ""page""]"
6,"Monitor the queue for items, and ask the handler to deal with them.

        This method runs on a separate, internal thread.
        The thread will terminate if it sees a sentinel object in the queue.","[""monitor"", ""the"", ""queue"", ""for"", ""items"", ""and"", ""ask"", ""the"", ""handler"", ""to"", ""deal"", ""with"", ""them"", ""this"", ""method"", ""runs"", ""on"", ""a"", ""separate"", ""internal"", ""thread"", ""the"", ""thread"", ""will"", ""terminate"", ""if"", ""it"", ""sees"", ""a"", ""sentinel"", ""object"", ""in"", ""the"", ""queue""]"
7,"Attempts to load tasks from a given path.
        :param path: Path to tasks.
        :return: None.","[""attempts"", ""to"", ""load"", ""tasks"", ""from"", ""a"", ""given"", ""path"", ""param"", ""path"", ""path"", ""to"", ""tasks"", ""return"", ""none""]"
8,"Return enforced ascii string
        Ã©ko=>ko","[""return"", ""enforced"", ""ascii"", ""string"", ""ko"", ""ko""]"
9,"Do extra work to fetch a complete set of attributes for this entity.

        For more information, see `Bugzilla #1235377
        <https://bugzilla.redhat.com/show_bug.cgi?id=1235377>`_.","[""do"", ""extra"", ""work"", ""to"", ""fetch"", ""a"", ""complete"", ""set"", ""of"", ""attributes"", ""for"", ""this"", ""entity"", ""for"", ""more"", ""information"", ""see"", ""str""]"
10,insert object before index,"[""insert"", ""object"", ""before"", ""index""]"
11,"(Copied from implementation in
        https://github.com/greenelab/adage-server/blob/master/adage/analyze/api.py)

        Handle an incoming POST as a GET to work around URI length limitations","[""copied"", ""from"", ""implementation"", ""in"", ""https"", ""github"", ""com"", ""greenelab"", ""adage"", ""server"", ""blob"", ""master"", ""adage"", ""analyze"", ""api"", ""py"", ""handle"", ""an"", ""incoming"", ""post"", ""as"", ""a"", ""get"", ""to"", ""work"", ""around"", ""uri"", ""length"", ""limitations""]"
12,"The default encryption function for storing emails in the database. This
    uses AES and the encryption key defined in the applications configuration.

    :param email:
        The email address.","[""the"", ""default"", ""encryption"", ""function"", ""for"", ""storing"", ""emails"", ""in"", ""the"", ""database"", ""this"", ""uses"", ""aes"", ""and"", ""the"", ""encryption"", ""key"", ""defined"", ""in"", ""the"", ""applications"", ""configuration"", ""param"", ""email"", ""the"", ""email"", ""address""]"
13,"Get list of free object defined in database with name
        matching the specified filter

        :param argin: The filter
        :type: tango.DevString
        :return: Object name list
        :rtype: tango.DevVarStringArray","[""get"", ""list"", ""of"", ""free"", ""object"", ""defined"", ""in"", ""database"", ""with"", ""name"", ""matching"", ""the"", ""specified"", ""filter"", ""param"", ""argin"", ""the"", ""filter"", ""type"", ""tango"", ""dev"", ""string"", ""return"", ""object"", ""name"", ""list"", ""rtype"", ""tango"", ""dev"", ""var"", ""string"", ""array""]"
14,"Reads a value from the configuration file.

    Args:
      keypath: str
        Specifies the key for which the value is desired.  It can be a
        hierarchical path.  Example: ""section1.subsection.key1""
      configfile: str
        Path to the config file to read.  Defaults to None, in which case
        the application's default config file is used.

    Returns:
      value from configuration file","[""reads"", ""a"", ""value"", ""from"", ""the"", ""configuration"", ""file"", ""args"", ""keypath"", ""str"", ""specifies"", ""the"", ""key"", ""for"", ""which"", ""the"", ""value"", ""is"", ""desired"", ""it"", ""can"", ""be"", ""a"", ""hierarchical"", ""path"", ""example"", ""str"", ""configfile"", ""str"", ""path"", ""to"", ""the"", ""config"", ""file"", ""to"", ""read"", ""defaults"", ""to"", ""none"", ""in"", ""which"", ""case"", ""the"", ""application"", ""s"", ""default"", ""config"", ""file"", ""is"", ""used"", ""returns"", ""value"", ""from"", ""configuration"", ""file""]"
15,"Preprocess the excel sheet

    :param filepath: filepath of the excel data
    :return: df: pandas dataframe with excel data
    :rtype: pandas.DataFrame","[""preprocess"", ""the"", ""excel"", ""sheet"", ""param"", ""filepath"", ""filepath"", ""of"", ""the"", ""excel"", ""data"", ""return"", ""df"", ""pandas"", ""dataframe"", ""with"", ""excel"", ""data"", ""rtype"", ""pandas"", ""data"", ""frame""]"
16,"Connect ``slot`` to this singal.

        Args:
            slot (callable): Callable object wich accepts keyword arguments.

        Raises:
            InvalidSlot: If ``slot`` doesn't accept keyword arguments.","[""connect"", ""str"", ""slot"", ""str"", ""to"", ""this"", ""singal"", ""args"", ""slot"", ""callable"", ""callable"", ""object"", ""wich"", ""accepts"", ""keyword"", ""arguments"", ""raises"", ""invalid"", ""slot"", ""if"", ""str"", ""slot"", ""str"", ""doesn"", ""t"", ""accept"", ""keyword"", ""arguments""]"
17,"Enable/Disable snmp
        :param snmp_parameters:
        :return:
        :rtype: SnmpContextManager","[""enable"", ""disable"", ""snmp"", ""param"", ""snmp"", ""parameters"", ""return"", ""rtype"", ""snmp"", ""context"", ""manager""]"
18,"The amount due for this invoice. Takes into account all entities in the invoice.
        Can be < 0 if the invoice was overpaid.","[""the"", ""amount"", ""due"", ""for"", ""this"", ""invoice"", ""takes"", ""into"", ""account"", ""all"", ""entities"", ""in"", ""the"", ""invoice"", ""can"", ""be"", ""num"", ""if"", ""the"", ""invoice"", ""was"", ""overpaid""]"
19,Get an instance of Api Neighbor services facade.,"[""get"", ""an"", ""instance"", ""of"", ""api"", ""neighbor"", ""services"", ""facade""]"
20,Populate variables used to build popovers.,"[""populate"", ""variables"", ""used"", ""to"", ""build"", ""popovers""]"
21,"Return genetic data when all alleles called on same line.

    Returns an array containing one item, a tuple of five items:
        (string) chromosome
        (string) start position (1-based)
        (array of strings) matching dbSNP entries
        (string) reference allele sequence
        (array of strings) the genome's allele sequences","[""return"", ""genetic"", ""data"", ""when"", ""all"", ""alleles"", ""called"", ""on"", ""same"", ""line"", ""returns"", ""an"", ""array"", ""containing"", ""one"", ""item"", ""a"", ""tuple"", ""of"", ""five"", ""items"", ""string"", ""chromosome"", ""string"", ""start"", ""position"", ""num"", ""based"", ""array"", ""of"", ""strings"", ""matching"", ""db"", ""snp"", ""entries"", ""string"", ""reference"", ""allele"", ""sequence"", ""array"", ""of"", ""strings"", ""the"", ""genome"", ""s"", ""allele"", ""sequences""]"
22,Collect the available wlan interfaces.,"[""collect"", ""the"", ""available"", ""wlan"", ""interfaces""]"
23,Ensures :attr:`subject` is equal to *other*.,"[""ensures"", ""attr"", ""str"", ""is"", ""equal"", ""to"", ""other""]"
24,"Returns the absolutely absolute path. Calls os.(
        normpath, normcase, expandvars and expanduser).","[""returns"", ""the"", ""absolutely"", ""absolute"", ""path"", ""calls"", ""os"", ""normpath"", ""normcase"", ""expandvars"", ""and"", ""expanduser""]"
25,"Saves the current model state to a Python object. It also
        saves to disk but does not return the checkpoint path.

        Returns:
            Object holding checkpoint data.","[""saves"", ""the"", ""current"", ""model"", ""state"", ""to"", ""a"", ""python"", ""object"", ""it"", ""also"", ""saves"", ""to"", ""disk"", ""but"", ""does"", ""not"", ""return"", ""the"", ""checkpoint"", ""path"", ""returns"", ""object"", ""holding"", ""checkpoint"", ""data""]"
26,"Determine the beam in pixels at the given location in pixel coordinates.

        Parameters
        ----------
        x , y : float
            The pixel coordinates at which the beam is determined.

        Returns
        -------
        beam : :class:`AegeanTools.fits_image.Beam`
            A beam object, with a/b/pa in pixel coordinates.","[""determine"", ""the"", ""beam"", ""in"", ""pixels"", ""at"", ""the"", ""given"", ""location"", ""in"", ""pixel"", ""coordinates"", ""parameters"", ""x"", ""y"", ""float"", ""the"", ""pixel"", ""coordinates"", ""at"", ""which"", ""the"", ""beam"", ""is"", ""determined"", ""returns"", ""beam"", ""class"", ""str"", ""a"", ""beam"", ""object"", ""with"", ""a"", ""b"", ""pa"", ""in"", ""pixel"", ""coordinates""]"
27,"Report any information as a Prometheus metric.
        This will create a `Gauge` with the initial value of 1.

        The easiest way to use it is:

            metrics = PrometheusMetrics(app)
            metrics.info(
                'app_info', 'Application info',
                version='1.0', major=1, minor=0
            )

        If the order of the labels matters:

            metrics = PrometheusMetrics(app)
            metrics.info(
                'app_info', 'Application info',
                ('version', 'major', 'minor'),
                ('1.0', 1, 0)
            )

        :param name: the name of the metric
        :param description: the description of the metric
        :param labelnames: the names of the labels
        :param labelvalues: the values of the labels
        :param labels: the names and values of the labels
        :return: the newly created `Gauge` metric","[""report"", ""any"", ""information"", ""as"", ""a"", ""prometheus"", ""metric"", ""this"", ""will"", ""create"", ""a"", ""str"", ""with"", ""the"", ""initial"", ""value"", ""of"", ""num"", ""the"", ""easiest"", ""way"", ""to"", ""use"", ""it"", ""is"", ""metrics"", ""prometheus"", ""metrics"", ""app"", ""metrics"", ""info"", ""str"", ""str"", ""version"", ""str"", ""major"", ""num"", ""minor"", ""num"", ""if"", ""the"", ""order"", ""of"", ""the"", ""labels"", ""matters"", ""metrics"", ""prometheus"", ""metrics"", ""app"", ""metrics"", ""info"", ""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""num"", ""num"", ""param"", ""name"", ""the"", ""name"", ""of"", ""the"", ""metric"", ""param"", ""description"", ""the"", ""description"", ""of"", ""the"", ""metric"", ""param"", ""labelnames"", ""the"", ""names"", ""of"", ""the"", ""labels"", ""param"", ""labelvalues"", ""the"", ""values"", ""of"", ""the"", ""labels"", ""param"", ""labels"", ""the"", ""names"", ""and"", ""values"", ""of"", ""the"", ""labels"", ""return"", ""the"", ""newly"", ""created"", ""str"", ""metric""]"
28,"Validate a single loan result record against the filters

        Parameters
        ----------
        loan : dict
            A single loan note record

        Returns
        -------
        boolean
            True or raises FilterValidationError

        Raises
        ------
        FilterValidationError
            If the loan does not match the filter criteria","[""validate"", ""a"", ""single"", ""loan"", ""result"", ""record"", ""against"", ""the"", ""filters"", ""parameters"", ""loan"", ""dict"", ""a"", ""single"", ""loan"", ""note"", ""record"", ""returns"", ""boolean"", ""true"", ""or"", ""raises"", ""filter"", ""validation"", ""error"", ""raises"", ""filter"", ""validation"", ""error"", ""if"", ""the"", ""loan"", ""does"", ""not"", ""match"", ""the"", ""filter"", ""criteria""]"
29,"Create new metadata tags for the specified resource ids.

        :type resource_ids: list
        :param resource_ids: List of strings

        :type tags: dict
        :param tags: A dictionary containing the name/value pairs.
                     If you want to create only a tag name, the
                     value for that tag should be the empty string
                     (e.g. '').","[""create"", ""new"", ""metadata"", ""tags"", ""for"", ""the"", ""specified"", ""resource"", ""ids"", ""type"", ""resource"", ""ids"", ""list"", ""param"", ""resource"", ""ids"", ""list"", ""of"", ""strings"", ""type"", ""tags"", ""dict"", ""param"", ""tags"", ""a"", ""dictionary"", ""containing"", ""the"", ""name"", ""value"", ""pairs"", ""if"", ""you"", ""want"", ""to"", ""create"", ""only"", ""a"", ""tag"", ""name"", ""the"", ""value"", ""for"", ""that"", ""tag"", ""should"", ""be"", ""the"", ""empty"", ""string"", ""e"", ""g"", ""str""]"
30,Load metadata about a bioassembly (such as chains and their transformations) from a structure file.,"[""load"", ""metadata"", ""about"", ""a"", ""bioassembly"", ""such"", ""as"", ""chains"", ""and"", ""their"", ""transformations"", ""from"", ""a"", ""structure"", ""file""]"
31,r'[a-zA-Z_][a-zA-Z0-9_]*,"[""r"", ""a"", ""z"", ""a"", ""z"", ""a"", ""z"", ""a"", ""z"", ""0""]"
32,"Load java messages that can be ignored pickle file into a dict structure g_ok_java_messages.

    :return: none","[""load"", ""java"", ""messages"", ""that"", ""can"", ""be"", ""ignored"", ""pickle"", ""file"", ""into"", ""a"", ""dict"", ""structure"", ""g"", ""ok"", ""java"", ""messages"", ""return"", ""none""]"
33,"Load in the template file, and run through the parser
        :return none:","[""load"", ""in"", ""the"", ""template"", ""file"", ""and"", ""run"", ""through"", ""the"", ""parser"", ""return"", ""none""]"
34,"Build Betfair JSON-RPC payload.

    :param str base: Betfair base (""Sports"" or ""Account"")
    :param str method: Betfair endpoint
    :param dict params: Request parameters","[""build"", ""betfair"", ""json"", ""rpc"", ""payload"", ""param"", ""str"", ""base"", ""betfair"", ""base"", ""str"", ""or"", ""str"", ""param"", ""str"", ""method"", ""betfair"", ""endpoint"", ""param"", ""dict"", ""params"", ""request"", ""parameters""]"
35,"Read tf.Records and prepare them for ingestion by dual_net.

    See `read_tf_records` for parameter documentation.

    Returns a dict of tensors (see return value of batch_parse_tf_example)","[""read"", ""tf"", ""records"", ""and"", ""prepare"", ""them"", ""for"", ""ingestion"", ""by"", ""dual"", ""net"", ""see"", ""str"", ""for"", ""parameter"", ""documentation"", ""returns"", ""a"", ""dict"", ""of"", ""tensors"", ""see"", ""return"", ""value"", ""of"", ""batch"", ""parse"", ""tf"", ""example""]"
36,Return all countries with a level set,"[""return"", ""all"", ""countries"", ""with"", ""a"", ""level"", ""set""]"
37,"List  available layers, or infos on a given layer","[""list"", ""available"", ""layers"", ""or"", ""infos"", ""on"", ""a"", ""given"", ""layer""]"
38,"Split *sql* into single statements.

    :param sql: A string containing one or more SQL statements.
    :param encoding: The encoding of the statement (optional).
    :returns: A list of strings.","[""split"", ""sql"", ""into"", ""single"", ""statements"", ""param"", ""sql"", ""a"", ""string"", ""containing"", ""one"", ""or"", ""more"", ""sql"", ""statements"", ""param"", ""encoding"", ""the"", ""encoding"", ""of"", ""the"", ""statement"", ""optional"", ""returns"", ""a"", ""list"", ""of"", ""strings""]"
39,"Check for get_data and get_affine method in an object

    Parameters
    ----------
    obj: any object
        Tested object

    Returns
    -------
    is_img: boolean
        True if get_data and get_affine methods are present and callable,
        False otherwise.","[""check"", ""for"", ""get"", ""data"", ""and"", ""get"", ""affine"", ""method"", ""in"", ""an"", ""object"", ""parameters"", ""obj"", ""any"", ""object"", ""tested"", ""object"", ""returns"", ""is"", ""img"", ""boolean"", ""true"", ""if"", ""get"", ""data"", ""and"", ""get"", ""affine"", ""methods"", ""are"", ""present"", ""and"", ""callable"", ""false"", ""otherwise""]"
40,"Factory to make an abstract dist object.

    Preconditions: Either an editable req with a source_dir, or satisfied_by or
    a wheel link, or a non-editable req with a source_dir.

    :return: A concrete DistAbstraction.","[""factory"", ""to"", ""make"", ""an"", ""abstract"", ""dist"", ""object"", ""preconditions"", ""either"", ""an"", ""editable"", ""req"", ""with"", ""a"", ""source"", ""dir"", ""or"", ""satisfied"", ""by"", ""or"", ""a"", ""wheel"", ""link"", ""or"", ""a"", ""non"", ""editable"", ""req"", ""with"", ""a"", ""source"", ""dir"", ""return"", ""a"", ""concrete"", ""dist"", ""abstraction""]"
41,"Attempts to serialize values from a dictionary, 
    skipping private attrs.

    :param d: A dictionary of params to serialize, 
            typically cls.__dict__","[""attempts"", ""to"", ""serialize"", ""values"", ""from"", ""a"", ""dictionary"", ""skipping"", ""private"", ""attrs"", ""param"", ""d"", ""a"", ""dictionary"", ""of"", ""params"", ""to"", ""serialize"", ""typically"", ""cls"", ""dict""]"
42,"Mark points determined to be foothills as globbed, so that they are not included in
        future searches. Also searches neighboring points to foothill points to determine
        if they should also be considered foothills.

        Args:
            q_data: Quantized data
            marked: Marked
            bin_num: Current bin being searched
            bin_lower: Next bin being searched
            centers: dictionary of local maxima considered to be object centers
            foothills: List of foothill points being removed.","[""mark"", ""points"", ""determined"", ""to"", ""be"", ""foothills"", ""as"", ""globbed"", ""so"", ""that"", ""they"", ""are"", ""not"", ""included"", ""in"", ""future"", ""searches"", ""also"", ""searches"", ""neighboring"", ""points"", ""to"", ""foothill"", ""points"", ""to"", ""determine"", ""if"", ""they"", ""should"", ""also"", ""be"", ""considered"", ""foothills"", ""args"", ""q"", ""data"", ""quantized"", ""data"", ""marked"", ""marked"", ""bin"", ""num"", ""current"", ""bin"", ""being"", ""searched"", ""bin"", ""lower"", ""next"", ""bin"", ""being"", ""searched"", ""centers"", ""dictionary"", ""of"", ""local"", ""maxima"", ""considered"", ""to"", ""be"", ""object"", ""centers"", ""foothills"", ""list"", ""of"", ""foothill"", ""points"", ""being"", ""removed""]"
43,"Build a list of dicts, by calling :meth:`Node.dump`
        on each item.

        Each keyword provides a function that extracts a value
        from a Node.

        Examples:

            >>> c = Collection([Scalar(1), Scalar(2)])
            >>> c.dump(x2=Q*2, m1=Q-1).val()
            [{'x2': 2, 'm1': 0}, {'x2': 4, 'm1': 1}]","[""build"", ""a"", ""list"", ""of"", ""dicts"", ""by"", ""calling"", ""meth"", ""str"", ""on"", ""each"", ""item"", ""each"", ""keyword"", ""provides"", ""a"", ""function"", ""that"", ""extracts"", ""a"", ""value"", ""from"", ""a"", ""node"", ""examples"", ""c"", ""collection"", ""scalar"", ""num"", ""scalar"", ""num"", ""c"", ""dump"", ""x"", ""2"", ""q"", ""num"", ""m"", ""1"", ""q"", ""num"", ""val"", ""str"", ""num"", ""str"", ""num"", ""str"", ""num"", ""str"", ""num""]"
44,"Write a type 2 segment to an SPK file.

    http://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/spkw02_c.html

    :param handle: Handle of an SPK file open for writing.
    :type handle: int
    :param body: Body code for ephemeris object.
    :type body: int
    :param center: Body code for the center of motion of the body.
    :type center: int
    :param inframe: The reference frame of the states.
    :type inframe: str
    :param first: First valid time for which states can be computed.
    :type first: float
    :param last: Last valid time for which states can be computed.
    :type last: float
    :param segid: Segment identifier.
    :type segid: str
    :param intlen: Length of time covered by logical record.
    :type intlen: float
    :param n: Number of coefficient sets.
    :type n: int
    :param polydg: Chebyshev polynomial degree.
    :type polydg: int
    :param cdata: Array of Chebyshev coefficients.
    :type cdata: Array of floats
    :param btime: Begin time of first logical record.
    :type btime: float","[""write"", ""a"", ""type"", ""num"", ""segment"", ""to"", ""an"", ""spk"", ""file"", ""http"", ""naif"", ""jpl"", ""nasa"", ""gov"", ""pub"", ""naif"", ""toolkit"", ""docs"", ""c"", ""cspice"", ""spkw"", ""02"", ""c"", ""html"", ""param"", ""handle"", ""handle"", ""of"", ""an"", ""spk"", ""file"", ""open"", ""for"", ""writing"", ""type"", ""handle"", ""int"", ""param"", ""body"", ""body"", ""code"", ""for"", ""ephemeris"", ""object"", ""type"", ""body"", ""int"", ""param"", ""center"", ""body"", ""code"", ""for"", ""the"", ""center"", ""of"", ""motion"", ""of"", ""the"", ""body"", ""type"", ""center"", ""int"", ""param"", ""inframe"", ""the"", ""reference"", ""frame"", ""of"", ""the"", ""states"", ""type"", ""inframe"", ""str"", ""param"", ""first"", ""first"", ""valid"", ""time"", ""for"", ""which"", ""states"", ""can"", ""be"", ""computed"", ""type"", ""first"", ""float"", ""param"", ""last"", ""last"", ""valid"", ""time"", ""for"", ""which"", ""states"", ""can"", ""be"", ""computed"", ""type"", ""last"", ""float"", ""param"", ""segid"", ""segment"", ""identifier"", ""type"", ""segid"", ""str"", ""param"", ""intlen"", ""length"", ""of"", ""time"", ""covered"", ""by"", ""logical"", ""record"", ""type"", ""intlen"", ""float"", ""param"", ""n"", ""number"", ""of"", ""coefficient"", ""sets"", ""type"", ""n"", ""int"", ""param"", ""polydg"", ""chebyshev"", ""polynomial"", ""degree"", ""type"", ""polydg"", ""int"", ""param"", ""cdata"", ""array"", ""of"", ""chebyshev"", ""coefficients"", ""type"", ""cdata"", ""array"", ""of"", ""floats"", ""param"", ""btime"", ""begin"", ""time"", ""of"", ""first"", ""logical"", ""record"", ""type"", ""btime"", ""float""]"
45,"Collects values from the knowledge base.

    Args:
      knowledge_base (KnowledgeBase): to fill with preprocessing information.

    Raises:
      PreProcessFail: if the preprocessing fails.","[""collects"", ""values"", ""from"", ""the"", ""knowledge"", ""base"", ""args"", ""knowledge"", ""base"", ""knowledge"", ""base"", ""to"", ""fill"", ""with"", ""preprocessing"", ""information"", ""raises"", ""pre"", ""process"", ""fail"", ""if"", ""the"", ""preprocessing"", ""fails""]"
46,"Searches for the parameter on the estimator that contains the array of
        alphas that was used to produce the error selection. If it cannot find
        the parameter then a YellowbrickValueError is raised.","[""searches"", ""for"", ""the"", ""parameter"", ""on"", ""the"", ""estimator"", ""that"", ""contains"", ""the"", ""array"", ""of"", ""alphas"", ""that"", ""was"", ""used"", ""to"", ""produce"", ""the"", ""error"", ""selection"", ""if"", ""it"", ""cannot"", ""find"", ""the"", ""parameter"", ""then"", ""a"", ""yellowbrick"", ""value"", ""error"", ""is"", ""raised""]"
47,"Clone

	Clone is used to clone one or many DBs/Tables from one host to another

	Args:
		source (dict): Data specifying the source instance
			A dictionary with the following possible elements: host, port, user,
			password, timeout, ssl (see rethinkdb python api)

		destination (dict): Date specifying the destination instance
			Works the same as source, but for the destination host

		dbs (list|dict): A list of DBs
			This is the list of Databases that will be cloned. If the value is a
			list, all tables in each DB with be cloned. If the value is a dict,
			it is assumed the keys are the names of the DBs, and the value (a
			list) is the tables that will be cloned from each DB

		verbose (bool): Optional verbose flag
			If true the function will print out details about what it's doing.
			Defaults to False

	Returns:
		bool: Returns true on success

	Raises:
		ValueError: If any arguments are incorrect a ValueError will be raised","[""clone"", ""clone"", ""is"", ""used"", ""to"", ""clone"", ""one"", ""or"", ""many"", ""d"", ""bs"", ""tables"", ""from"", ""one"", ""host"", ""to"", ""another"", ""args"", ""source"", ""dict"", ""data"", ""specifying"", ""the"", ""source"", ""instance"", ""a"", ""dictionary"", ""with"", ""the"", ""following"", ""possible"", ""elements"", ""host"", ""port"", ""user"", ""password"", ""timeout"", ""ssl"", ""see"", ""rethinkdb"", ""python"", ""api"", ""destination"", ""dict"", ""date"", ""specifying"", ""the"", ""destination"", ""instance"", ""works"", ""the"", ""same"", ""as"", ""source"", ""but"", ""for"", ""the"", ""destination"", ""host"", ""dbs"", ""list"", ""dict"", ""a"", ""list"", ""of"", ""d"", ""bs"", ""this"", ""is"", ""the"", ""list"", ""of"", ""databases"", ""that"", ""will"", ""be"", ""cloned"", ""if"", ""the"", ""value"", ""is"", ""a"", ""list"", ""all"", ""tables"", ""in"", ""each"", ""db"", ""with"", ""be"", ""cloned"", ""if"", ""the"", ""value"", ""is"", ""a"", ""dict"", ""it"", ""is"", ""assumed"", ""the"", ""keys"", ""are"", ""the"", ""names"", ""of"", ""the"", ""d"", ""bs"", ""and"", ""the"", ""value"", ""a"", ""list"", ""is"", ""the"", ""tables"", ""that"", ""will"", ""be"", ""cloned"", ""from"", ""each"", ""db"", ""verbose"", ""bool"", ""optional"", ""verbose"", ""flag"", ""if"", ""true"", ""the"", ""function"", ""will"", ""print"", ""out"", ""details"", ""about"", ""what"", ""it"", ""s"", ""doing"", ""defaults"", ""to"", ""false"", ""returns"", ""bool"", ""returns"", ""true"", ""on"", ""success"", ""raises"", ""value"", ""error"", ""if"", ""any"", ""arguments"", ""are"", ""incorrect"", ""a"", ""value"", ""error"", ""will"", ""be"", ""raised""]"
48,Subclasses may override this method.,"[""subclasses"", ""may"", ""override"", ""this"", ""method""]"
49,Telnet login: can be username/password or just password.,"[""telnet"", ""login"", ""can"", ""be"", ""username"", ""password"", ""or"", ""just"", ""password""]"
50,Return all GOs which match the user regex pattern.,"[""return"", ""all"", ""g"", ""os"", ""which"", ""match"", ""the"", ""user"", ""regex"", ""pattern""]"
51,"Get text or value from element based on locator with optional parameters.

        :param locator: element identifier
        :param params: (optional) locator parameters
        :param timeout: (optional) time to wait for text (default: None)
        :param visible: should element be visible before getting text (default: True)
        :return: element text, value or empty string","[""get"", ""text"", ""or"", ""value"", ""from"", ""element"", ""based"", ""on"", ""locator"", ""with"", ""optional"", ""parameters"", ""param"", ""locator"", ""element"", ""identifier"", ""param"", ""params"", ""optional"", ""locator"", ""parameters"", ""param"", ""timeout"", ""optional"", ""time"", ""to"", ""wait"", ""for"", ""text"", ""default"", ""none"", ""param"", ""visible"", ""should"", ""element"", ""be"", ""visible"", ""before"", ""getting"", ""text"", ""default"", ""true"", ""return"", ""element"", ""text"", ""value"", ""or"", ""empty"", ""string""]"
52,":param val: value of python type int or None
        :param typeObj: instance of Integer
        :param vldMask: None vldMask is resolved from val,
            if is 0 value is invalidated
            if is 1 value has to be valid","[""param"", ""val"", ""value"", ""of"", ""python"", ""type"", ""int"", ""or"", ""none"", ""param"", ""type"", ""obj"", ""instance"", ""of"", ""integer"", ""param"", ""vld"", ""mask"", ""none"", ""vld"", ""mask"", ""is"", ""resolved"", ""from"", ""val"", ""if"", ""is"", ""num"", ""value"", ""is"", ""invalidated"", ""if"", ""is"", ""num"", ""value"", ""has"", ""to"", ""be"", ""valid""]"
53,"NOTE: use refresh() instead of this, if you are just needing to refresh the alerts list
        Gets raw xml (cap) from the Alerts feed, throws it into the parser
        and ends up with a list of alerts object, which it stores to self._alerts","[""note"", ""use"", ""refresh"", ""instead"", ""of"", ""this"", ""if"", ""you"", ""are"", ""just"", ""needing"", ""to"", ""refresh"", ""the"", ""alerts"", ""list"", ""gets"", ""raw"", ""xml"", ""cap"", ""from"", ""the"", ""alerts"", ""feed"", ""throws"", ""it"", ""into"", ""the"", ""parser"", ""and"", ""ends"", ""up"", ""with"", ""a"", ""list"", ""of"", ""alerts"", ""object"", ""which"", ""it"", ""stores"", ""to"", ""self"", ""alerts""]"
54,:return: A pyrsistent field reflecting this attribute and its type model.,"[""return"", ""a"", ""pyrsistent"", ""field"", ""reflecting"", ""this"", ""attribute"", ""and"", ""its"", ""type"", ""model""]"
55,"Calls the `perform()` method defined by subclasses and stores the
        result in a `results` deque.

        After the result is determined the `results` deque is analyzed to see
        if the `passing` flag should be updated.  If the check was considered
        passing and the previous `self.fall` number of checks failed, the check
        is updated to not be passing.  If the check was not passing and the
        previous `self.rise` number of checks passed, the check is updated to
        be considered passing.","[""calls"", ""the"", ""str"", ""method"", ""defined"", ""by"", ""subclasses"", ""and"", ""stores"", ""the"", ""result"", ""in"", ""a"", ""str"", ""deque"", ""after"", ""the"", ""result"", ""is"", ""determined"", ""the"", ""str"", ""deque"", ""is"", ""analyzed"", ""to"", ""see"", ""if"", ""the"", ""str"", ""flag"", ""should"", ""be"", ""updated"", ""if"", ""the"", ""check"", ""was"", ""considered"", ""passing"", ""and"", ""the"", ""previous"", ""str"", ""number"", ""of"", ""checks"", ""failed"", ""the"", ""check"", ""is"", ""updated"", ""to"", ""not"", ""be"", ""passing"", ""if"", ""the"", ""check"", ""was"", ""not"", ""passing"", ""and"", ""the"", ""previous"", ""str"", ""number"", ""of"", ""checks"", ""passed"", ""the"", ""check"", ""is"", ""updated"", ""to"", ""be"", ""considered"", ""passing""]"
56,Returns SplitGenerators.,"[""returns"", ""split"", ""generators""]"
57,Continuously checks for iLO firmware update to complete.,"[""continuously"", ""checks"", ""for"", ""i"", ""lo"", ""firmware"", ""update"", ""to"", ""complete""]"
58,"Run or aggregate a query fragment

        Concat the fragment to any stored fragments. If they form a complete
        query, run it and return the result. If not, store them and return
        None.","[""run"", ""or"", ""aggregate"", ""a"", ""query"", ""fragment"", ""concat"", ""the"", ""fragment"", ""to"", ""any"", ""stored"", ""fragments"", ""if"", ""they"", ""form"", ""a"", ""complete"", ""query"", ""run"", ""it"", ""and"", ""return"", ""the"", ""result"", ""if"", ""not"", ""store"", ""them"", ""and"", ""return"", ""none""]"
59,"Renders a javascript snippet suitable for use as a mapbox-gl fill paint entry

        Returns:
            A dict that can be converted to a mapbox-gl javascript paint snippet","[""renders"", ""a"", ""javascript"", ""snippet"", ""suitable"", ""for"", ""use"", ""as"", ""a"", ""mapbox"", ""gl"", ""fill"", ""paint"", ""entry"", ""returns"", ""a"", ""dict"", ""that"", ""can"", ""be"", ""converted"", ""to"", ""a"", ""mapbox"", ""gl"", ""javascript"", ""paint"", ""snippet""]"
60,"Compute the L1-norm (Manhattan) distance between two points.

    The distance is rounded to the closest integer, for compatibility
    with the TSPLIB convention.

    The two points are located on coordinates (x1,y1) and (x2,y2),
    sent as parameters","[""compute"", ""the"", ""l"", ""1"", ""norm"", ""manhattan"", ""distance"", ""between"", ""two"", ""points"", ""the"", ""distance"", ""is"", ""rounded"", ""to"", ""the"", ""closest"", ""integer"", ""for"", ""compatibility"", ""with"", ""the"", ""tsplib"", ""convention"", ""the"", ""two"", ""points"", ""are"", ""located"", ""on"", ""coordinates"", ""x"", ""1"", ""y"", ""1"", ""and"", ""x"", ""2"", ""y"", ""2"", ""sent"", ""as"", ""parameters""]"
61,datagridçé»è®¤æ¨¡æ¿,"[""datagrid""]"
62,Close the socket and context,"[""close"", ""the"", ""socket"", ""and"", ""context""]"
63,"Returns an instance of the runner capable of running Lambda functions locally

        :return samcli.commands.local.lib.local_lambda.LocalLambdaRunner: Runner configured to run Lambda functions
            locally","[""returns"", ""an"", ""instance"", ""of"", ""the"", ""runner"", ""capable"", ""of"", ""running"", ""lambda"", ""functions"", ""locally"", ""return"", ""samcli"", ""commands"", ""local"", ""lib"", ""local"", ""lambda"", ""local"", ""lambda"", ""runner"", ""runner"", ""configured"", ""to"", ""run"", ""lambda"", ""functions"", ""locally""]"
64,"Finds optimal angles with the quantum variational eigensolver method.

        Stored VQE result

        :returns: A tuple of the beta angles and the gamma angles for the optimal solution.","[""finds"", ""optimal"", ""angles"", ""with"", ""the"", ""quantum"", ""variational"", ""eigensolver"", ""method"", ""stored"", ""vqe"", ""result"", ""returns"", ""a"", ""tuple"", ""of"", ""the"", ""beta"", ""angles"", ""and"", ""the"", ""gamma"", ""angles"", ""for"", ""the"", ""optimal"", ""solution""]"
65,Update the count number using the estimation of the unset ratio,"[""update"", ""the"", ""count"", ""number"", ""using"", ""the"", ""estimation"", ""of"", ""the"", ""unset"", ""ratio""]"
66,"Google Analytics tracking template tag.

    Renders Javascript code to track page visits.  You must supply
    your website property ID (as a string) in the
    ``GOOGLE_ANALYTICS_JS_PROPERTY_ID`` setting.","[""google"", ""analytics"", ""tracking"", ""template"", ""tag"", ""renders"", ""javascript"", ""code"", ""to"", ""track"", ""page"", ""visits"", ""you"", ""must"", ""supply"", ""your"", ""website"", ""property"", ""id"", ""as"", ""a"", ""string"", ""in"", ""the"", ""str"", ""google"", ""analytics"", ""js"", ""property"", ""id"", ""str"", ""setting""]"
67,"Reserve and deploys the vagrant boxes.

        Args:
            force_deploy (bool): True iff new machines should be started","[""reserve"", ""and"", ""deploys"", ""the"", ""vagrant"", ""boxes"", ""args"", ""force"", ""deploy"", ""bool"", ""true"", ""iff"", ""new"", ""machines"", ""should"", ""be"", ""started""]"
68,"print the name = values of any passed in variables

    this prints out the passed in name, the value, and the file:line where the v()
    method was called so you can easily find it and remove it later

    example -- 
        foo = 1
        bar = [1, 2, 3]
        out.v(foo, bar)
        """""" prints out:
        foo = 1

        bar = 
        [
            0: 1,
            1: 2,
            2: 3
        ]

        (/file:line)
        """"""

    *args -- list -- the variables you want to see pretty printed for humans","[""print"", ""the"", ""name"", ""values"", ""of"", ""any"", ""passed"", ""in"", ""variables"", ""this"", ""prints"", ""out"", ""the"", ""passed"", ""in"", ""name"", ""the"", ""value"", ""and"", ""the"", ""file"", ""line"", ""where"", ""the"", ""v"", ""method"", ""was"", ""called"", ""so"", ""you"", ""can"", ""easily"", ""find"", ""it"", ""and"", ""remove"", ""it"", ""later"", ""example"", ""foo"", ""num"", ""bar"", ""num"", ""num"", ""num"", ""out"", ""v"", ""foo"", ""bar"", ""str"", ""args"", ""list"", ""the"", ""variables"", ""you"", ""want"", ""to"", ""see"", ""pretty"", ""printed"", ""for"", ""humans""]"
69,Format the return value of a query for humans,"[""format"", ""the"", ""return"", ""value"", ""of"", ""a"", ""query"", ""for"", ""humans""]"
70,"Create and return a new reftrack node

        :returns: the new reftrack node
        :rtype: str
        :raises: None","[""create"", ""and"", ""return"", ""a"", ""new"", ""reftrack"", ""node"", ""returns"", ""the"", ""new"", ""reftrack"", ""node"", ""rtype"", ""str"", ""raises"", ""none""]"
71,"Returns a numeric snowflake pretending to be created at the given date.

    When using as the lower end of a range, use time_snowflake(high=False) - 1 to be inclusive, high=True to be exclusive
    When using as the higher end of a range, use time_snowflake(high=True) + 1 to be inclusive, high=False to be exclusive

    Parameters
    -----------
    datetime_obj
        A timezone-naive datetime object representing UTC time.
    high: :class:`bool`
        Whether or not to set the lower 22 bit to high or low.","[""returns"", ""a"", ""numeric"", ""snowflake"", ""pretending"", ""to"", ""be"", ""created"", ""at"", ""the"", ""given"", ""date"", ""when"", ""using"", ""as"", ""the"", ""lower"", ""end"", ""of"", ""a"", ""range"", ""use"", ""time"", ""snowflake"", ""high"", ""false"", ""num"", ""to"", ""be"", ""inclusive"", ""high"", ""true"", ""to"", ""be"", ""exclusive"", ""when"", ""using"", ""as"", ""the"", ""higher"", ""end"", ""of"", ""a"", ""range"", ""use"", ""time"", ""snowflake"", ""high"", ""true"", ""num"", ""to"", ""be"", ""inclusive"", ""high"", ""false"", ""to"", ""be"", ""exclusive"", ""parameters"", ""datetime"", ""obj"", ""a"", ""timezone"", ""naive"", ""datetime"", ""object"", ""representing"", ""utc"", ""time"", ""high"", ""class"", ""str"", ""whether"", ""or"", ""not"", ""to"", ""set"", ""the"", ""lower"", ""num"", ""bit"", ""to"", ""high"", ""or"", ""low""]"
72,"Loads the match config into internal data structures, which prepares us to later
        launch bot processes and start the match.

        This is an alternative to the load_config method; they accomplish the same thing.","[""loads"", ""the"", ""match"", ""config"", ""into"", ""internal"", ""data"", ""structures"", ""which"", ""prepares"", ""us"", ""to"", ""later"", ""launch"", ""bot"", ""processes"", ""and"", ""start"", ""the"", ""match"", ""this"", ""is"", ""an"", ""alternative"", ""to"", ""the"", ""load"", ""config"", ""method"", ""they"", ""accomplish"", ""the"", ""same"", ""thing""]"
73,"Returns a list of tuples (baseGlyph, transform) of nested component.","[""returns"", ""a"", ""list"", ""of"", ""tuples"", ""base"", ""glyph"", ""transform"", ""of"", ""nested"", ""component""]"
74,Before call strategy that logs to some logger the attempt.,"[""before"", ""call"", ""strategy"", ""that"", ""logs"", ""to"", ""some"", ""logger"", ""the"", ""attempt""]"
75,"Get the Miller index of a plane from a list of site coordinates.

    A minimum of 3 sets of coordinates are required. If more than 3 sets of
    coordinates are given, the best plane that minimises the distance to all
    points will be calculated.

    Args:
        lattice (list or Lattice): A 3x3 lattice matrix or `Lattice` object (for
            example obtained from Structure.lattice).
        coords (iterable): A list or numpy array of coordinates. Can be
            cartesian or fractional coordinates. If more than three sets of
            coordinates are provided, the best plane that minimises the
            distance to all sites will be calculated.
        coords_are_cartesian (bool, optional): Whether the coordinates are
            in cartesian space. If using fractional coordinates set to False.
        round_dp (int, optional): The number of decimal places to round the
            miller index to.
        verbose (bool, optional): Whether to print warnings.

    Returns:
        (tuple): The Miller index.","[""get"", ""the"", ""miller"", ""index"", ""of"", ""a"", ""plane"", ""from"", ""a"", ""list"", ""of"", ""site"", ""coordinates"", ""a"", ""minimum"", ""of"", ""num"", ""sets"", ""of"", ""coordinates"", ""are"", ""required"", ""if"", ""more"", ""than"", ""num"", ""sets"", ""of"", ""coordinates"", ""are"", ""given"", ""the"", ""best"", ""plane"", ""that"", ""minimises"", ""the"", ""distance"", ""to"", ""all"", ""points"", ""will"", ""be"", ""calculated"", ""args"", ""lattice"", ""list"", ""or"", ""lattice"", ""a"", ""x"", ""3"", ""lattice"", ""matrix"", ""or"", ""str"", ""object"", ""for"", ""example"", ""obtained"", ""from"", ""structure"", ""lattice"", ""coords"", ""iterable"", ""a"", ""list"", ""or"", ""numpy"", ""array"", ""of"", ""coordinates"", ""can"", ""be"", ""cartesian"", ""or"", ""fractional"", ""coordinates"", ""if"", ""more"", ""than"", ""three"", ""sets"", ""of"", ""coordinates"", ""are"", ""provided"", ""the"", ""best"", ""plane"", ""that"", ""minimises"", ""the"", ""distance"", ""to"", ""all"", ""sites"", ""will"", ""be"", ""calculated"", ""coords"", ""are"", ""cartesian"", ""bool"", ""optional"", ""whether"", ""the"", ""coordinates"", ""are"", ""in"", ""cartesian"", ""space"", ""if"", ""using"", ""fractional"", ""coordinates"", ""set"", ""to"", ""false"", ""round"", ""dp"", ""int"", ""optional"", ""the"", ""number"", ""of"", ""decimal"", ""places"", ""to"", ""round"", ""the"", ""miller"", ""index"", ""to"", ""verbose"", ""bool"", ""optional"", ""whether"", ""to"", ""print"", ""warnings"", ""returns"", ""tuple"", ""the"", ""miller"", ""index""]"
76,All elections on an election day.,"[""all"", ""elections"", ""on"", ""an"", ""election"", ""day""]"
77,"r""""""
        Add a display page to the display.

        :param page:  Page to be added
        :type display_id: ``DisplayPage``

        :param default: True if this page should be shown upon initialization.
            
        :type name: ``bool``","[""r"", ""str"", ""add"", ""a"", ""display"", ""page"", ""to"", ""the"", ""display"", ""param"", ""page"", ""page"", ""to"", ""be"", ""added"", ""type"", ""display"", ""id"", ""str"", ""display"", ""page"", ""str"", ""param"", ""default"", ""true"", ""if"", ""this"", ""page"", ""should"", ""be"", ""shown"", ""upon"", ""initialization"", ""type"", ""name"", ""str"", ""bool"", ""str""]"
78,"Shutdown the client and all of its managed resources:

        - the workers
        - the scheduler threads

        :return: None","[""shutdown"", ""the"", ""client"", ""and"", ""all"", ""of"", ""its"", ""managed"", ""resources"", ""the"", ""workers"", ""the"", ""scheduler"", ""threads"", ""return"", ""none""]"
79,"Gets IP address of the default docker machine
    Returns None if no docker-machine executable
    in the PATH and if there no Docker machine
    with name default present","[""gets"", ""ip"", ""address"", ""of"", ""the"", ""default"", ""docker"", ""machine"", ""returns"", ""none"", ""if"", ""no"", ""docker"", ""machine"", ""executable"", ""in"", ""the"", ""path"", ""and"", ""if"", ""there"", ""no"", ""docker"", ""machine"", ""with"", ""name"", ""default"", ""present""]"
80,"Randomly generate a symbolic integral dataset sample.

  Given an input expression, produce the indefinite integral.

  Args:
    vlist: Variable list. List of chars that can be used in the expression.
    ops: List of ExprOp instances. The allowed operators for the expression.
    min_depth: Expression trees will not have a smaller depth than this. 0 means
        there is just a variable. 1 means there is one operation.
    max_depth: Expression trees will not have a larger depth than this. To make
        all trees have the same depth, set this equal to `min_depth`.
    functions: Defines special functions. A dict mapping human readable string
        names, like ""log"", ""exp"", ""sin"", ""cos"", etc., to single chars. Each
        function gets a unique token, like ""L"" for ""log"".

  Returns:
    sample: String representation of the input. Will be of the form
        'var:expression'.
    target: String representation of the solution.","[""randomly"", ""generate"", ""a"", ""symbolic"", ""integral"", ""dataset"", ""sample"", ""given"", ""an"", ""input"", ""expression"", ""produce"", ""the"", ""indefinite"", ""integral"", ""args"", ""vlist"", ""variable"", ""list"", ""list"", ""of"", ""chars"", ""that"", ""can"", ""be"", ""used"", ""in"", ""the"", ""expression"", ""ops"", ""list"", ""of"", ""expr"", ""op"", ""instances"", ""the"", ""allowed"", ""operators"", ""for"", ""the"", ""expression"", ""min"", ""depth"", ""expression"", ""trees"", ""will"", ""not"", ""have"", ""a"", ""smaller"", ""depth"", ""than"", ""this"", ""num"", ""means"", ""there"", ""is"", ""just"", ""a"", ""variable"", ""num"", ""means"", ""there"", ""is"", ""one"", ""operation"", ""max"", ""depth"", ""expression"", ""trees"", ""will"", ""not"", ""have"", ""a"", ""larger"", ""depth"", ""than"", ""this"", ""to"", ""make"", ""all"", ""trees"", ""have"", ""the"", ""same"", ""depth"", ""set"", ""this"", ""equal"", ""to"", ""str"", ""functions"", ""defines"", ""special"", ""functions"", ""a"", ""dict"", ""mapping"", ""human"", ""readable"", ""string"", ""names"", ""like"", ""str"", ""str"", ""str"", ""str"", ""etc"", ""to"", ""single"", ""chars"", ""each"", ""function"", ""gets"", ""a"", ""unique"", ""token"", ""like"", ""str"", ""for"", ""str"", ""returns"", ""sample"", ""string"", ""representation"", ""of"", ""the"", ""input"", ""will"", ""be"", ""of"", ""the"", ""form"", ""str"", ""target"", ""string"", ""representation"", ""of"", ""the"", ""solution""]"
81,"Helper method to set a redirect response.

        Args:
            url (:obj:`str`): URL to redirect to
            status (:obj:`str`, optional): Status code of the response","[""helper"", ""method"", ""to"", ""set"", ""a"", ""redirect"", ""response"", ""args"", ""url"", ""obj"", ""str"", ""url"", ""to"", ""redirect"", ""to"", ""status"", ""obj"", ""str"", ""optional"", ""status"", ""code"", ""of"", ""the"", ""response""]"
82,"Filter in the 'proerty' context

        :parameter str feature: name of the feature (optional)
        :parameter **kwargs: any other tags to do the filter
            (except component or context)
        :return: :class:`phoebe.parameters.parameters.ParameterSet`","[""filter"", ""in"", ""the"", ""str"", ""context"", ""parameter"", ""str"", ""feature"", ""name"", ""of"", ""the"", ""feature"", ""optional"", ""parameter"", ""kwargs"", ""any"", ""other"", ""tags"", ""to"", ""do"", ""the"", ""filter"", ""except"", ""component"", ""or"", ""context"", ""return"", ""class"", ""str""]"
83,"Iterating all icon dirs, try to find a file called like the node's
        extension / mime subtype / mime type (in that order).
        For instance, for an MP3 file (""audio/mpeg""), this would look for:
        ""mp3.png"" / ""audio/mpeg.png"" / ""audio.png""","[""iterating"", ""all"", ""icon"", ""dirs"", ""try"", ""to"", ""find"", ""a"", ""file"", ""called"", ""like"", ""the"", ""node"", ""s"", ""extension"", ""mime"", ""subtype"", ""mime"", ""type"", ""in"", ""that"", ""order"", ""for"", ""instance"", ""for"", ""an"", ""mp"", ""3"", ""file"", ""str"", ""this"", ""would"", ""look"", ""for"", ""str"", ""str"", ""str""]"
84,"Add a new table to your account.  The table name must be unique
        among those associated with the account issuing the request.
        This request triggers an asynchronous workflow to begin creating
        the table.  When the workflow is complete, the state of the
        table will be ACTIVE.

        :type table_name: str
        :param table_name: The name of the table to create.
        
        :type schema: dict
        :param schema: A Python version of the KeySchema data structure
            as defined by DynamoDB

        :type provisioned_throughput: dict
        :param provisioned_throughput: A Python version of the
            ProvisionedThroughput data structure defined by
            DynamoDB.","[""add"", ""a"", ""new"", ""table"", ""to"", ""your"", ""account"", ""the"", ""table"", ""name"", ""must"", ""be"", ""unique"", ""among"", ""those"", ""associated"", ""with"", ""the"", ""account"", ""issuing"", ""the"", ""request"", ""this"", ""request"", ""triggers"", ""an"", ""asynchronous"", ""workflow"", ""to"", ""begin"", ""creating"", ""the"", ""table"", ""when"", ""the"", ""workflow"", ""is"", ""complete"", ""the"", ""state"", ""of"", ""the"", ""table"", ""will"", ""be"", ""active"", ""type"", ""table"", ""name"", ""str"", ""param"", ""table"", ""name"", ""the"", ""name"", ""of"", ""the"", ""table"", ""to"", ""create"", ""type"", ""schema"", ""dict"", ""param"", ""schema"", ""a"", ""python"", ""version"", ""of"", ""the"", ""key"", ""schema"", ""data"", ""structure"", ""as"", ""defined"", ""by"", ""dynamo"", ""db"", ""type"", ""provisioned"", ""throughput"", ""dict"", ""param"", ""provisioned"", ""throughput"", ""a"", ""python"", ""version"", ""of"", ""the"", ""provisioned"", ""throughput"", ""data"", ""structure"", ""defined"", ""by"", ""dynamo"", ""db""]"
85,http://www.django-rest-framework.org/topics/3.0-announcement/#using-is_validraise_exceptiontrue,"[""http"", ""www"", ""django"", ""rest"", ""framework"", ""org"", ""topics"", ""num"", ""announcement"", ""using"", ""is"", ""validraise"", ""exceptiontrue""]"
86,Adds the executable bit to the file at filepath `fp`,"[""adds"", ""the"", ""executable"", ""bit"", ""to"", ""the"", ""file"", ""at"", ""filepath"", ""str""]"
87,"Retrieve the Worker registered under the given name.

		If the given name does not exists in the Worker list, an Exception is raised.

		Parameters
		----------
		name: string
			Name of the Worker to retrieve","[""retrieve"", ""the"", ""worker"", ""registered"", ""under"", ""the"", ""given"", ""name"", ""if"", ""the"", ""given"", ""name"", ""does"", ""not"", ""exists"", ""in"", ""the"", ""worker"", ""list"", ""an"", ""exception"", ""is"", ""raised"", ""parameters"", ""name"", ""string"", ""name"", ""of"", ""the"", ""worker"", ""to"", ""retrieve""]"
88,"Run on osd node, writes the bootstrap key if not there yet.","[""run"", ""on"", ""osd"", ""node"", ""writes"", ""the"", ""bootstrap"", ""key"", ""if"", ""not"", ""there"", ""yet""]"
89,"This function updates the paths in the HMET card file to the new
    location of the HMET data. This is necessary because the file paths
    are absolute and will need to be updated if moved.

    Args:
        hmet_card_file_path(str): Location of the file used for the HMET_ASCII card.
        new_hmet_data_path(str): Location where the HMET ASCII files are currently.

    Example::

        new_hmet_data_path = ""E:\\GSSHA\\new_hmet_directory""
        hmet_card_file_path = ""E:\\GSSHA\\hmet_card_file.txt""

        update_hmet_card_file(hmet_card_file_path, new_hmet_data_path)","[""this"", ""function"", ""updates"", ""the"", ""paths"", ""in"", ""the"", ""hmet"", ""card"", ""file"", ""to"", ""the"", ""new"", ""location"", ""of"", ""the"", ""hmet"", ""data"", ""this"", ""is"", ""necessary"", ""because"", ""the"", ""file"", ""paths"", ""are"", ""absolute"", ""and"", ""will"", ""need"", ""to"", ""be"", ""updated"", ""if"", ""moved"", ""args"", ""hmet"", ""card"", ""file"", ""path"", ""str"", ""location"", ""of"", ""the"", ""file"", ""used"", ""for"", ""the"", ""hmet"", ""ascii"", ""card"", ""new"", ""hmet"", ""data"", ""path"", ""str"", ""location"", ""where"", ""the"", ""hmet"", ""ascii"", ""files"", ""are"", ""currently"", ""example"", ""new"", ""hmet"", ""data"", ""path"", ""str"", ""hmet"", ""card"", ""file"", ""path"", ""str"", ""update"", ""hmet"", ""card"", ""file"", ""hmet"", ""card"", ""file"", ""path"", ""new"", ""hmet"", ""data"", ""path""]"
90,"Get a single domain

    CLI Example:

    .. code-block:: bash

        salt '*' keystoneng.domain_get name=domain1
        salt '*' keystoneng.domain_get name=b62e76fbeeff4e8fb77073f591cf211e","[""get"", ""a"", ""single"", ""domain"", ""cli"", ""example"", ""code"", ""block"", ""bash"", ""salt"", ""str"", ""keystoneng"", ""domain"", ""get"", ""name"", ""domain"", ""1"", ""salt"", ""str"", ""keystoneng"", ""domain"", ""get"", ""name"", ""b"", ""62"", ""e"", ""76"", ""fbeeff"", ""4"", ""e"", ""8"", ""fb"", ""77073"", ""f"", ""591"", ""cf"", ""211"", ""e""]"
91,"Finds a substring that looks like an assignment.

    :param data: Source to search in.
    :param varname: Name of the variable for which an assignment should be
                    found.","[""finds"", ""a"", ""substring"", ""that"", ""looks"", ""like"", ""an"", ""assignment"", ""param"", ""data"", ""source"", ""to"", ""search"", ""in"", ""param"", ""varname"", ""name"", ""of"", ""the"", ""variable"", ""for"", ""which"", ""an"", ""assignment"", ""should"", ""be"", ""found""]"
92,"Calculate the powerset of any iterable.

    For a range of integers up to the length of the given list,
    make all possible combinations and chain them together as one object.
    From https://docs.python.org/3/library/itertools.html#itertools-recipes","[""calculate"", ""the"", ""powerset"", ""of"", ""any"", ""iterable"", ""for"", ""a"", ""range"", ""of"", ""integers"", ""up"", ""to"", ""the"", ""length"", ""of"", ""the"", ""given"", ""list"", ""make"", ""all"", ""possible"", ""combinations"", ""and"", ""chain"", ""them"", ""together"", ""as"", ""one"", ""object"", ""from"", ""https"", ""docs"", ""python"", ""org"", ""num"", ""library"", ""itertools"", ""html"", ""itertools"", ""recipes""]"
93,"Russian strftime, formats date with given format.

    Value is a date (supports datetime.date and datetime.datetime),
    parameter is a format (string). For explainings about format,
    see documentation for original strftime:
    http://docs.python.org/lib/module-time.html

    Examples::
        {{ some_date|ru_strftime:""%d %B %Y, %A"" }}","[""russian"", ""strftime"", ""formats"", ""date"", ""with"", ""given"", ""format"", ""value"", ""is"", ""a"", ""date"", ""supports"", ""datetime"", ""date"", ""and"", ""datetime"", ""datetime"", ""parameter"", ""is"", ""a"", ""format"", ""string"", ""for"", ""explainings"", ""about"", ""format"", ""see"", ""documentation"", ""for"", ""original"", ""strftime"", ""http"", ""docs"", ""python"", ""org"", ""lib"", ""module"", ""time"", ""html"", ""examples"", ""some"", ""date"", ""ru"", ""strftime"", ""str""]"
94,"Get the RDD's current storage level.

        >>> rdd1 = sc.parallelize([1,2])
        >>> rdd1.getStorageLevel()
        StorageLevel(False, False, False, False, 1)
        >>> print(rdd1.getStorageLevel())
        Serialized 1x Replicated","[""get"", ""the"", ""rdd"", ""s"", ""current"", ""storage"", ""level"", ""rdd"", ""1"", ""sc"", ""parallelize"", ""num"", ""num"", ""rdd"", ""1"", ""get"", ""storage"", ""level"", ""storage"", ""level"", ""false"", ""false"", ""false"", ""false"", ""num"", ""print"", ""rdd"", ""1"", ""get"", ""storage"", ""level"", ""serialized"", ""x"", ""replicated""]"
95,"Get data for this channel from frames or NDS

        Parameters
        ----------
        channel : `str`, `~gwpy.detector.Channel`
            the name of the channel to read, or a `Channel` object.

        start : `~gwpy.time.LIGOTimeGPS`, `float`, `str`
            GPS start time of required data,
            any input parseable by `~gwpy.time.to_gps` is fine

        end : `~gwpy.time.LIGOTimeGPS`, `float`, `str`
            GPS end time of required data,
            any input parseable by `~gwpy.time.to_gps` is fine

        bits : `Bits`, `list`, optional
            definition of bits for this `StateVector`

        pad : `float`, optional
            value with which to fill gaps in the source data, only used if
            gap is not given, or ``gap='pad'`` is given

        dtype : `numpy.dtype`, `str`, `type`, or `dict`
            numeric data type for returned data, e.g. `numpy.float`, or
            `dict` of (`channel`, `dtype`) pairs

        nproc : `int`, optional, default: `1`
            number of parallel processes to use, serial process by
            default.

        verbose : `bool`, optional
            print verbose output about NDS progress.

        **kwargs
            other keyword arguments to pass to either
            :meth:`.find` (for direct GWF file access) or
            :meth:`.fetch` for remote NDS2 access

        See Also
        --------
        StateVector.fetch
            for grabbing data from a remote NDS2 server
        StateVector.find
            for discovering and reading data from local GWF files","[""get"", ""data"", ""for"", ""this"", ""channel"", ""from"", ""frames"", ""or"", ""nds"", ""parameters"", ""channel"", ""str"", ""str"", ""the"", ""name"", ""of"", ""the"", ""channel"", ""to"", ""read"", ""or"", ""a"", ""str"", ""object"", ""start"", ""str"", ""str"", ""str"", ""gps"", ""start"", ""time"", ""of"", ""required"", ""data"", ""any"", ""input"", ""parseable"", ""by"", ""str"", ""is"", ""fine"", ""end"", ""str"", ""str"", ""str"", ""gps"", ""end"", ""time"", ""of"", ""required"", ""data"", ""any"", ""input"", ""parseable"", ""by"", ""str"", ""is"", ""fine"", ""bits"", ""str"", ""str"", ""optional"", ""definition"", ""of"", ""bits"", ""for"", ""this"", ""str"", ""pad"", ""str"", ""optional"", ""value"", ""with"", ""which"", ""to"", ""fill"", ""gaps"", ""in"", ""the"", ""source"", ""data"", ""only"", ""used"", ""if"", ""gap"", ""is"", ""not"", ""given"", ""or"", ""str"", ""gap"", ""str"", ""str"", ""is"", ""given"", ""dtype"", ""str"", ""str"", ""str"", ""or"", ""str"", ""numeric"", ""data"", ""type"", ""for"", ""returned"", ""data"", ""e"", ""g"", ""str"", ""or"", ""str"", ""of"", ""str"", ""str"", ""pairs"", ""nproc"", ""str"", ""optional"", ""default"", ""str"", ""number"", ""of"", ""parallel"", ""processes"", ""to"", ""use"", ""serial"", ""process"", ""by"", ""default"", ""verbose"", ""str"", ""optional"", ""print"", ""verbose"", ""output"", ""about"", ""nds"", ""progress"", ""kwargs"", ""other"", ""keyword"", ""arguments"", ""to"", ""pass"", ""to"", ""either"", ""meth"", ""str"", ""for"", ""direct"", ""gwf"", ""file"", ""access"", ""or"", ""meth"", ""str"", ""for"", ""remote"", ""nds"", ""2"", ""access"", ""see"", ""also"", ""state"", ""vector"", ""fetch"", ""for"", ""grabbing"", ""data"", ""from"", ""a"", ""remote"", ""nds"", ""2"", ""server"", ""state"", ""vector"", ""find"", ""for"", ""discovering"", ""and"", ""reading"", ""data"", ""from"", ""local"", ""gwf"", ""files""]"
96,"Yields N x M rectangular tiles for a region of interest.

    Parameters
    ----------
    roi : GeoVector
        Region of interest
    num_tiles : tuple
        Tuple (horizontal_tiles, vertical_tiles)

    Yields
    ------
    ~telluric.vectors.GeoVector","[""yields"", ""n"", ""x"", ""m"", ""rectangular"", ""tiles"", ""for"", ""a"", ""region"", ""of"", ""interest"", ""parameters"", ""roi"", ""geo"", ""vector"", ""region"", ""of"", ""interest"", ""num"", ""tiles"", ""tuple"", ""tuple"", ""horizontal"", ""tiles"", ""vertical"", ""tiles"", ""yields"", ""telluric"", ""vectors"", ""geo"", ""vector""]"
97,This function makes a tree from folders and files.,"[""this"", ""function"", ""makes"", ""a"", ""tree"", ""from"", ""folders"", ""and"", ""files""]"
98,Manage the action for the current stat.,"[""manage"", ""the"", ""action"", ""for"", ""the"", ""current"", ""stat""]"
99,"Set key policy condition.

        :param key: set key name.","[""set"", ""key"", ""policy"", ""condition"", ""param"", ""key"", ""set"", ""key"", ""name""]"
100,"Checks to see if commands in list are available using ``which``.

        returns the first available command.

        If a string is passed then that command will be checked for.","[""checks"", ""to"", ""see"", ""if"", ""commands"", ""in"", ""list"", ""are"", ""available"", ""using"", ""str"", ""which"", ""str"", ""returns"", ""the"", ""first"", ""available"", ""command"", ""if"", ""a"", ""string"", ""is"", ""passed"", ""then"", ""that"", ""command"", ""will"", ""be"", ""checked"", ""for""]"
101,Write the first sections file.,"[""write"", ""the"", ""first"", ""sections"", ""file""]"
102,Checks if the system is deadlocked running service jobs.,"[""checks"", ""if"", ""the"", ""system"", ""is"", ""deadlocked"", ""running"", ""service"", ""jobs""]"
103,"Translates the value stored in the imported datasource to an
        appropriate Python object and returns it.","[""translates"", ""the"", ""value"", ""stored"", ""in"", ""the"", ""imported"", ""datasource"", ""to"", ""an"", ""appropriate"", ""python"", ""object"", ""and"", ""returns"", ""it""]"
104,"change internal state, return action","[""change"", ""internal"", ""state"", ""return"", ""action""]"
105,Generates the report HTML.,"[""generates"", ""the"", ""report"", ""html""]"
106,"(*Type does NOT consider inherited class)
        Matcher.mtest(...) will return True if type(...) == expected_type
        Return: Matcher
        Raise: matcher_type_error","[""type"", ""does"", ""not"", ""consider"", ""inherited"", ""class"", ""matcher"", ""mtest"", ""will"", ""return"", ""true"", ""if"", ""type"", ""expected"", ""type"", ""return"", ""matcher"", ""raise"", ""matcher"", ""type"", ""error""]"
107,Print fatal errors that occurred during validation runs.,"[""print"", ""fatal"", ""errors"", ""that"", ""occurred"", ""during"", ""validation"", ""runs""]"
108,Update times for all keys in the layout.,"[""update"", ""times"", ""for"", ""all"", ""keys"", ""in"", ""the"", ""layout""]"
109,"Do everything needed when a task is closed

        Params:
            task_name (str): name of the task that is finishing
            record (logging.LogRecord): log record with all the info

        Returns:
            None","[""do"", ""everything"", ""needed"", ""when"", ""a"", ""task"", ""is"", ""closed"", ""params"", ""task"", ""name"", ""str"", ""name"", ""of"", ""the"", ""task"", ""that"", ""is"", ""finishing"", ""record"", ""logging"", ""log"", ""record"", ""log"", ""record"", ""with"", ""all"", ""the"", ""info"", ""returns"", ""none""]"
110,"Mutate a sequence by substituting given `alt` at instead of `ref` at the
    given `position`.

    Parameters
    ----------
    sequence : sequence
        String of amino acids or DNA bases

    offset : int
        Base 0 offset from start of `sequence`

    ref : sequence or str
        What do we expect to find at the position?

    alt : sequence or str
        Alternate sequence to insert","[""mutate"", ""a"", ""sequence"", ""by"", ""substituting"", ""given"", ""str"", ""at"", ""instead"", ""of"", ""str"", ""at"", ""the"", ""given"", ""str"", ""parameters"", ""sequence"", ""sequence"", ""string"", ""of"", ""amino"", ""acids"", ""or"", ""dna"", ""bases"", ""offset"", ""int"", ""base"", ""num"", ""offset"", ""from"", ""start"", ""of"", ""str"", ""ref"", ""sequence"", ""or"", ""str"", ""what"", ""do"", ""we"", ""expect"", ""to"", ""find"", ""at"", ""the"", ""position"", ""alt"", ""sequence"", ""or"", ""str"", ""alternate"", ""sequence"", ""to"", ""insert""]"
111,Convenience function that makes a summary of the cycling data.,"[""convenience"", ""function"", ""that"", ""makes"", ""a"", ""summary"", ""of"", ""the"", ""cycling"", ""data""]"
112,decorator factory for retrieval queries from query params,"[""decorator"", ""factory"", ""for"", ""retrieval"", ""queries"", ""from"", ""query"", ""params""]"
113,Get an app's directory,"[""get"", ""an"", ""app"", ""s"", ""directory""]"
114,"Get aliases of all parameters.

    Parameters
    ----------
    infos : list
        Content of the config header file.

    Returns
    -------
    pairs : list
        List of tuples (param alias, param name).","[""get"", ""aliases"", ""of"", ""all"", ""parameters"", ""parameters"", ""infos"", ""list"", ""content"", ""of"", ""the"", ""config"", ""header"", ""file"", ""returns"", ""pairs"", ""list"", ""list"", ""of"", ""tuples"", ""param"", ""alias"", ""param"", ""name""]"
115,"The basic idea is simple: start from a specific point, try to construct
        functions as much as we can, and maintain a function distribution graph
        and a call graph simultaneously. Repeat searching until we come to the
        end that there is no new function to be found.
        A function should start with:
            # some addresses that a call exit leads to, or
            # certain instructions. They are recoreded in SimArch.

        For a better performance, instead of blindly scanning the entire process
        space, we first try to search for instruction patterns that a function
        may start with, and start scanning at those positions. Then we try to
        decode anything that is left.","[""the"", ""basic"", ""idea"", ""is"", ""simple"", ""start"", ""from"", ""a"", ""specific"", ""point"", ""try"", ""to"", ""construct"", ""functions"", ""as"", ""much"", ""as"", ""we"", ""can"", ""and"", ""maintain"", ""a"", ""function"", ""distribution"", ""graph"", ""and"", ""a"", ""call"", ""graph"", ""simultaneously"", ""repeat"", ""searching"", ""until"", ""we"", ""come"", ""to"", ""the"", ""end"", ""that"", ""there"", ""is"", ""no"", ""new"", ""function"", ""to"", ""be"", ""found"", ""a"", ""function"", ""should"", ""start"", ""with"", ""some"", ""addresses"", ""that"", ""a"", ""call"", ""exit"", ""leads"", ""to"", ""or"", ""certain"", ""instructions"", ""they"", ""are"", ""recoreded"", ""in"", ""sim"", ""arch"", ""for"", ""a"", ""better"", ""performance"", ""instead"", ""of"", ""blindly"", ""scanning"", ""the"", ""entire"", ""process"", ""space"", ""we"", ""first"", ""try"", ""to"", ""search"", ""for"", ""instruction"", ""patterns"", ""that"", ""a"", ""function"", ""may"", ""start"", ""with"", ""and"", ""start"", ""scanning"", ""at"", ""those"", ""positions"", ""then"", ""we"", ""try"", ""to"", ""decode"", ""anything"", ""that"", ""is"", ""left""]"
116,Dowload repodata.,"[""dowload"", ""repodata""]"
117,"Create a new dictionary from two dictionaries by averaging values

    Args:
        dictin1 (DictUpperBound): First input dictionary
        dictin2 (DictUpperBound): Second input dictionary
        dropmissing (bool): Whether to drop keys missing in one dictionary. Defaults to True.

    Returns:
        Dict: Dictionary with values being average of 2 input dictionaries","[""create"", ""a"", ""new"", ""dictionary"", ""from"", ""two"", ""dictionaries"", ""by"", ""averaging"", ""values"", ""args"", ""dictin"", ""1"", ""dict"", ""upper"", ""bound"", ""first"", ""input"", ""dictionary"", ""dictin"", ""2"", ""dict"", ""upper"", ""bound"", ""second"", ""input"", ""dictionary"", ""dropmissing"", ""bool"", ""whether"", ""to"", ""drop"", ""keys"", ""missing"", ""in"", ""one"", ""dictionary"", ""defaults"", ""to"", ""true"", ""returns"", ""dict"", ""dictionary"", ""with"", ""values"", ""being"", ""average"", ""of"", ""num"", ""input"", ""dictionaries""]"
118,"Gets a ``RelationshipList`` corresponding to the given peer ``Id``.

        arg:    destination_id (osid.id.Id): a peer ``Id``
        return: (osid.relationship.RelationshipList) - the relationships
        raise:  NullArgument - ``destination_id`` is ``null``
        raise:  OperationFailed - unable to complete request
        raise:  PermissionDenied - authorization failure
        *compliance: mandatory -- This method must be implemented.*","[""gets"", ""a"", ""str"", ""relationship"", ""list"", ""str"", ""corresponding"", ""to"", ""the"", ""given"", ""peer"", ""str"", ""id"", ""str"", ""arg"", ""destination"", ""id"", ""osid"", ""id"", ""id"", ""a"", ""peer"", ""str"", ""id"", ""str"", ""return"", ""osid"", ""relationship"", ""relationship"", ""list"", ""the"", ""relationships"", ""raise"", ""null"", ""argument"", ""str"", ""destination"", ""id"", ""str"", ""is"", ""str"", ""null"", ""str"", ""raise"", ""operation"", ""failed"", ""unable"", ""to"", ""complete"", ""request"", ""raise"", ""permission"", ""denied"", ""authorization"", ""failure"", ""compliance"", ""mandatory"", ""this"", ""method"", ""must"", ""be"", ""implemented""]"
119,Starts streaming the feed using the provided session and feed options.,"[""starts"", ""streaming"", ""the"", ""feed"", ""using"", ""the"", ""provided"", ""session"", ""and"", ""feed"", ""options""]"
120,"Evaluate a model by the given metrics.
        :param x: ndarray or list of ndarray for local mode.
                  RDD[Sample] for distributed mode
        :param y: ndarray or list of ndarray for local mode and would be None for cluster mode.
        :param batch_size
        :param is_distributed: run in local mode or distributed mode.
               NB: if is_distributed=true, x should be RDD[Sample] and y should be None
        :return:","[""evaluate"", ""a"", ""model"", ""by"", ""the"", ""given"", ""metrics"", ""param"", ""x"", ""ndarray"", ""or"", ""list"", ""of"", ""ndarray"", ""for"", ""local"", ""mode"", ""rdd"", ""sample"", ""for"", ""distributed"", ""mode"", ""param"", ""y"", ""ndarray"", ""or"", ""list"", ""of"", ""ndarray"", ""for"", ""local"", ""mode"", ""and"", ""would"", ""be"", ""none"", ""for"", ""cluster"", ""mode"", ""param"", ""batch"", ""size"", ""param"", ""is"", ""distributed"", ""run"", ""in"", ""local"", ""mode"", ""or"", ""distributed"", ""mode"", ""nb"", ""if"", ""is"", ""distributed"", ""true"", ""x"", ""should"", ""be"", ""rdd"", ""sample"", ""and"", ""y"", ""should"", ""be"", ""none"", ""return""]"
121,"Return all ancestors of specified node.

        The default implementation is to use networkx, but some
        implementations of the Ontology class may use a database or
        service backed implementation, for large graphs.

        Arguments
        ---------
        node : str
            identifier for node in ontology
        reflexive : bool
            if true, return query node in graph
        relations : list
             relation (object property) IDs used to filter

        Returns
        -------
        list[str]
            ancestor node IDs","[""return"", ""all"", ""ancestors"", ""of"", ""specified"", ""node"", ""the"", ""default"", ""implementation"", ""is"", ""to"", ""use"", ""networkx"", ""but"", ""some"", ""implementations"", ""of"", ""the"", ""ontology"", ""class"", ""may"", ""use"", ""a"", ""database"", ""or"", ""service"", ""backed"", ""implementation"", ""for"", ""large"", ""graphs"", ""arguments"", ""node"", ""str"", ""identifier"", ""for"", ""node"", ""in"", ""ontology"", ""reflexive"", ""bool"", ""if"", ""true"", ""return"", ""query"", ""node"", ""in"", ""graph"", ""relations"", ""list"", ""relation"", ""object"", ""property"", ""i"", ""ds"", ""used"", ""to"", ""filter"", ""returns"", ""list"", ""str"", ""ancestor"", ""node"", ""i"", ""ds""]"
122,"Synchronize local po files with translations on GDocs Spreadsheet.
        Downloads two csv files, merges them and converts into po files
        structure. If new msgids appeared in po files, this method creates
        new ods with appended content and sends it to GDocs.","[""synchronize"", ""local"", ""po"", ""files"", ""with"", ""translations"", ""on"", ""g"", ""docs"", ""spreadsheet"", ""downloads"", ""two"", ""csv"", ""files"", ""merges"", ""them"", ""and"", ""converts"", ""into"", ""po"", ""files"", ""structure"", ""if"", ""new"", ""msgids"", ""appeared"", ""in"", ""po"", ""files"", ""this"", ""method"", ""creates"", ""new"", ""ods"", ""with"", ""appended"", ""content"", ""and"", ""sends"", ""it"", ""to"", ""g"", ""docs""]"
123,"Accepts a message pack string or a file object, renders said data back to
    a python dict.

    .. note:
        This renderer is NOT intended for use in creating sls files by hand,
        but exists to allow for data backends to serialize the highdata
        structure in an easily transportable way. This is to allow for more
        fluid fileserver backends that rely on pure data sources.

    :rtype: A Python data structure","[""accepts"", ""a"", ""message"", ""pack"", ""string"", ""or"", ""a"", ""file"", ""object"", ""renders"", ""said"", ""data"", ""back"", ""to"", ""a"", ""python"", ""dict"", ""note"", ""this"", ""renderer"", ""is"", ""not"", ""intended"", ""for"", ""use"", ""in"", ""creating"", ""sls"", ""files"", ""by"", ""hand"", ""but"", ""exists"", ""to"", ""allow"", ""for"", ""data"", ""backends"", ""to"", ""serialize"", ""the"", ""highdata"", ""structure"", ""in"", ""an"", ""easily"", ""transportable"", ""way"", ""this"", ""is"", ""to"", ""allow"", ""for"", ""more"", ""fluid"", ""fileserver"", ""backends"", ""that"", ""rely"", ""on"", ""pure"", ""data"", ""sources"", ""rtype"", ""a"", ""python"", ""data"", ""structure""]"
124,review_date : REVIEW_DATE DATE,"[""review"", ""date"", ""review"", ""date"", ""date""]"
125,"Utility method to return the default parsers able to parse an object from a file.
    Note that MultifileObjectParser is not provided in this list, as it is already added in a hardcoded way in
    RootParser
    :return:","[""utility"", ""method"", ""to"", ""return"", ""the"", ""default"", ""parsers"", ""able"", ""to"", ""parse"", ""an"", ""object"", ""from"", ""a"", ""file"", ""note"", ""that"", ""multifile"", ""object"", ""parser"", ""is"", ""not"", ""provided"", ""in"", ""this"", ""list"", ""as"", ""it"", ""is"", ""already"", ""added"", ""in"", ""a"", ""hardcoded"", ""way"", ""in"", ""root"", ""parser"", ""return""]"
126,Method to pretty print controls.,"[""method"", ""to"", ""pretty"", ""print"", ""controls""]"
127,"r""""""Return all values associated to the given ``key`` property
        in sequence.

        :param key: The property entity.
        :type key: :class:`Entity`
        :return: A sequence of all values associated to the given ``key``
                 property.  It can be empty if nothing is associated to
                 the property.
        :rtype: :class:`~typing.Sequence`\ [:class:`object`]","[""r"", ""str"", ""return"", ""all"", ""values"", ""associated"", ""to"", ""the"", ""given"", ""str"", ""key"", ""str"", ""property"", ""in"", ""sequence"", ""param"", ""key"", ""the"", ""property"", ""entity"", ""type"", ""key"", ""class"", ""str"", ""return"", ""a"", ""sequence"", ""of"", ""all"", ""values"", ""associated"", ""to"", ""the"", ""given"", ""str"", ""key"", ""str"", ""property"", ""it"", ""can"", ""be"", ""empty"", ""if"", ""nothing"", ""is"", ""associated"", ""to"", ""the"", ""property"", ""rtype"", ""class"", ""str"", ""class"", ""str""]"
128,"Style is a dict maping key to values.
        Valid keys are: background, format, alignment, border

        The values for keys are lists of tuples containing (attribute,
        value) pairs to set on model instances...","[""style"", ""is"", ""a"", ""dict"", ""maping"", ""key"", ""to"", ""values"", ""valid"", ""keys"", ""are"", ""background"", ""format"", ""alignment"", ""border"", ""the"", ""values"", ""for"", ""keys"", ""are"", ""lists"", ""of"", ""tuples"", ""containing"", ""attribute"", ""value"", ""pairs"", ""to"", ""set"", ""on"", ""model"", ""instances""]"
129,Add a group to the inventory after initialization,"[""add"", ""a"", ""group"", ""to"", ""the"", ""inventory"", ""after"", ""initialization""]"
130,"Calculate the batched KL divergence KL(a || b) with a and b Laplace.

  Args:
    a: instance of a Laplace distribution object.
    b: instance of a Laplace distribution object.
    name: (optional) Name to use for created operations.
      default is ""kl_laplace_laplace"".

  Returns:
    Batchwise KL(a || b)","[""calculate"", ""the"", ""batched"", ""kl"", ""divergence"", ""kl"", ""a"", ""b"", ""with"", ""a"", ""and"", ""b"", ""laplace"", ""args"", ""a"", ""instance"", ""of"", ""a"", ""laplace"", ""distribution"", ""object"", ""b"", ""instance"", ""of"", ""a"", ""laplace"", ""distribution"", ""object"", ""name"", ""optional"", ""name"", ""to"", ""use"", ""for"", ""created"", ""operations"", ""default"", ""is"", ""str"", ""returns"", ""batchwise"", ""kl"", ""a"", ""b""]"
131,Find the dependencies of the CWL document.,"[""find"", ""the"", ""dependencies"", ""of"", ""the"", ""cwl"", ""document""]"
132,Load the noise texture data into the current texture unit,"[""load"", ""the"", ""noise"", ""texture"", ""data"", ""into"", ""the"", ""current"", ""texture"", ""unit""]"
133,"List all private images.

        :param string guid: filter based on GUID
        :param string name: filter based on name
        :param dict \\*\\*kwargs: response-level options (mask, limit, etc.)","[""list"", ""all"", ""private"", ""images"", ""param"", ""string"", ""guid"", ""filter"", ""based"", ""on"", ""guid"", ""param"", ""string"", ""name"", ""filter"", ""based"", ""on"", ""name"", ""param"", ""dict"", ""kwargs"", ""response"", ""level"", ""options"", ""mask"", ""limit"", ""etc""]"
134,"Update the password policy for the AWS account.

    .. versionadded:: 2015.8.0

    CLI Example:

    .. code-block:: bash

        salt myminion boto_iam.update_account_password_policy True","[""update"", ""the"", ""password"", ""policy"", ""for"", ""the"", ""aws"", ""account"", ""versionadded"", ""num"", ""num"", ""cli"", ""example"", ""code"", ""block"", ""bash"", ""salt"", ""myminion"", ""boto"", ""iam"", ""update"", ""account"", ""password"", ""policy"", ""true""]"
135,Restarts an agent when it is cancelled,"[""restarts"", ""an"", ""agent"", ""when"", ""it"", ""is"", ""cancelled""]"
136,method updates job record with a new unit_of_work and new state,"[""method"", ""updates"", ""job"", ""record"", ""with"", ""a"", ""new"", ""unit"", ""of"", ""work"", ""and"", ""new"", ""state""]"
137,"Unregister the FilteredImage subclass currently assigned to attr_name.

        If a FilteredImage subclass isn't already registered to filters.
        `attr_name` NotRegistered will raise.","[""unregister"", ""the"", ""filtered"", ""image"", ""subclass"", ""currently"", ""assigned"", ""to"", ""attr"", ""name"", ""if"", ""a"", ""filtered"", ""image"", ""subclass"", ""isn"", ""t"", ""already"", ""registered"", ""to"", ""filters"", ""str"", ""not"", ""registered"", ""will"", ""raise""]"
138,"Add a teardown websocket function to the Blueprint.

        This is designed to be used as a decorator, and has the same
        arguments as :meth:`~quart.Quart.teardown_websocket`. It
        applies only to requests that are routed to an endpoint in
        this blueprint. An example usage,

        .. code-block:: python

            blueprint = Blueprint(__name__)
            @blueprint.teardown_websocket
            def teardown():
                ...","[""add"", ""a"", ""teardown"", ""websocket"", ""function"", ""to"", ""the"", ""blueprint"", ""this"", ""is"", ""designed"", ""to"", ""be"", ""used"", ""as"", ""a"", ""decorator"", ""and"", ""has"", ""the"", ""same"", ""arguments"", ""as"", ""meth"", ""str"", ""it"", ""applies"", ""only"", ""to"", ""requests"", ""that"", ""are"", ""routed"", ""to"", ""an"", ""endpoint"", ""in"", ""this"", ""blueprint"", ""an"", ""example"", ""usage"", ""code"", ""block"", ""python"", ""blueprint"", ""blueprint"", ""name"", ""blueprint"", ""teardown"", ""websocket"", ""def"", ""teardown""]"
139,"Parameters
        ----------
        file_ref: str
            reference of file.
            Available references:  'idf', 'epw', 'eio', 'eso', 'mtr', 'mtd', 'mdd', 'err', 'summary_table'
            See EnergyPlus documentation for more information.

        Returns
        -------
        Boolean","[""parameters"", ""file"", ""ref"", ""str"", ""reference"", ""of"", ""file"", ""available"", ""references"", ""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""see"", ""energy"", ""plus"", ""documentation"", ""for"", ""more"", ""information"", ""returns"", ""boolean""]"
140,"Calculate the mass of a peptide from its mz and charge.

    :param mz: float, mass to charge ratio (Dalton / charge)
    :param charge: int, charge state

    :returns: non protonated mass (charge = 0)","[""calculate"", ""the"", ""mass"", ""of"", ""a"", ""peptide"", ""from"", ""its"", ""mz"", ""and"", ""charge"", ""param"", ""mz"", ""float"", ""mass"", ""to"", ""charge"", ""ratio"", ""dalton"", ""charge"", ""param"", ""charge"", ""int"", ""charge"", ""state"", ""returns"", ""non"", ""protonated"", ""mass"", ""charge"", ""num""]"
141,Returns the keyword arguments for instantiating the form.,"[""returns"", ""the"", ""keyword"", ""arguments"", ""for"", ""instantiating"", ""the"", ""form""]"
142,Combine the pair.,"[""combine"", ""the"", ""pair""]"
143,Get a distribute lock,"[""get"", ""a"", ""distribute"", ""lock""]"
144,"Fallback to the first available output when the active layout
        was composed of only one output.

        This allows us to avoid cases where you get stuck with a black sreen
        on your laptop by switching back to the integrated screen
        automatically !","[""fallback"", ""to"", ""the"", ""first"", ""available"", ""output"", ""when"", ""the"", ""active"", ""layout"", ""was"", ""composed"", ""of"", ""only"", ""one"", ""output"", ""this"", ""allows"", ""us"", ""to"", ""avoid"", ""cases"", ""where"", ""you"", ""get"", ""stuck"", ""with"", ""a"", ""black"", ""sreen"", ""on"", ""your"", ""laptop"", ""by"", ""switching"", ""back"", ""to"", ""the"", ""integrated"", ""screen"", ""automatically""]"
145,"'home', 'popover', 'get', 'scroll', 'paginate',
            'sleep', 'git', 'browser', 'bug',
            'end', 'right', 'wrong', 'save', 'main', 'raw'

        - font support: https://github.com/ryanoasis/nerd-fonts","[""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""font"", ""support"", ""https"", ""github"", ""com"", ""ryanoasis"", ""nerd"", ""fonts""]"
146,"Finalize written chunk
        :param Downloader self: this
        :param blobxfer.models.download.Descriptor dd: download descriptor
        :param blobxfer.models.download.Offsets offsets: offsets","[""finalize"", ""written"", ""chunk"", ""param"", ""downloader"", ""self"", ""this"", ""param"", ""blobxfer"", ""models"", ""download"", ""descriptor"", ""dd"", ""download"", ""descriptor"", ""param"", ""blobxfer"", ""models"", ""download"", ""offsets"", ""offsets"", ""offsets""]"
147,clears maximum match_key term values,"[""clears"", ""maximum"", ""match"", ""key"", ""term"", ""values""]"
148,"Fringe matrix in Y

    :param theta: fringe angle, in [rad]
    :param rho: bend radius, in [m]
    :return: 2x2 numpy array","[""fringe"", ""matrix"", ""in"", ""y"", ""param"", ""theta"", ""fringe"", ""angle"", ""in"", ""rad"", ""param"", ""rho"", ""bend"", ""radius"", ""in"", ""m"", ""return"", ""x"", ""2"", ""numpy"", ""array""]"
149,Check if SSH is available on a host.,"[""check"", ""if"", ""ssh"", ""is"", ""available"", ""on"", ""a"", ""host""]"
150,"Emits the itemTrashed signal, data contained in drag 
        operation left to be garbage collected","[""emits"", ""the"", ""item"", ""trashed"", ""signal"", ""data"", ""contained"", ""in"", ""drag"", ""operation"", ""left"", ""to"", ""be"", ""garbage"", ""collected""]"
151,"Delete an instance.

        This method performs the DeleteInstance operation
        (see :term:`DSP0200`). See :ref:`WBEM operations` for a list of all
        methods performing such operations.

        If the operation succeeds, this method returns.
        Otherwise, this method raises an exception.

        Parameters:

          InstanceName (:class:`~pywbem.CIMInstanceName`):
            The instance path of the instance to be deleted.
            If this object does not specify a namespace, the default namespace
            of the connection is used.
            Its `host` attribute will be ignored.

          **extra :
            Additional keyword arguments are passed as additional operation
            parameters to the WBEM server.
            Note that :term:`DSP0200` does not define any additional parameters
            for this operation.

        Raises:

            Exceptions described in :class:`~pywbem.WBEMConnection`.","[""delete"", ""an"", ""instance"", ""this"", ""method"", ""performs"", ""the"", ""delete"", ""instance"", ""operation"", ""see"", ""term"", ""str"", ""see"", ""ref"", ""str"", ""for"", ""a"", ""list"", ""of"", ""all"", ""methods"", ""performing"", ""such"", ""operations"", ""if"", ""the"", ""operation"", ""succeeds"", ""this"", ""method"", ""returns"", ""otherwise"", ""this"", ""method"", ""raises"", ""an"", ""exception"", ""parameters"", ""instance"", ""name"", ""class"", ""str"", ""the"", ""instance"", ""path"", ""of"", ""the"", ""instance"", ""to"", ""be"", ""deleted"", ""if"", ""this"", ""object"", ""does"", ""not"", ""specify"", ""a"", ""namespace"", ""the"", ""default"", ""namespace"", ""of"", ""the"", ""connection"", ""is"", ""used"", ""its"", ""str"", ""attribute"", ""will"", ""be"", ""ignored"", ""extra"", ""additional"", ""keyword"", ""arguments"", ""are"", ""passed"", ""as"", ""additional"", ""operation"", ""parameters"", ""to"", ""the"", ""wbem"", ""server"", ""note"", ""that"", ""term"", ""str"", ""does"", ""not"", ""define"", ""any"", ""additional"", ""parameters"", ""for"", ""this"", ""operation"", ""raises"", ""exceptions"", ""described"", ""in"", ""class"", ""str""]"
152,"Iterate over the subclasses of the class.

        This function is the Python equivalent
        of the CLIPS class-subclasses command.","[""iterate"", ""over"", ""the"", ""subclasses"", ""of"", ""the"", ""class"", ""this"", ""function"", ""is"", ""the"", ""python"", ""equivalent"", ""of"", ""the"", ""clips"", ""class"", ""subclasses"", ""command""]"
153,"Obtains a generic description of the volume, containing the file system type, index, label and NTFS version.
        If *with_size* is provided, the volume size is also included.","[""obtains"", ""a"", ""generic"", ""description"", ""of"", ""the"", ""volume"", ""containing"", ""the"", ""file"", ""system"", ""type"", ""index"", ""label"", ""and"", ""ntfs"", ""version"", ""if"", ""with"", ""size"", ""is"", ""provided"", ""the"", ""volume"", ""size"", ""is"", ""also"", ""included""]"
154,Setup proxy model filter parameters,"[""setup"", ""proxy"", ""model"", ""filter"", ""parameters""]"
155,A view that allows the user to download a certificate bundle in PEM format.,"[""a"", ""view"", ""that"", ""allows"", ""the"", ""user"", ""to"", ""download"", ""a"", ""certificate"", ""bundle"", ""in"", ""pem"", ""format""]"
156,"Make a sequential palette from the cubehelix system.

    This produces a colormap with linearly-decreasing (or increasing)
    brightness. That means that information will be preserved if printed to
    black and white or viewed by someone who is colorblind.  ""cubehelix"" is
    also availible as a matplotlib-based palette, but this function gives the
    user more control over the look of the palette and has a different set of
    defaults.

    Parameters
    ----------
    n_colors : int
        Number of colors in the palette.
    start : float, 0 <= start <= 3
        The hue at the start of the helix.
    rot : float
        Rotations around the hue wheel over the range of the palette.
    gamma : float 0 <= gamma
        Gamma factor to emphasize darker (gamma < 1) or lighter (gamma > 1)
        colors.
    hue : float, 0 <= hue <= 1
        Saturation of the colors.
    dark : float 0 <= dark <= 1
        Intensity of the darkest color in the palette.
    light : float 0 <= light <= 1
        Intensity of the lightest color in the palette.
    reverse : bool
        If True, the palette will go from dark to light.
    as_cmap : bool
        If True, return a matplotlib colormap instead of a list of colors.

    Returns
    -------
    palette : list or colormap

    References
    ----------
    Green, D. A. (2011). ""A colour scheme for the display of astronomical
    intensity images"". Bulletin of the Astromical Society of India, Vol. 39,
    p. 289-295.","[""make"", ""a"", ""sequential"", ""palette"", ""from"", ""the"", ""cubehelix"", ""system"", ""this"", ""produces"", ""a"", ""colormap"", ""with"", ""linearly"", ""decreasing"", ""or"", ""increasing"", ""brightness"", ""that"", ""means"", ""that"", ""information"", ""will"", ""be"", ""preserved"", ""if"", ""printed"", ""to"", ""black"", ""and"", ""white"", ""or"", ""viewed"", ""by"", ""someone"", ""who"", ""is"", ""colorblind"", ""str"", ""is"", ""also"", ""availible"", ""as"", ""a"", ""matplotlib"", ""based"", ""palette"", ""but"", ""this"", ""function"", ""gives"", ""the"", ""user"", ""more"", ""control"", ""over"", ""the"", ""look"", ""of"", ""the"", ""palette"", ""and"", ""has"", ""a"", ""different"", ""set"", ""of"", ""defaults"", ""parameters"", ""n"", ""colors"", ""int"", ""number"", ""of"", ""colors"", ""in"", ""the"", ""palette"", ""start"", ""float"", ""num"", ""start"", ""num"", ""the"", ""hue"", ""at"", ""the"", ""start"", ""of"", ""the"", ""helix"", ""rot"", ""float"", ""rotations"", ""around"", ""the"", ""hue"", ""wheel"", ""over"", ""the"", ""range"", ""of"", ""the"", ""palette"", ""gamma"", ""float"", ""num"", ""gamma"", ""gamma"", ""factor"", ""to"", ""emphasize"", ""darker"", ""gamma"", ""num"", ""or"", ""lighter"", ""gamma"", ""num"", ""colors"", ""hue"", ""float"", ""num"", ""hue"", ""num"", ""saturation"", ""of"", ""the"", ""colors"", ""dark"", ""float"", ""num"", ""dark"", ""num"", ""intensity"", ""of"", ""the"", ""darkest"", ""color"", ""in"", ""the"", ""palette"", ""light"", ""float"", ""num"", ""light"", ""num"", ""intensity"", ""of"", ""the"", ""lightest"", ""color"", ""in"", ""the"", ""palette"", ""reverse"", ""bool"", ""if"", ""true"", ""the"", ""palette"", ""will"", ""go"", ""from"", ""dark"", ""to"", ""light"", ""as"", ""cmap"", ""bool"", ""if"", ""true"", ""return"", ""a"", ""matplotlib"", ""colormap"", ""instead"", ""of"", ""a"", ""list"", ""of"", ""colors"", ""returns"", ""palette"", ""list"", ""or"", ""colormap"", ""references"", ""green"", ""d"", ""a"", ""num"", ""str"", ""bulletin"", ""of"", ""the"", ""astromical"", ""society"", ""of"", ""india"", ""vol"", ""num"", ""p"", ""num"", ""num""]"
157,Attach to OS Window message handler,"[""attach"", ""to"", ""os"", ""window"", ""message"", ""handler""]"
158,Asynchronous function that processes queue until None is posted in queue,"[""asynchronous"", ""function"", ""that"", ""processes"", ""queue"", ""until"", ""none"", ""is"", ""posted"", ""in"", ""queue""]"
159,"Return the attributes values from this DicomFile

        Parameters
        ----------
        attributes: str or list of str
         DICOM field names

        default: str
         Default value if the attribute does not exist.

        Returns
        -------
        Value of the field or list of values.","[""return"", ""the"", ""attributes"", ""values"", ""from"", ""this"", ""dicom"", ""file"", ""parameters"", ""attributes"", ""str"", ""or"", ""list"", ""of"", ""str"", ""dicom"", ""field"", ""names"", ""default"", ""str"", ""default"", ""value"", ""if"", ""the"", ""attribute"", ""does"", ""not"", ""exist"", ""returns"", ""value"", ""of"", ""the"", ""field"", ""or"", ""list"", ""of"", ""values""]"
160,Add new data fields to this struct instance,"[""add"", ""new"", ""data"", ""fields"", ""to"", ""this"", ""struct"", ""instance""]"
161,"Get if character (or character code point) is contained by any range on
        this range group.

        :param character: character or unicode code point to look for
        :type character: str or int
        :returns: True if character is contained by any range, False otherwise
        :rtype: bool","[""get"", ""if"", ""character"", ""or"", ""character"", ""code"", ""point"", ""is"", ""contained"", ""by"", ""any"", ""range"", ""on"", ""this"", ""range"", ""group"", ""param"", ""character"", ""character"", ""or"", ""unicode"", ""code"", ""point"", ""to"", ""look"", ""for"", ""type"", ""character"", ""str"", ""or"", ""int"", ""returns"", ""true"", ""if"", ""character"", ""is"", ""contained"", ""by"", ""any"", ""range"", ""false"", ""otherwise"", ""rtype"", ""bool""]"
162,"Use input modality, vocab, and space id for target.","[""use"", ""input"", ""modality"", ""vocab"", ""and"", ""space"", ""id"", ""for"", ""target""]"
163,":returns: ``True`` if the node if a descendant of another node given
            as an argument, else, returns ``False``","[""returns"", ""str"", ""true"", ""str"", ""if"", ""the"", ""node"", ""if"", ""a"", ""descendant"", ""of"", ""another"", ""node"", ""given"", ""as"", ""an"", ""argument"", ""else"", ""returns"", ""str"", ""false"", ""str""]"
164,"Helper method to build the url to query to access the object
        passed as parameter

        :raises TypeError: if the object type is invalid","[""helper"", ""method"", ""to"", ""build"", ""the"", ""url"", ""to"", ""query"", ""to"", ""access"", ""the"", ""object"", ""passed"", ""as"", ""parameter"", ""raises"", ""type"", ""error"", ""if"", ""the"", ""object"", ""type"", ""is"", ""invalid""]"
165,Write url_data.name.,"[""write"", ""url"", ""data"", ""name""]"
166,"Add a list of Metric ingredients to the query. These can either be
        Metric objects or strings representing metrics on the shelf.

        The Metric expression will be added to the query's select statement.
        The metric value is a property of each row of the result.

        :param metrics: Metrics to add to the recipe. Metrics can
                         either be keys on the ``shelf`` or
                         Metric objects
        :type metrics: list","[""add"", ""a"", ""list"", ""of"", ""metric"", ""ingredients"", ""to"", ""the"", ""query"", ""these"", ""can"", ""either"", ""be"", ""metric"", ""objects"", ""or"", ""strings"", ""representing"", ""metrics"", ""on"", ""the"", ""shelf"", ""the"", ""metric"", ""expression"", ""will"", ""be"", ""added"", ""to"", ""the"", ""query"", ""s"", ""select"", ""statement"", ""the"", ""metric"", ""value"", ""is"", ""a"", ""property"", ""of"", ""each"", ""row"", ""of"", ""the"", ""result"", ""param"", ""metrics"", ""metrics"", ""to"", ""add"", ""to"", ""the"", ""recipe"", ""metrics"", ""can"", ""either"", ""be"", ""keys"", ""on"", ""the"", ""str"", ""shelf"", ""str"", ""or"", ""metric"", ""objects"", ""type"", ""metrics"", ""list""]"
167,"Called if a job, before trying to run it, has not the ""waiting"" status,
        or, after run, if its status was set to ""canceled""","[""called"", ""if"", ""a"", ""job"", ""before"", ""trying"", ""to"", ""run"", ""it"", ""has"", ""not"", ""the"", ""str"", ""status"", ""or"", ""after"", ""run"", ""if"", ""its"", ""status"", ""was"", ""set"", ""to"", ""str""]"
168,"Get International HapMap Consortium HapMap Phase II genetic map for Build 37.

        Returns
        -------
        dict
            dict of pandas.DataFrame HapMapII genetic maps if loading was successful, else None","[""get"", ""international"", ""hap"", ""map"", ""consortium"", ""hap"", ""map"", ""phase"", ""ii"", ""genetic"", ""map"", ""for"", ""build"", ""num"", ""returns"", ""dict"", ""dict"", ""of"", ""pandas"", ""data"", ""frame"", ""hap"", ""map"", ""ii"", ""genetic"", ""maps"", ""if"", ""loading"", ""was"", ""successful"", ""else"", ""none""]"
169,"Download file from URL

        Manually is not required action. You can send urls instead!

        :param url: target URL
        :param filename: optional. set custom file name
        :param chunk_size:

        :return: InputFile","[""download"", ""file"", ""from"", ""url"", ""manually"", ""is"", ""not"", ""required"", ""action"", ""you"", ""can"", ""send"", ""urls"", ""instead"", ""param"", ""url"", ""target"", ""url"", ""param"", ""filename"", ""optional"", ""set"", ""custom"", ""file"", ""name"", ""param"", ""chunk"", ""size"", ""return"", ""input"", ""file""]"
170,"Called by the observation code, we are interested in
        __setitem__","[""called"", ""by"", ""the"", ""observation"", ""code"", ""we"", ""are"", ""interested"", ""in"", ""setitem""]"
171,"åéæ¨¡æ¿æ¶æ¯

        è¯¦æè¯·åè
        https://mp.weixin.qq.com/wiki?id=mp1445241432&lang=zh_CN

        :param user_id: ç¨æ· ID ã å°±æ¯ä½ æ¶å°ç `Message` ç source
        :param template_id: æ¨¡æ¿ IDãå¨å¬ä¼å¹³å°çº¿ä¸æ¨¡æ¿åºä¸­éç¨æ¨¡æ¿è·å¾
        :param url: é¾æ¥å°å
        :param data: æ¨¡æ¿æ¶æ¯æ°æ®
        :param mini_program: è·³å°ç¨åºæéæ°æ®, å¦ï¼`{'appid': 'appid', 'pagepath': 'index?foo=bar'}`
        :return: è¿åç JSON æ°æ®å","[""https"", ""mp"", ""weixin"", ""qq"", ""com"", ""wiki"", ""id"", ""mp"", ""1445241432"", ""lang"", ""zh"", ""cn"", ""param"", ""user"", ""id"", ""id"", ""str"", ""source"", ""param"", ""template"", ""id"", ""id"", ""param"", ""url"", ""param"", ""data"", ""param"", ""mini"", ""program"", ""str"", ""return"", ""json""]"
172,"Check whether an option with a given name exists and has been set.

    :param name: the name of the option to check; can be short or long name.
    :return: true if an option matching the given name exists and it has had
             it's value set by the user","[""check"", ""whether"", ""an"", ""option"", ""with"", ""a"", ""given"", ""name"", ""exists"", ""and"", ""has"", ""been"", ""set"", ""param"", ""name"", ""the"", ""name"", ""of"", ""the"", ""option"", ""to"", ""check"", ""can"", ""be"", ""short"", ""or"", ""long"", ""name"", ""return"", ""true"", ""if"", ""an"", ""option"", ""matching"", ""the"", ""given"", ""name"", ""exists"", ""and"", ""it"", ""has"", ""had"", ""it"", ""s"", ""value"", ""set"", ""by"", ""the"", ""user""]"
173,"Return a list of all of the agents from a list of statements.

    Only agents that are not None and have a TEXT entry are returned.

    Parameters
    ----------
    stmts : list of :py:class:`indra.statements.Statement`

    Returns
    -------
    agents : list of :py:class:`indra.statements.Agent`
        List of agents that appear in the input list of indra statements.","[""return"", ""a"", ""list"", ""of"", ""all"", ""of"", ""the"", ""agents"", ""from"", ""a"", ""list"", ""of"", ""statements"", ""only"", ""agents"", ""that"", ""are"", ""not"", ""none"", ""and"", ""have"", ""a"", ""text"", ""entry"", ""are"", ""returned"", ""parameters"", ""stmts"", ""list"", ""of"", ""py"", ""class"", ""str"", ""returns"", ""agents"", ""list"", ""of"", ""py"", ""class"", ""str"", ""list"", ""of"", ""agents"", ""that"", ""appear"", ""in"", ""the"", ""input"", ""list"", ""of"", ""indra"", ""statements""]"
174,Returns all the applications from the store,"[""returns"", ""all"", ""the"", ""applications"", ""from"", ""the"", ""store""]"
175,"yield file like objects per 'leaf' node in the xml file that exists.
    This is for not trying to create a record with partial data in case the
    record was removed in the database.","[""yield"", ""file"", ""like"", ""objects"", ""per"", ""str"", ""node"", ""in"", ""the"", ""xml"", ""file"", ""that"", ""exists"", ""this"", ""is"", ""for"", ""not"", ""trying"", ""to"", ""create"", ""a"", ""record"", ""with"", ""partial"", ""data"", ""in"", ""case"", ""the"", ""record"", ""was"", ""removed"", ""in"", ""the"", ""database""]"
176,"Create a new dataset

        :param owner_id: Username of the owner of the new dataset
        :type owner_id: str
        :param title: Dataset title (will be used to generate dataset id on
            creation)
        :type title: str
        :param description: Dataset description
        :type description: str, optional
        :param summary: Dataset summary markdown
        :type summary: str, optional
        :param tags: Dataset tags
        :type tags: list, optional
        :param license: Dataset license
        :type license: {'Public Domain', 'PDDL', 'CC-0', 'CC-BY', 'ODC-BY',
            'CC-BY-SA', 'ODC-ODbL', 'CC BY-NC', 'CC BY-NC-SA', 'Other'}
        :param visibility: Dataset visibility
        :type visibility: {'OPEN', 'PRIVATE'}
        :param files: File name as dict, source URLs, description and labels()
        as properties
        :type files: dict, optional
            *Description and labels are optional*
        :returns: Newly created dataset key
        :rtype: str
        :raises RestApiException: If a server error occurs

        Examples
        --------
        >>> import datadotworld as dw
        >>> api_client = dw.api_client()
        >>> url = 'http://www.acme.inc/example.csv'
        >>> api_client.create_dataset(
        ...     'username', title='Test dataset', visibility='PRIVATE',
        ...     license='Public Domain',
        ...     files={'dataset.csv':{'url': url}})  # doctest: +SKIP","[""create"", ""a"", ""new"", ""dataset"", ""param"", ""owner"", ""id"", ""username"", ""of"", ""the"", ""owner"", ""of"", ""the"", ""new"", ""dataset"", ""type"", ""owner"", ""id"", ""str"", ""param"", ""title"", ""dataset"", ""title"", ""will"", ""be"", ""used"", ""to"", ""generate"", ""dataset"", ""id"", ""on"", ""creation"", ""type"", ""title"", ""str"", ""param"", ""description"", ""dataset"", ""description"", ""type"", ""description"", ""str"", ""optional"", ""param"", ""summary"", ""dataset"", ""summary"", ""markdown"", ""type"", ""summary"", ""str"", ""optional"", ""param"", ""tags"", ""dataset"", ""tags"", ""type"", ""tags"", ""list"", ""optional"", ""param"", ""license"", ""dataset"", ""license"", ""type"", ""license"", ""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""param"", ""visibility"", ""dataset"", ""visibility"", ""type"", ""visibility"", ""str"", ""str"", ""param"", ""files"", ""file"", ""name"", ""as"", ""dict"", ""source"", ""ur"", ""ls"", ""description"", ""and"", ""labels"", ""as"", ""properties"", ""type"", ""files"", ""dict"", ""optional"", ""description"", ""and"", ""labels"", ""are"", ""optional"", ""returns"", ""newly"", ""created"", ""dataset"", ""key"", ""rtype"", ""str"", ""raises"", ""rest"", ""api"", ""exception"", ""if"", ""a"", ""server"", ""error"", ""occurs"", ""examples"", ""import"", ""datadotworld"", ""as"", ""dw"", ""api"", ""client"", ""dw"", ""api"", ""client"", ""url"", ""str"", ""api"", ""client"", ""create"", ""dataset"", ""str"", ""title"", ""str"", ""visibility"", ""str"", ""license"", ""str"", ""files"", ""str"", ""str"", ""url"", ""doctest"", ""skip""]"
177,"First order derivative derivative of loglikelihood wrt r:shape parameter

        :param link_f: latent variables link(f)
        :type link_f: Nx1 array
        :param y: data
        :type y: Nx1 array
        :param Y_metadata: Y_metadata which is not used in gamma distribution
        :returns: third derivative of likelihood evaluated at points f
        :rtype: Nx1 array","[""first"", ""order"", ""derivative"", ""derivative"", ""of"", ""loglikelihood"", ""wrt"", ""r"", ""shape"", ""parameter"", ""param"", ""link"", ""f"", ""latent"", ""variables"", ""link"", ""f"", ""type"", ""link"", ""f"", ""nx"", ""1"", ""array"", ""param"", ""y"", ""data"", ""type"", ""y"", ""nx"", ""1"", ""array"", ""param"", ""y"", ""metadata"", ""y"", ""metadata"", ""which"", ""is"", ""not"", ""used"", ""in"", ""gamma"", ""distribution"", ""returns"", ""third"", ""derivative"", ""of"", ""likelihood"", ""evaluated"", ""at"", ""points"", ""f"", ""rtype"", ""nx"", ""1"", ""array""]"
178,"Backwards compatible version of SERIAL_UDB_EXTRA - F2: Part B

                sue_time                  : Serial UDB Extra Time (uint32_t)
                sue_pwm_input_1           : Serial UDB Extra PWM Input Channel 1 (int16_t)
                sue_pwm_input_2           : Serial UDB Extra PWM Input Channel 2 (int16_t)
                sue_pwm_input_3           : Serial UDB Extra PWM Input Channel 3 (int16_t)
                sue_pwm_input_4           : Serial UDB Extra PWM Input Channel 4 (int16_t)
                sue_pwm_input_5           : Serial UDB Extra PWM Input Channel 5 (int16_t)
                sue_pwm_input_6           : Serial UDB Extra PWM Input Channel 6 (int16_t)
                sue_pwm_input_7           : Serial UDB Extra PWM Input Channel 7 (int16_t)
                sue_pwm_input_8           : Serial UDB Extra PWM Input Channel 8 (int16_t)
                sue_pwm_input_9           : Serial UDB Extra PWM Input Channel 9 (int16_t)
                sue_pwm_input_10          : Serial UDB Extra PWM Input Channel 10 (int16_t)
                sue_pwm_output_1          : Serial UDB Extra PWM Output Channel 1 (int16_t)
                sue_pwm_output_2          : Serial UDB Extra PWM Output Channel 2 (int16_t)
                sue_pwm_output_3          : Serial UDB Extra PWM Output Channel 3 (int16_t)
                sue_pwm_output_4          : Serial UDB Extra PWM Output Channel 4 (int16_t)
                sue_pwm_output_5          : Serial UDB Extra PWM Output Channel 5 (int16_t)
                sue_pwm_output_6          : Serial UDB Extra PWM Output Channel 6 (int16_t)
                sue_pwm_output_7          : Serial UDB Extra PWM Output Channel 7 (int16_t)
                sue_pwm_output_8          : Serial UDB Extra PWM Output Channel 8 (int16_t)
                sue_pwm_output_9          : Serial UDB Extra PWM Output Channel 9 (int16_t)
                sue_pwm_output_10         : Serial UDB Extra PWM Output Channel 10 (int16_t)
                sue_imu_location_x        : Serial UDB Extra IMU Location X (int16_t)
                sue_imu_location_y        : Serial UDB Extra IMU Location Y (int16_t)
                sue_imu_location_z        : Serial UDB Extra IMU Location Z (int16_t)
                sue_flags                 : Serial UDB Extra Status Flags (uint32_t)
                sue_osc_fails             : Serial UDB Extra Oscillator Failure Count (int16_t)
                sue_imu_velocity_x        : Serial UDB Extra IMU Velocity X (int16_t)
                sue_imu_velocity_y        : Serial UDB Extra IMU Velocity Y (int16_t)
                sue_imu_velocity_z        : Serial UDB Extra IMU Velocity Z (int16_t)
                sue_waypoint_goal_x        : Serial UDB Extra Current Waypoint Goal X (int16_t)
                sue_waypoint_goal_y        : Serial UDB Extra Current Waypoint Goal Y (int16_t)
                sue_waypoint_goal_z        : Serial UDB Extra Current Waypoint Goal Z (int16_t)
                sue_memory_stack_free        : Serial UDB Extra Stack Memory Free (int16_t)","[""backwards"", ""compatible"", ""version"", ""of"", ""serial"", ""udb"", ""extra"", ""f"", ""2"", ""part"", ""b"", ""sue"", ""time"", ""serial"", ""udb"", ""extra"", ""time"", ""uint"", ""32"", ""t"", ""sue"", ""pwm"", ""input"", ""1"", ""serial"", ""udb"", ""extra"", ""pwm"", ""input"", ""channel"", ""num"", ""int"", ""16"", ""t"", ""sue"", ""pwm"", ""input"", ""2"", ""serial"", ""udb"", ""extra"", ""pwm"", ""input"", ""channel"", ""num"", ""int"", ""16"", ""t"", ""sue"", ""pwm"", ""input"", ""3"", ""serial"", ""udb"", ""extra"", ""pwm"", ""input"", ""channel"", ""num"", ""int"", ""16"", ""t"", ""sue"", ""pwm"", ""input"", ""4"", ""serial"", ""udb"", ""extra"", ""pwm"", ""input"", ""channel"", ""num"", ""int"", ""16"", ""t"", ""sue"", ""pwm"", ""input"", ""5"", ""serial"", ""udb"", ""extra"", ""pwm"", ""input"", ""channel"", ""num"", ""int"", ""16"", ""t"", ""sue"", ""pwm"", ""input"", ""6"", ""serial"", ""udb"", ""extra"", ""pwm"", ""input"", ""channel"", ""num"", ""int"", ""16"", ""t"", ""sue"", ""pwm"", ""input"", ""7"", ""serial"", ""udb"", ""extra"", ""pwm"", ""input"", ""channel"", ""num"", ""int"", ""16"", ""t"", ""sue"", ""pwm"", ""input"", ""8"", ""serial"", ""udb"", ""extra"", ""pwm"", ""input"", ""channel"", ""num"", ""int"", ""16"", ""t"", ""sue"", ""pwm"", ""input"", ""9"", ""serial"", ""udb"", ""extra"", ""pwm"", ""input"", ""channel"", ""num"", ""int"", ""16"", ""t"", ""sue"", ""pwm"", ""input"", ""10"", ""serial"", ""udb"", ""extra"", ""pwm"", ""input"", ""channel"", ""num"", ""int"", ""16"", ""t"", ""sue"", ""pwm"", ""output"", ""1"", ""serial"", ""udb"", ""extra"", ""pwm"", ""output"", ""channel"", ""num"", ""int"", ""16"", ""t"", ""sue"", ""pwm"", ""output"", ""2"", ""serial"", ""udb"", ""extra"", ""pwm"", ""output"", ""channel"", ""num"", ""int"", ""16"", ""t"", ""sue"", ""pwm"", ""output"", ""3"", ""serial"", ""udb"", ""extra"", ""pwm"", ""output"", ""channel"", ""num"", ""int"", ""16"", ""t"", ""sue"", ""pwm"", ""output"", ""4"", ""serial"", ""udb"", ""extra"", ""pwm"", ""output"", ""channel"", ""num"", ""int"", ""16"", ""t"", ""sue"", ""pwm"", ""output"", ""5"", ""serial"", ""udb"", ""extra"", ""pwm"", ""output"", ""channel"", ""num"", ""int"", ""16"", ""t"", ""sue"", ""pwm"", ""output"", ""6"", ""serial"", ""udb"", ""extra"", ""pwm"", ""output"", ""channel"", ""num"", ""int"", ""16"", ""t"", ""sue"", ""pwm"", ""output"", ""7"", ""serial"", ""udb"", ""extra"", ""pwm"", ""output"", ""channel"", ""num"", ""int"", ""16"", ""t"", ""sue"", ""pwm"", ""output"", ""8"", ""serial"", ""udb"", ""extra"", ""pwm"", ""output"", ""channel"", ""num"", ""int"", ""16"", ""t"", ""sue"", ""pwm"", ""output"", ""9"", ""serial"", ""udb"", ""extra"", ""pwm"", ""output"", ""channel"", ""num"", ""int"", ""16"", ""t"", ""sue"", ""pwm"", ""output"", ""10"", ""serial"", ""udb"", ""extra"", ""pwm"", ""output"", ""channel"", ""num"", ""int"", ""16"", ""t"", ""sue"", ""imu"", ""location"", ""x"", ""serial"", ""udb"", ""extra"", ""imu"", ""location"", ""x"", ""int"", ""16"", ""t"", ""sue"", ""imu"", ""location"", ""y"", ""serial"", ""udb"", ""extra"", ""imu"", ""location"", ""y"", ""int"", ""16"", ""t"", ""sue"", ""imu"", ""location"", ""z"", ""serial"", ""udb"", ""extra"", ""imu"", ""location"", ""z"", ""int"", ""16"", ""t"", ""sue"", ""flags"", ""serial"", ""udb"", ""extra"", ""status"", ""flags"", ""uint"", ""32"", ""t"", ""sue"", ""osc"", ""fails"", ""serial"", ""udb"", ""extra"", ""oscillator"", ""failure"", ""count"", ""int"", ""16"", ""t"", ""sue"", ""imu"", ""velocity"", ""x"", ""serial"", ""udb"", ""extra"", ""imu"", ""velocity"", ""x"", ""int"", ""16"", ""t"", ""sue"", ""imu"", ""velocity"", ""y"", ""serial"", ""udb"", ""extra"", ""imu"", ""velocity"", ""y"", ""int"", ""16"", ""t"", ""sue"", ""imu"", ""velocity"", ""z"", ""serial"", ""udb"", ""extra"", ""imu"", ""velocity"", ""z"", ""int"", ""16"", ""t"", ""sue"", ""waypoint"", ""goal"", ""x"", ""serial"", ""udb"", ""extra"", ""current"", ""waypoint"", ""goal"", ""x"", ""int"", ""16"", ""t"", ""sue"", ""waypoint"", ""goal"", ""y"", ""serial"", ""udb"", ""extra"", ""current"", ""waypoint"", ""goal"", ""y"", ""int"", ""16"", ""t"", ""sue"", ""waypoint"", ""goal"", ""z"", ""serial"", ""udb"", ""extra"", ""current"", ""waypoint"", ""goal"", ""z"", ""int"", ""16"", ""t"", ""sue"", ""memory"", ""stack"", ""free"", ""serial"", ""udb"", ""extra"", ""stack"", ""memory"", ""free"", ""int"", ""16"", ""t""]"
179,"Return the least signifiant bit
            O(N) in the worst case","[""return"", ""the"", ""least"", ""signifiant"", ""bit"", ""o"", ""n"", ""in"", ""the"", ""worst"", ""case""]"
180,List Users.,"[""list"", ""users""]"
181,Return a list of all the directories on the path.,"[""return"", ""a"", ""list"", ""of"", ""all"", ""the"", ""directories"", ""on"", ""the"", ""path""]"
182,"r""""""
        Convert Pauli to a sparse matrix representation (CSR format).

        Order is q_{n-1} .... q_0, i.e., $P_{n-1} \otimes ... P_0$

        Returns:
            scipy.sparse.csr_matrix: a sparse matrix with CSR format that
            represnets the pauli.","[""r"", ""str"", ""convert"", ""pauli"", ""to"", ""a"", ""sparse"", ""matrix"", ""representation"", ""csr"", ""format"", ""order"", ""is"", ""q"", ""n"", ""num"", ""q"", ""0"", ""i"", ""e"", ""p"", ""n"", ""num"", ""otimes"", ""p"", ""0"", ""returns"", ""scipy"", ""sparse"", ""csr"", ""matrix"", ""a"", ""sparse"", ""matrix"", ""with"", ""csr"", ""format"", ""that"", ""represnets"", ""the"", ""pauli""]"
183,...,[]
184,"Called when data first received

        :param data: Received data
        :param unique_id: Unique id
        :return: True if error present","[""called"", ""when"", ""data"", ""first"", ""received"", ""param"", ""data"", ""received"", ""data"", ""param"", ""unique"", ""id"", ""unique"", ""id"", ""return"", ""true"", ""if"", ""error"", ""present""]"
185,Return a iter consisting of two byte chars from a string.,"[""return"", ""a"", ""iter"", ""consisting"", ""of"", ""two"", ""byte"", ""chars"", ""from"", ""a"", ""string""]"
186,Auto Generated Code,"[""auto"", ""generated"", ""code""]"
187,"This decorator allows for PyMC arguments of various types to be passed to
    the plotting functions. It identifies the type of object and locates its
    trace(s), then passes the data to the wrapped plotting function.","[""this"", ""decorator"", ""allows"", ""for"", ""py"", ""mc"", ""arguments"", ""of"", ""various"", ""types"", ""to"", ""be"", ""passed"", ""to"", ""the"", ""plotting"", ""functions"", ""it"", ""identifies"", ""the"", ""type"", ""of"", ""object"", ""and"", ""locates"", ""its"", ""trace"", ""s"", ""then"", ""passes"", ""the"", ""data"", ""to"", ""the"", ""wrapped"", ""plotting"", ""function""]"
188,"Create item under file system with its path.

        Returns:
            True if its path does not exist, False otherwise.","[""create"", ""item"", ""under"", ""file"", ""system"", ""with"", ""its"", ""path"", ""returns"", ""true"", ""if"", ""its"", ""path"", ""does"", ""not"", ""exist"", ""false"", ""otherwise""]"
189,Are there unwanted Apple tables?,"[""are"", ""there"", ""unwanted"", ""apple"", ""tables""]"
190,Returns the default name of the configuration file.,"[""returns"", ""the"", ""default"", ""name"", ""of"", ""the"", ""configuration"", ""file""]"
191,"splits a key in a tuple, one of:
           ( [ 'N', 'n', '$' ],  0,   bignameid )
           ( [ 'N', 'n', '$' ],  name  )
           ( '-',  id )
           ( '.',  id )
           ( '.',  id,  tag )
           ( '.',  id,  tag, value )
           ( '.',  id,  'H', name  )","[""splits"", ""a"", ""key"", ""in"", ""a"", ""tuple"", ""one"", ""of"", ""str"", ""str"", ""str"", ""num"", ""bignameid"", ""str"", ""str"", ""str"", ""name"", ""str"", ""id"", ""str"", ""id"", ""str"", ""id"", ""tag"", ""str"", ""id"", ""tag"", ""value"", ""str"", ""id"", ""str"", ""name""]"
192,Keep annotaion if it passes potentially modified selection.,"[""keep"", ""annotaion"", ""if"", ""it"", ""passes"", ""potentially"", ""modified"", ""selection""]"
193,"The input is a list of [token, tag]-items.
        The output is a list of [token, tag, chunk]-items:
        The/DT nice/JJ fish/NN is/VBZ dead/JJ ./. =>
        The/DT/B-NP nice/JJ/I-NP fish/NN/I-NP is/VBZ/B-VP dead/JJ/B-ADJP ././O","[""the"", ""input"", ""is"", ""a"", ""list"", ""of"", ""token"", ""tag"", ""items"", ""the"", ""output"", ""is"", ""a"", ""list"", ""of"", ""token"", ""tag"", ""chunk"", ""items"", ""the"", ""dt"", ""nice"", ""jj"", ""fish"", ""nn"", ""is"", ""vbz"", ""dead"", ""jj"", ""the"", ""dt"", ""b"", ""np"", ""nice"", ""jj"", ""i"", ""np"", ""fish"", ""nn"", ""i"", ""np"", ""is"", ""vbz"", ""b"", ""vp"", ""dead"", ""jj"", ""b"", ""adjp"", ""o""]"
194,"Exports the inputed item to the given Excel worksheet for the
        given visible columns.
        
        :param      sheet | <xlwt.WorkSheet>
                    cols  | [<int>, ..]
                    item  | <QTreeWidgetItem>","[""exports"", ""the"", ""inputed"", ""item"", ""to"", ""the"", ""given"", ""excel"", ""worksheet"", ""for"", ""the"", ""given"", ""visible"", ""columns"", ""param"", ""sheet"", ""xlwt"", ""work"", ""sheet"", ""cols"", ""int"", ""item"", ""q"", ""tree"", ""widget"", ""item""]"
195,"Given PQ-codes, reconstruct original D-dimensional vectors
        approximately by fetching the codewords.

        Args:
            codes (np.ndarray): PQ-cdoes with shape=(N, M) and dtype=self.code_dtype.
                Each row is a PQ-code

        Returns:
            np.ndarray: Reconstructed vectors with shape=(N, D) and dtype=np.float32","[""given"", ""pq"", ""codes"", ""reconstruct"", ""original"", ""d"", ""dimensional"", ""vectors"", ""approximately"", ""by"", ""fetching"", ""the"", ""codewords"", ""args"", ""codes"", ""np"", ""ndarray"", ""pq"", ""cdoes"", ""with"", ""shape"", ""n"", ""m"", ""and"", ""dtype"", ""self"", ""code"", ""dtype"", ""each"", ""row"", ""is"", ""a"", ""pq"", ""code"", ""returns"", ""np"", ""ndarray"", ""reconstructed"", ""vectors"", ""with"", ""shape"", ""n"", ""d"", ""and"", ""dtype"", ""np"", ""float"", ""32""]"
196,"Check the validity of :class:`rtcclient.project_area.ProjectArea` id

        :param projectarea_id: the :class:`rtcclient.project_area.ProjectArea`
            id
        :param archived: (default is False) whether the project area is
            archived
        :return: `True` or `False`
        :rtype: bool","[""check"", ""the"", ""validity"", ""of"", ""class"", ""str"", ""id"", ""param"", ""projectarea"", ""id"", ""the"", ""class"", ""str"", ""id"", ""param"", ""archived"", ""default"", ""is"", ""false"", ""whether"", ""the"", ""project"", ""area"", ""is"", ""archived"", ""return"", ""str"", ""or"", ""str"", ""rtype"", ""bool""]"
197,Sets the value of an attribute.,"[""sets"", ""the"", ""value"", ""of"", ""an"", ""attribute""]"
198,"Computes the mean Silhouette Coefficient of all samples (implicit evaluation)

        :param data: The data that the clusters are generated from
        :param metric: the pairwise distance metric
        :param sample_size: the size of the sample to use computing the Silhouette Coefficient
        :param random_state: If an integer is given then it fixes its seed otherwise random.
        :param kwds: any further parameters that are passed to the distance function
        :return: the mean Silhouette Coefficient of all samples","[""computes"", ""the"", ""mean"", ""silhouette"", ""coefficient"", ""of"", ""all"", ""samples"", ""implicit"", ""evaluation"", ""param"", ""data"", ""the"", ""data"", ""that"", ""the"", ""clusters"", ""are"", ""generated"", ""from"", ""param"", ""metric"", ""the"", ""pairwise"", ""distance"", ""metric"", ""param"", ""sample"", ""size"", ""the"", ""size"", ""of"", ""the"", ""sample"", ""to"", ""use"", ""computing"", ""the"", ""silhouette"", ""coefficient"", ""param"", ""random"", ""state"", ""if"", ""an"", ""integer"", ""is"", ""given"", ""then"", ""it"", ""fixes"", ""its"", ""seed"", ""otherwise"", ""random"", ""param"", ""kwds"", ""any"", ""further"", ""parameters"", ""that"", ""are"", ""passed"", ""to"", ""the"", ""distance"", ""function"", ""return"", ""the"", ""mean"", ""silhouette"", ""coefficient"", ""of"", ""all"", ""samples""]"
199,Return columns for each public attribute on an object.,"[""return"", ""columns"", ""for"", ""each"", ""public"", ""attribute"", ""on"", ""an"", ""object""]"
200,"Keep listening for events forever.
        Args:
            timeout_ms: How long to poll the Home Server for before retrying.
            exception_handler: Optional exception handler function which can
                be used to handle exceptions in the caller thread.
            bad_sync_timeout: Base time to wait after an error before retrying.
                Will be increased according to exponential backoff.","[""keep"", ""listening"", ""for"", ""events"", ""forever"", ""args"", ""timeout"", ""ms"", ""how"", ""long"", ""to"", ""poll"", ""the"", ""home"", ""server"", ""for"", ""before"", ""retrying"", ""exception"", ""handler"", ""optional"", ""exception"", ""handler"", ""function"", ""which"", ""can"", ""be"", ""used"", ""to"", ""handle"", ""exceptions"", ""in"", ""the"", ""caller"", ""thread"", ""bad"", ""sync"", ""timeout"", ""base"", ""time"", ""to"", ""wait"", ""after"", ""an"", ""error"", ""before"", ""retrying"", ""will"", ""be"", ""increased"", ""according"", ""to"", ""exponential"", ""backoff""]"
201,Create a github3 client per repo/installation.,"[""create"", ""a"", ""github"", ""3"", ""client"", ""per"", ""repo"", ""installation""]"
202,"A dictionary of the paths of the urls to be mocked with this service and
        the handlers that should be called in their place","[""a"", ""dictionary"", ""of"", ""the"", ""paths"", ""of"", ""the"", ""urls"", ""to"", ""be"", ""mocked"", ""with"", ""this"", ""service"", ""and"", ""the"", ""handlers"", ""that"", ""should"", ""be"", ""called"", ""in"", ""their"", ""place""]"
203,Retrieve values for graphs.,"[""retrieve"", ""values"", ""for"", ""graphs""]"
204,Set pygments syntax highlighting style.,"[""set"", ""pygments"", ""syntax"", ""highlighting"", ""style""]"
205,"This function will find the times for which the segment_summary is set
    for the flag given by segmentName.

    Parameters
    -----------
    scienceFile : SegFile
        The segment file that we want to use to determine this.
    segmentName : string
        The DQ flag to search for times in the segment_summary table.

    Returns
    ---------
    summSegList : ligo.segments.segmentlist
        The times that are covered in the segment summary table.","[""this"", ""function"", ""will"", ""find"", ""the"", ""times"", ""for"", ""which"", ""the"", ""segment"", ""summary"", ""is"", ""set"", ""for"", ""the"", ""flag"", ""given"", ""by"", ""segment"", ""name"", ""parameters"", ""science"", ""file"", ""seg"", ""file"", ""the"", ""segment"", ""file"", ""that"", ""we"", ""want"", ""to"", ""use"", ""to"", ""determine"", ""this"", ""segment"", ""name"", ""string"", ""the"", ""dq"", ""flag"", ""to"", ""search"", ""for"", ""times"", ""in"", ""the"", ""segment"", ""summary"", ""table"", ""returns"", ""summ"", ""seg"", ""list"", ""ligo"", ""segments"", ""segmentlist"", ""the"", ""times"", ""that"", ""are"", ""covered"", ""in"", ""the"", ""segment"", ""summary"", ""table""]"
206,"It is used to close TCP connection and unregister
    the Spin instance from untwisted reactor.

    Diagram:

    lose -> (int:err | socket.error:err) -> CLOSE_ERR","[""it"", ""is"", ""used"", ""to"", ""close"", ""tcp"", ""connection"", ""and"", ""unregister"", ""the"", ""spin"", ""instance"", ""from"", ""untwisted"", ""reactor"", ""diagram"", ""lose"", ""int"", ""err"", ""socket"", ""error"", ""err"", ""close"", ""err""]"
207,implementation details,"[""implementation"", ""details""]"
208,"Find the supplementary row factor scores.

		ncols: The number of singular vectors to retain.
		If both are passed, cols is given preference.","[""find"", ""the"", ""supplementary"", ""row"", ""factor"", ""scores"", ""ncols"", ""the"", ""number"", ""of"", ""singular"", ""vectors"", ""to"", ""retain"", ""if"", ""both"", ""are"", ""passed"", ""cols"", ""is"", ""given"", ""preference""]"
209,"returns the bounding box for the segment in the form
        (xmin, xmax, ymin, ymax).","[""returns"", ""the"", ""bounding"", ""box"", ""for"", ""the"", ""segment"", ""in"", ""the"", ""form"", ""xmin"", ""xmax"", ""ymin"", ""ymax""]"
210,"Create a ``DataSpec`` dict that applies a client-side
    ``CategoricalPatternMapper`` transformation to a ``ColumnDataSource``
    column.

    Args:
        field_name (str) : a field name to configure ``DataSpec`` with

        patterns (seq[string]) : a list of hatch patterns to use to map to

        factors (seq) : a sequences of categorical factors corresponding to
            the palette

        start (int, optional) : a start slice index to apply when the column
            data has factors with multiple levels. (default: 0)

        end (int, optional) : an end slice index to apply when the column
            data has factors with multiple levels. (default: None)

    Returns:
        dict

    Added in version 1.1.1","[""create"", ""a"", ""str"", ""data"", ""spec"", ""str"", ""dict"", ""that"", ""applies"", ""a"", ""client"", ""side"", ""str"", ""categorical"", ""pattern"", ""mapper"", ""str"", ""transformation"", ""to"", ""a"", ""str"", ""column"", ""data"", ""source"", ""str"", ""column"", ""args"", ""field"", ""name"", ""str"", ""a"", ""field"", ""name"", ""to"", ""configure"", ""str"", ""data"", ""spec"", ""str"", ""with"", ""patterns"", ""seq"", ""string"", ""a"", ""list"", ""of"", ""hatch"", ""patterns"", ""to"", ""use"", ""to"", ""map"", ""to"", ""factors"", ""seq"", ""a"", ""sequences"", ""of"", ""categorical"", ""factors"", ""corresponding"", ""to"", ""the"", ""palette"", ""start"", ""int"", ""optional"", ""a"", ""start"", ""slice"", ""index"", ""to"", ""apply"", ""when"", ""the"", ""column"", ""data"", ""has"", ""factors"", ""with"", ""multiple"", ""levels"", ""default"", ""num"", ""end"", ""int"", ""optional"", ""an"", ""end"", ""slice"", ""index"", ""to"", ""apply"", ""when"", ""the"", ""column"", ""data"", ""has"", ""factors"", ""with"", ""multiple"", ""levels"", ""default"", ""none"", ""returns"", ""dict"", ""added"", ""in"", ""version"", ""num"", ""num""]"
211,Kills the process with the specified PID (if possible),"[""kills"", ""the"", ""process"", ""with"", ""the"", ""specified"", ""pid"", ""if"", ""possible""]"
212,"Decorator function casts wrapped arguments to A1 notation
    in range method calls.","[""decorator"", ""function"", ""casts"", ""wrapped"", ""arguments"", ""to"", ""a"", ""1"", ""notation"", ""in"", ""range"", ""method"", ""calls""]"
213,"deserialize object from the file.

        auto detect format by file extension name if `format` is None.
        for example, `.json` will detect as `json`.

        * raise `FormatNotFoundError` on unknown format.
        * raise `SerializeError` on any serialize exceptions.","[""deserialize"", ""object"", ""from"", ""the"", ""file"", ""auto"", ""detect"", ""format"", ""by"", ""file"", ""extension"", ""name"", ""if"", ""str"", ""is"", ""none"", ""for"", ""example"", ""str"", ""will"", ""detect"", ""as"", ""str"", ""raise"", ""str"", ""on"", ""unknown"", ""format"", ""raise"", ""str"", ""on"", ""any"", ""serialize"", ""exceptions""]"
214,the main routine,"[""the"", ""main"", ""routine""]"
215,"Starts and executes the GUI
    Reads data from a Queue and displays the data to the window
    Returns when the user exits / closes the window
        (that means it does NOT return until the user exits the window)
    :param gui_queue: Queue the GUI should read from
    :return:","[""starts"", ""and"", ""executes"", ""the"", ""gui"", ""reads"", ""data"", ""from"", ""a"", ""queue"", ""and"", ""displays"", ""the"", ""data"", ""to"", ""the"", ""window"", ""returns"", ""when"", ""the"", ""user"", ""exits"", ""closes"", ""the"", ""window"", ""that"", ""means"", ""it"", ""does"", ""not"", ""return"", ""until"", ""the"", ""user"", ""exits"", ""the"", ""window"", ""param"", ""gui"", ""queue"", ""queue"", ""the"", ""gui"", ""should"", ""read"", ""from"", ""return""]"
216,Removes comments from the element and its children.,"[""removes"", ""comments"", ""from"", ""the"", ""element"", ""and"", ""its"", ""children""]"
217,Get the sources of economic data.,"[""get"", ""the"", ""sources"", ""of"", ""economic"", ""data""]"
218,Device attribute setter,"[""device"", ""attribute"", ""setter""]"
219,"Get VLAN by its identifier.

        :param id_vlan: VLAN identifier.

        :return: Following dictionary:

        ::

          {'vlan': {'id': < id_vlan >,
          'nome': < nome_vlan >,
          'num_vlan': < num_vlan >,
          'id_ambiente': < id_ambiente >,
          'id_tipo_rede': < id_tipo_rede >,
          'rede_oct1': < rede_oct1 >,
          'rede_oct2': < rede_oct2 >,
          'rede_oct3': < rede_oct3 >,
          'rede_oct4': < rede_oct4 >,
          'bloco': < bloco >,
          'mascara_oct1': < mascara_oct1 >,
          'mascara_oct2': < mascara_oct2 >,
          'mascara_oct3': < mascara_oct3 >,
          'mascara_oct4': < mascara_oct4 >,
          'broadcast': < broadcast >,
          'descricao': < descricao >,
          'acl_file_name': < acl_file_name >,
          'acl_valida': < acl_valida >,
          'ativada': < ativada >}
          OR {'id': < id_vlan >,
          'nome': < nome_vlan >,
          'num_vlan': < num_vlan >,
          'id_tipo_rede': < id_tipo_rede >,
          'id_ambiente': < id_ambiente >,
          'bloco1': < bloco1 >,
          'bloco2': < bloco2 >,
          'bloco3': < bloco3 >,
          'bloco4': < bloco4 >,
          'bloco5': < bloco5 >,
          'bloco6': < bloco6 >,
          'bloco7': < bloco7 >,
          'bloco8': < bloco8 >,
          'bloco': < bloco >,
          'mask_bloco1': < mask_bloco1 >,
          'mask_bloco2': < mask_bloco2 >,
          'mask_bloco3': < mask_bloco3 >,
          'mask_bloco4': < mask_bloco4 >,
          'mask_bloco5': < mask_bloco5 >,
          'mask_bloco6': < mask_bloco6 >,
          'mask_bloco7': < mask_bloco7 >,
          'mask_bloco8': < mask_bloco8 >,
          'broadcast': < broadcast >,
          'descricao': < descricao >,
          'acl_file_name': < acl_file_name >,
          'acl_valida': < acl_valida >,
          'acl_file_name_v6': < acl_file_name_v6 >,
          'acl_valida_v6': < acl_valida_v6 >,
          'ativada': < ativada >}}

        :raise VlanNaoExisteError: VLAN does not exist.
        :raise InvalidParameterError: VLAN id is none or invalid.
        :raise DataBaseError: Networkapi failed to access the database.
        :raise XMLError: Networkapi failed to generate the XML response.","[""get"", ""vlan"", ""by"", ""its"", ""identifier"", ""param"", ""id"", ""vlan"", ""vlan"", ""identifier"", ""return"", ""following"", ""dictionary"", ""str"", ""str"", ""id"", ""vlan"", ""str"", ""nome"", ""vlan"", ""str"", ""num"", ""vlan"", ""str"", ""id"", ""ambiente"", ""str"", ""id"", ""tipo"", ""rede"", ""str"", ""rede"", ""oct"", ""1"", ""str"", ""rede"", ""oct"", ""2"", ""str"", ""rede"", ""oct"", ""3"", ""str"", ""rede"", ""oct"", ""4"", ""str"", ""bloco"", ""str"", ""mascara"", ""oct"", ""1"", ""str"", ""mascara"", ""oct"", ""2"", ""str"", ""mascara"", ""oct"", ""3"", ""str"", ""mascara"", ""oct"", ""4"", ""str"", ""broadcast"", ""str"", ""descricao"", ""str"", ""acl"", ""file"", ""name"", ""str"", ""acl"", ""valida"", ""str"", ""ativada"", ""or"", ""str"", ""id"", ""vlan"", ""str"", ""nome"", ""vlan"", ""str"", ""num"", ""vlan"", ""str"", ""id"", ""tipo"", ""rede"", ""str"", ""id"", ""ambiente"", ""str"", ""bloco"", ""1"", ""str"", ""bloco"", ""2"", ""str"", ""bloco"", ""3"", ""str"", ""bloco"", ""4"", ""str"", ""bloco"", ""5"", ""str"", ""bloco"", ""6"", ""str"", ""bloco"", ""7"", ""str"", ""bloco"", ""8"", ""str"", ""bloco"", ""str"", ""mask"", ""bloco"", ""1"", ""str"", ""mask"", ""bloco"", ""2"", ""str"", ""mask"", ""bloco"", ""3"", ""str"", ""mask"", ""bloco"", ""4"", ""str"", ""mask"", ""bloco"", ""5"", ""str"", ""mask"", ""bloco"", ""6"", ""str"", ""mask"", ""bloco"", ""7"", ""str"", ""mask"", ""bloco"", ""8"", ""str"", ""broadcast"", ""str"", ""descricao"", ""str"", ""acl"", ""file"", ""name"", ""str"", ""acl"", ""valida"", ""str"", ""acl"", ""file"", ""name"", ""v"", ""6"", ""str"", ""acl"", ""valida"", ""v"", ""6"", ""str"", ""ativada"", ""raise"", ""vlan"", ""nao"", ""existe"", ""error"", ""vlan"", ""does"", ""not"", ""exist"", ""raise"", ""invalid"", ""parameter"", ""error"", ""vlan"", ""id"", ""is"", ""none"", ""or"", ""invalid"", ""raise"", ""data"", ""base"", ""error"", ""networkapi"", ""failed"", ""to"", ""access"", ""the"", ""database"", ""raise"", ""xml"", ""error"", ""networkapi"", ""failed"", ""to"", ""generate"", ""the"", ""xml"", ""response""]"
220,"Get a single bookmark represented by `bookmark_id`.

        The requested bookmark must belong to the current user.

        :param bookmark_id: ID of the bookmark to retrieve.","[""get"", ""a"", ""single"", ""bookmark"", ""represented"", ""by"", ""str"", ""the"", ""requested"", ""bookmark"", ""must"", ""belong"", ""to"", ""the"", ""current"", ""user"", ""param"", ""bookmark"", ""id"", ""id"", ""of"", ""the"", ""bookmark"", ""to"", ""retrieve""]"
221,"Select cell under cursor in the visible portion of the file
        cell = group of lines separated by CELL_SEPARATORS
        returns
         -the textCursor
         -a boolean indicating if the entire file is selected
         -a boolean indicating if the entire visible portion of the file is selected","[""select"", ""cell"", ""under"", ""cursor"", ""in"", ""the"", ""visible"", ""portion"", ""of"", ""the"", ""file"", ""cell"", ""group"", ""of"", ""lines"", ""separated"", ""by"", ""cell"", ""separators"", ""returns"", ""the"", ""text"", ""cursor"", ""a"", ""boolean"", ""indicating"", ""if"", ""the"", ""entire"", ""file"", ""is"", ""selected"", ""a"", ""boolean"", ""indicating"", ""if"", ""the"", ""entire"", ""visible"", ""portion"", ""of"", ""the"", ""file"", ""is"", ""selected""]"
222,Look up the urls we need to post to,"[""look"", ""up"", ""the"", ""urls"", ""we"", ""need"", ""to"", ""post"", ""to""]"
223,"Create an instance (a recordset) corresponding to `ids` and
        attached to `env`.

        `from_record` parameter is used when the recordset is related to a
        parent record, and as such can take the value of a tuple
        (record, field). This is useful to update the parent record when the
        current recordset is modified.

        `iterated` can take the value of an iterated recordset, and no extra
        RPC queries are made to generate the resulting record (recordset and
        its record share the same values).","[""create"", ""an"", ""instance"", ""a"", ""recordset"", ""corresponding"", ""to"", ""str"", ""and"", ""attached"", ""to"", ""str"", ""str"", ""parameter"", ""is"", ""used"", ""when"", ""the"", ""recordset"", ""is"", ""related"", ""to"", ""a"", ""parent"", ""record"", ""and"", ""as"", ""such"", ""can"", ""take"", ""the"", ""value"", ""of"", ""a"", ""tuple"", ""record"", ""field"", ""this"", ""is"", ""useful"", ""to"", ""update"", ""the"", ""parent"", ""record"", ""when"", ""the"", ""current"", ""recordset"", ""is"", ""modified"", ""str"", ""can"", ""take"", ""the"", ""value"", ""of"", ""an"", ""iterated"", ""recordset"", ""and"", ""no"", ""extra"", ""rpc"", ""queries"", ""are"", ""made"", ""to"", ""generate"", ""the"", ""resulting"", ""record"", ""recordset"", ""and"", ""its"", ""record"", ""share"", ""the"", ""same"", ""values""]"
224,"Parse test results out of common test harnesses.

        Currently supported are:

         * Plone
         * Nose
         * Trial
         * Something mitchell wrote in Java","[""parse"", ""test"", ""results"", ""out"", ""of"", ""common"", ""test"", ""harnesses"", ""currently"", ""supported"", ""are"", ""plone"", ""nose"", ""trial"", ""something"", ""mitchell"", ""wrote"", ""in"", ""java""]"
225,"Read a specific section from a ConfigParser() object and return
    a dict() of all key-value pairs in that section","[""read"", ""a"", ""specific"", ""section"", ""from"", ""a"", ""config"", ""parser"", ""object"", ""and"", ""return"", ""a"", ""dict"", ""of"", ""all"", ""key"", ""value"", ""pairs"", ""in"", ""that"", ""section""]"
226,"Creates a bit-vector symbol (i.e., a variable). Other keyword parameters are passed directly on to the
        constructor of claripy.ast.BV.

        :param name:            The name of the symbol.
        :param size:            The size (in bits) of the bit-vector.
        :param min:             The minimum value of the symbol. Note that this **only** work when using VSA.
        :param max:             The maximum value of the symbol. Note that this **only** work when using VSA.
        :param stride:          The stride of the symbol. Note that this **only** work when using VSA.
        :param uninitialized:   Whether this value should be counted as an ""uninitialized"" value in the course of an
                                analysis.
        :param explicit_name:   Set to True to prevent an identifier from appended to the name to ensure uniqueness.
        :param key:             Set this to a tuple of increasingly specific identifiers (for example,
                                ``('mem', 0xffbeff00)`` or ``('file', 4, 0x20)`` to cause it to be tracked, i.e.
                                accessable through ``solver.get_variables``.
        :param eternal:         Set to True in conjunction with setting a key to cause all states with the same
                                ancestry to retrieve the same symbol when trying to create the value. If False, a
                                counter will be appended to the key.
        :param inspect:         Set to False to avoid firing SimInspect breakpoints
        :param events:          Set to False to avoid generating a SimEvent for the occasion

        :return:                A BV object representing this symbol.","[""creates"", ""a"", ""bit"", ""vector"", ""symbol"", ""i"", ""e"", ""a"", ""variable"", ""other"", ""keyword"", ""parameters"", ""are"", ""passed"", ""directly"", ""on"", ""to"", ""the"", ""constructor"", ""of"", ""claripy"", ""ast"", ""bv"", ""param"", ""name"", ""the"", ""name"", ""of"", ""the"", ""symbol"", ""param"", ""size"", ""the"", ""size"", ""in"", ""bits"", ""of"", ""the"", ""bit"", ""vector"", ""param"", ""min"", ""the"", ""minimum"", ""value"", ""of"", ""the"", ""symbol"", ""note"", ""that"", ""this"", ""only"", ""work"", ""when"", ""using"", ""vsa"", ""param"", ""max"", ""the"", ""maximum"", ""value"", ""of"", ""the"", ""symbol"", ""note"", ""that"", ""this"", ""only"", ""work"", ""when"", ""using"", ""vsa"", ""param"", ""stride"", ""the"", ""stride"", ""of"", ""the"", ""symbol"", ""note"", ""that"", ""this"", ""only"", ""work"", ""when"", ""using"", ""vsa"", ""param"", ""uninitialized"", ""whether"", ""this"", ""value"", ""should"", ""be"", ""counted"", ""as"", ""an"", ""str"", ""value"", ""in"", ""the"", ""course"", ""of"", ""an"", ""analysis"", ""param"", ""explicit"", ""name"", ""set"", ""to"", ""true"", ""to"", ""prevent"", ""an"", ""identifier"", ""from"", ""appended"", ""to"", ""the"", ""name"", ""to"", ""ensure"", ""uniqueness"", ""param"", ""key"", ""set"", ""this"", ""to"", ""a"", ""tuple"", ""of"", ""increasingly"", ""specific"", ""identifiers"", ""for"", ""example"", ""str"", ""str"", ""xffbeff"", ""00"", ""str"", ""or"", ""str"", ""str"", ""num"", ""x"", ""20"", ""str"", ""to"", ""cause"", ""it"", ""to"", ""be"", ""tracked"", ""i"", ""e"", ""accessable"", ""through"", ""str"", ""solver"", ""get"", ""variables"", ""str"", ""param"", ""eternal"", ""set"", ""to"", ""true"", ""in"", ""conjunction"", ""with"", ""setting"", ""a"", ""key"", ""to"", ""cause"", ""all"", ""states"", ""with"", ""the"", ""same"", ""ancestry"", ""to"", ""retrieve"", ""the"", ""same"", ""symbol"", ""when"", ""trying"", ""to"", ""create"", ""the"", ""value"", ""if"", ""false"", ""a"", ""counter"", ""will"", ""be"", ""appended"", ""to"", ""the"", ""key"", ""param"", ""inspect"", ""set"", ""to"", ""false"", ""to"", ""avoid"", ""firing"", ""sim"", ""inspect"", ""breakpoints"", ""param"", ""events"", ""set"", ""to"", ""false"", ""to"", ""avoid"", ""generating"", ""a"", ""sim"", ""event"", ""for"", ""the"", ""occasion"", ""return"", ""a"", ""bv"", ""object"", ""representing"", ""this"", ""symbol""]"
227,Request available methods for the service.,"[""request"", ""available"", ""methods"", ""for"", ""the"", ""service""]"
228,"Send the message via pytgbot.

        :param sender: The bot instance to send with.
        :type  sender: pytgbot.bot.Bot

        :rtype: PytgbotApiMessage","[""send"", ""the"", ""message"", ""via"", ""pytgbot"", ""param"", ""sender"", ""the"", ""bot"", ""instance"", ""to"", ""send"", ""with"", ""type"", ""sender"", ""pytgbot"", ""bot"", ""bot"", ""rtype"", ""pytgbot"", ""api"", ""message""]"
229,"Return new filename with extension that points to an extension with a
        valid WCS.

        Returns
        =======
        extnum : str, None
            Value of extension name as a string either as provided by the user
            or based on the extension number for the first extension which
            contains a valid HSTWCS object.  Returns None if no extension can be
            found with a valid WCS.

        Notes
        =====
        The return value from this function can be used as input to
            create another HSTWCS with the syntax::

                `HSTWCS('{}[{}]'.format(filename,extnum))","[""return"", ""new"", ""filename"", ""with"", ""extension"", ""that"", ""points"", ""to"", ""an"", ""extension"", ""with"", ""a"", ""valid"", ""wcs"", ""returns"", ""extnum"", ""str"", ""none"", ""value"", ""of"", ""extension"", ""name"", ""as"", ""a"", ""string"", ""either"", ""as"", ""provided"", ""by"", ""the"", ""user"", ""or"", ""based"", ""on"", ""the"", ""extension"", ""number"", ""for"", ""the"", ""first"", ""extension"", ""which"", ""contains"", ""a"", ""valid"", ""hstwcs"", ""object"", ""returns"", ""none"", ""if"", ""no"", ""extension"", ""can"", ""be"", ""found"", ""with"", ""a"", ""valid"", ""wcs"", ""notes"", ""the"", ""return"", ""value"", ""from"", ""this"", ""function"", ""can"", ""be"", ""used"", ""as"", ""input"", ""to"", ""create"", ""another"", ""hstwcs"", ""with"", ""the"", ""syntax"", ""hstwcs"", ""str"", ""format"", ""filename"", ""extnum""]"
230,Extract the argument documentation from the endpoint.,"[""extract"", ""the"", ""argument"", ""documentation"", ""from"", ""the"", ""endpoint""]"
231,"Draws the cloud of words representation

        :param path_to_bog: path to bag of words
        :param cluster_no: the number of document to be visualized
        :param image_path: path to the image file for the masking, None if no masking is needed","[""draws"", ""the"", ""cloud"", ""of"", ""words"", ""representation"", ""param"", ""path"", ""to"", ""bog"", ""path"", ""to"", ""bag"", ""of"", ""words"", ""param"", ""cluster"", ""no"", ""the"", ""number"", ""of"", ""document"", ""to"", ""be"", ""visualized"", ""param"", ""image"", ""path"", ""path"", ""to"", ""the"", ""image"", ""file"", ""for"", ""the"", ""masking"", ""none"", ""if"", ""no"", ""masking"", ""is"", ""needed""]"
232,"Check if the contents of `self` is a subset of the contents of
        `other.`

        Args:
            other (:class:`FrameSet`):

        Returns:
            bool:
            :class:`NotImplemented`: if `other` fails to convert to a :class:`FrameSet`","[""check"", ""if"", ""the"", ""contents"", ""of"", ""str"", ""is"", ""a"", ""subset"", ""of"", ""the"", ""contents"", ""of"", ""str"", ""args"", ""other"", ""class"", ""str"", ""returns"", ""bool"", ""class"", ""str"", ""if"", ""str"", ""fails"", ""to"", ""convert"", ""to"", ""a"", ""class"", ""str""]"
233,"NON-BLOCKING POP IN QUEUE, IF ANY","[""non"", ""blocking"", ""pop"", ""in"", ""queue"", ""if"", ""any""]"
234,"Set of architectural experiments - language model on wikipedia on a 2x2.

  1 epoch = ~180k steps at batch size 32 - we may never finish an epoch!

  Returns:
    a hparams","[""set"", ""of"", ""architectural"", ""experiments"", ""language"", ""model"", ""on"", ""wikipedia"", ""on"", ""a"", ""x"", ""2"", ""num"", ""epoch"", ""k"", ""steps"", ""at"", ""batch"", ""size"", ""num"", ""we"", ""may"", ""never"", ""finish"", ""an"", ""epoch"", ""returns"", ""a"", ""hparams""]"
235,"Build messages in the inbound queue.

        :param bool break_on_empty: Should we break the loop when there are
                                    no more messages in our inbound queue.

                                    This does not guarantee that the upstream
                                    queue is empty, as it's possible that if
                                    messages are consumed faster than
                                    delivered, the inbound queue will then be
                                    emptied and the consumption will be broken.
        :param bool to_tuple: Should incoming messages be converted to a
                              tuple before delivery.
        :param bool auto_decode: Auto-decode strings when possible.

        :raises AMQPChannelError: Raises if the channel encountered an error.
        :raises AMQPConnectionError: Raises if the connection
                                     encountered an error.

        :rtype: :py:class:`generator`","[""build"", ""messages"", ""in"", ""the"", ""inbound"", ""queue"", ""param"", ""bool"", ""break"", ""on"", ""empty"", ""should"", ""we"", ""break"", ""the"", ""loop"", ""when"", ""there"", ""are"", ""no"", ""more"", ""messages"", ""in"", ""our"", ""inbound"", ""queue"", ""this"", ""does"", ""not"", ""guarantee"", ""that"", ""the"", ""upstream"", ""queue"", ""is"", ""empty"", ""as"", ""it"", ""s"", ""possible"", ""that"", ""if"", ""messages"", ""are"", ""consumed"", ""faster"", ""than"", ""delivered"", ""the"", ""inbound"", ""queue"", ""will"", ""then"", ""be"", ""emptied"", ""and"", ""the"", ""consumption"", ""will"", ""be"", ""broken"", ""param"", ""bool"", ""to"", ""tuple"", ""should"", ""incoming"", ""messages"", ""be"", ""converted"", ""to"", ""a"", ""tuple"", ""before"", ""delivery"", ""param"", ""bool"", ""auto"", ""decode"", ""auto"", ""decode"", ""strings"", ""when"", ""possible"", ""raises"", ""amqp"", ""channel"", ""error"", ""raises"", ""if"", ""the"", ""channel"", ""encountered"", ""an"", ""error"", ""raises"", ""amqp"", ""connection"", ""error"", ""raises"", ""if"", ""the"", ""connection"", ""encountered"", ""an"", ""error"", ""rtype"", ""py"", ""class"", ""str""]"
236,calcules for every slave it's average over the desired observable,"[""calcules"", ""for"", ""every"", ""slave"", ""it"", ""s"", ""average"", ""over"", ""the"", ""desired"", ""observable""]"
237,checks if vagrant plugin is installed,"[""checks"", ""if"", ""vagrant"", ""plugin"", ""is"", ""installed""]"
238,"Performs matched selection.
        :param event: QMouseEvent","[""performs"", ""matched"", ""selection"", ""param"", ""event"", ""q"", ""mouse"", ""event""]"
239,Generate definitions to be converted to swagger schema.,"[""generate"", ""definitions"", ""to"", ""be"", ""converted"", ""to"", ""swagger"", ""schema""]"
240,"Callback decorator to require HTTP auth (basic).
        TODO: Add route(check_auth=...) parameter.","[""callback"", ""decorator"", ""to"", ""require"", ""http"", ""auth"", ""basic"", ""todo"", ""add"", ""route"", ""check"", ""auth"", ""parameter""]"
241,"A Geometric random variate
    
    Parameters
    ----------
    p : scalar
        The probability of success","[""a"", ""geometric"", ""random"", ""variate"", ""parameters"", ""p"", ""scalar"", ""the"", ""probability"", ""of"", ""success""]"
242,Set the percentage of free space to use.,"[""set"", ""the"", ""percentage"", ""of"", ""free"", ""space"", ""to"", ""use""]"
243,"Load all files from a folder recursively.

        Depending on :meth:`chooses_path` some paths may not be loaded.
        Every loaded path is processed and returned part of the returned list.

        :param str folder: the folder to load the files from
        :rtype: list
        :return: a list of the results of the processing steps of the loaded
          files","[""load"", ""all"", ""files"", ""from"", ""a"", ""folder"", ""recursively"", ""depending"", ""on"", ""meth"", ""str"", ""some"", ""paths"", ""may"", ""not"", ""be"", ""loaded"", ""every"", ""loaded"", ""path"", ""is"", ""processed"", ""and"", ""returned"", ""part"", ""of"", ""the"", ""returned"", ""list"", ""param"", ""str"", ""folder"", ""the"", ""folder"", ""to"", ""load"", ""the"", ""files"", ""from"", ""rtype"", ""list"", ""return"", ""a"", ""list"", ""of"", ""the"", ""results"", ""of"", ""the"", ""processing"", ""steps"", ""of"", ""the"", ""loaded"", ""files""]"
244,"Connect to an entity matching server and check the service status.

    Use ""-"" to output status to stdout.","[""connect"", ""to"", ""an"", ""entity"", ""matching"", ""server"", ""and"", ""check"", ""the"", ""service"", ""status"", ""use"", ""str"", ""to"", ""output"", ""status"", ""to"", ""stdout""]"
245,return the file name for Galprop merged gasmaps,"[""return"", ""the"", ""file"", ""name"", ""for"", ""galprop"", ""merged"", ""gasmaps""]"
246,"Reads data from the remote end of this stream.

    Internally, this data will have been contained in AdbMessages, but
    users of streams shouldn't need to care about the transport mechanism.

    Args:
      length: If provided, the number of bytes to read, otherwise all available
        data will be returned (at least one byte).
      timeout_ms: Time to wait for a message to come in for this stream, in
        milliseconds (or as a PolledTimeout object).

    Returns:
      Data that was read, or None if the end of the stream was reached.

    Raises:
      AdbProtocolError: Received an unexpected wonky non-stream packet (like a
        CNXN ADB message).
      AdbStreamClosedError: The stream is already closed.
      AdbTimeoutError: Timed out waiting for a message.","[""reads"", ""data"", ""from"", ""the"", ""remote"", ""end"", ""of"", ""this"", ""stream"", ""internally"", ""this"", ""data"", ""will"", ""have"", ""been"", ""contained"", ""in"", ""adb"", ""messages"", ""but"", ""users"", ""of"", ""streams"", ""shouldn"", ""t"", ""need"", ""to"", ""care"", ""about"", ""the"", ""transport"", ""mechanism"", ""args"", ""length"", ""if"", ""provided"", ""the"", ""number"", ""of"", ""bytes"", ""to"", ""read"", ""otherwise"", ""all"", ""available"", ""data"", ""will"", ""be"", ""returned"", ""at"", ""least"", ""one"", ""byte"", ""timeout"", ""ms"", ""time"", ""to"", ""wait"", ""for"", ""a"", ""message"", ""to"", ""come"", ""in"", ""for"", ""this"", ""stream"", ""in"", ""milliseconds"", ""or"", ""as"", ""a"", ""polled"", ""timeout"", ""object"", ""returns"", ""data"", ""that"", ""was"", ""read"", ""or"", ""none"", ""if"", ""the"", ""end"", ""of"", ""the"", ""stream"", ""was"", ""reached"", ""raises"", ""adb"", ""protocol"", ""error"", ""received"", ""an"", ""unexpected"", ""wonky"", ""non"", ""stream"", ""packet"", ""like"", ""a"", ""cnxn"", ""adb"", ""message"", ""adb"", ""stream"", ""closed"", ""error"", ""the"", ""stream"", ""is"", ""already"", ""closed"", ""adb"", ""timeout"", ""error"", ""timed"", ""out"", ""waiting"", ""for"", ""a"", ""message""]"
247,"Get the contents of an entry.

           NAME is an entry name.
           Return the tuple (ispkg, contents).
           For non-Python resoures, ispkg is meaningless (and 0).
           Used by the import mechanism.","[""get"", ""the"", ""contents"", ""of"", ""an"", ""entry"", ""name"", ""is"", ""an"", ""entry"", ""name"", ""return"", ""the"", ""tuple"", ""ispkg"", ""contents"", ""for"", ""non"", ""python"", ""resoures"", ""ispkg"", ""is"", ""meaningless"", ""and"", ""num"", ""used"", ""by"", ""the"", ""import"", ""mechanism""]"
248,"Build an MACSignatureKeyInformation struct from a dictionary.

        Args:
            value (dict): A dictionary containing the key/value pairs for a
                MACSignatureKeyInformation struct.

        Returns:
            MACSignatureInformation: a MACSignatureKeyInformation struct

        Raises:
            TypeError: if the input argument is invalid","[""build"", ""an"", ""mac"", ""signature"", ""key"", ""information"", ""struct"", ""from"", ""a"", ""dictionary"", ""args"", ""value"", ""dict"", ""a"", ""dictionary"", ""containing"", ""the"", ""key"", ""value"", ""pairs"", ""for"", ""a"", ""mac"", ""signature"", ""key"", ""information"", ""struct"", ""returns"", ""mac"", ""signature"", ""information"", ""a"", ""mac"", ""signature"", ""key"", ""information"", ""struct"", ""raises"", ""type"", ""error"", ""if"", ""the"", ""input"", ""argument"", ""is"", ""invalid""]"
249,"Converts linear and angular velocity of a point in frame A to the equivalent in frame B.

    Args:
        vel_A: 3-dim iterable for linear velocity in A
        ang_vel_A: 3-dim iterable for angular velocity in A
        pose_A_in_B: numpy array of shape (4,4) corresponding to the pose of A in frame B

    Returns:
        vel_B, ang_vel_B: two numpy arrays of shape (3,) for the velocities in B","[""converts"", ""linear"", ""and"", ""angular"", ""velocity"", ""of"", ""a"", ""point"", ""in"", ""frame"", ""a"", ""to"", ""the"", ""equivalent"", ""in"", ""frame"", ""b"", ""args"", ""vel"", ""a"", ""num"", ""dim"", ""iterable"", ""for"", ""linear"", ""velocity"", ""in"", ""a"", ""ang"", ""vel"", ""a"", ""num"", ""dim"", ""iterable"", ""for"", ""angular"", ""velocity"", ""in"", ""a"", ""pose"", ""a"", ""in"", ""b"", ""numpy"", ""array"", ""of"", ""shape"", ""num"", ""num"", ""corresponding"", ""to"", ""the"", ""pose"", ""of"", ""a"", ""in"", ""frame"", ""b"", ""returns"", ""vel"", ""b"", ""ang"", ""vel"", ""b"", ""two"", ""numpy"", ""arrays"", ""of"", ""shape"", ""num"", ""for"", ""the"", ""velocities"", ""in"", ""b""]"
250,Fetch child nodes for a given Zookeeper path.,"[""fetch"", ""child"", ""nodes"", ""for"", ""a"", ""given"", ""zookeeper"", ""path""]"
251,Make the X-Axis title,"[""make"", ""the"", ""x"", ""axis"", ""title""]"
252,"Encodes YAML representation.

    This is a mixin method for writing enum values to YAML. It needs to be added to the enum
    as a classmethod. See the module docstring for further information on this approach and how
    to implement it.

    This method writes whatever is used in the string representation of the YAML value.
    Usually, this will be the unique name of the enumeration value. If the name is used,
    the corresponding ``EnumFromYAML`` mixin can be used to recreate the value. If the name
    isn't used, more care may be necessary, so a ``from_yaml`` method for that particular
    enumeration may be necessary.

    Note:
        This method assumes that the name of the enumeration value should be stored as a scalar node.

    Args:
        representer: Representation from YAML.
        data: Enumeration value to be encoded.
    Returns:
        Scalar representation of the name of the enumeration value.","[""encodes"", ""yaml"", ""representation"", ""this"", ""is"", ""a"", ""mixin"", ""method"", ""for"", ""writing"", ""enum"", ""values"", ""to"", ""yaml"", ""it"", ""needs"", ""to"", ""be"", ""added"", ""to"", ""the"", ""enum"", ""as"", ""a"", ""classmethod"", ""see"", ""the"", ""module"", ""docstring"", ""for"", ""further"", ""information"", ""on"", ""this"", ""approach"", ""and"", ""how"", ""to"", ""implement"", ""it"", ""this"", ""method"", ""writes"", ""whatever"", ""is"", ""used"", ""in"", ""the"", ""string"", ""representation"", ""of"", ""the"", ""yaml"", ""value"", ""usually"", ""this"", ""will"", ""be"", ""the"", ""unique"", ""name"", ""of"", ""the"", ""enumeration"", ""value"", ""if"", ""the"", ""name"", ""is"", ""used"", ""the"", ""corresponding"", ""str"", ""enum"", ""from"", ""yaml"", ""str"", ""mixin"", ""can"", ""be"", ""used"", ""to"", ""recreate"", ""the"", ""value"", ""if"", ""the"", ""name"", ""isn"", ""t"", ""used"", ""more"", ""care"", ""may"", ""be"", ""necessary"", ""so"", ""a"", ""str"", ""from"", ""yaml"", ""str"", ""method"", ""for"", ""that"", ""particular"", ""enumeration"", ""may"", ""be"", ""necessary"", ""note"", ""this"", ""method"", ""assumes"", ""that"", ""the"", ""name"", ""of"", ""the"", ""enumeration"", ""value"", ""should"", ""be"", ""stored"", ""as"", ""a"", ""scalar"", ""node"", ""args"", ""representer"", ""representation"", ""from"", ""yaml"", ""data"", ""enumeration"", ""value"", ""to"", ""be"", ""encoded"", ""returns"", ""scalar"", ""representation"", ""of"", ""the"", ""name"", ""of"", ""the"", ""enumeration"", ""value""]"
253,"TODO: improve this!

    Returns True if the given string is considered a regular expression,
    False otherwise.
    It will be considered a regex if starts with a non alphabetic character
    and then correctly compiled by re.compile

    :param string: str","[""todo"", ""improve"", ""this"", ""returns"", ""true"", ""if"", ""the"", ""given"", ""string"", ""is"", ""considered"", ""a"", ""regular"", ""expression"", ""false"", ""otherwise"", ""it"", ""will"", ""be"", ""considered"", ""a"", ""regex"", ""if"", ""starts"", ""with"", ""a"", ""non"", ""alphabetic"", ""character"", ""and"", ""then"", ""correctly"", ""compiled"", ""by"", ""re"", ""compile"", ""param"", ""string"", ""str""]"
254,"points --> list of (x,y) coordinates","[""points"", ""list"", ""of"", ""x"", ""y"", ""coordinates""]"
255,"Sets the current value of the field

        :param value: value to set
        :return: rendered value","[""sets"", ""the"", ""current"", ""value"", ""of"", ""the"", ""field"", ""param"", ""value"", ""value"", ""to"", ""set"", ""return"", ""rendered"", ""value""]"
256,Use presets for length of the window.,"[""use"", ""presets"", ""for"", ""length"", ""of"", ""the"", ""window""]"
257,"Generate network configuration files for guest vm
        :param list guest_networks:  a list of network info for the guest.
               It has one dictionary that contain some of the below keys for
               each network, the format is:
               {'ip_addr': (str) IP address,
               'dns_addr': (list) dns addresses,
               'gateway_addr': (str) gateway address,
               'cidr': (str) cidr format
               'nic_vdev': (str) VDEV of the nic}

               Example for guest_networks:
               [{'ip_addr': '192.168.95.10',
               'dns_addr': ['9.0.2.1', '9.0.3.1'],
               'gateway_addr': '192.168.95.1',
               'cidr': ""192.168.95.0/24"",
               'nic_vdev': '1000'},
               {'ip_addr': '192.168.96.10',
               'dns_addr': ['9.0.2.1', '9.0.3.1'],
               'gateway_addr': '192.168.96.1',
               'cidr': ""192.168.96.0/24"",
               'nic_vdev': '1003}]","[""generate"", ""network"", ""configuration"", ""files"", ""for"", ""guest"", ""vm"", ""param"", ""list"", ""guest"", ""networks"", ""a"", ""list"", ""of"", ""network"", ""info"", ""for"", ""the"", ""guest"", ""it"", ""has"", ""one"", ""dictionary"", ""that"", ""contain"", ""some"", ""of"", ""the"", ""below"", ""keys"", ""for"", ""each"", ""network"", ""the"", ""format"", ""is"", ""str"", ""str"", ""ip"", ""address"", ""str"", ""list"", ""dns"", ""addresses"", ""str"", ""str"", ""gateway"", ""address"", ""str"", ""str"", ""cidr"", ""format"", ""str"", ""str"", ""vdev"", ""of"", ""the"", ""nic"", ""example"", ""for"", ""guest"", ""networks"", ""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""str"", ""num""]"
258,Decorator for making error handling on AWS Lambda easier,"[""decorator"", ""for"", ""making"", ""error"", ""handling"", ""on"", ""aws"", ""lambda"", ""easier""]"
259,"Parse configuration options out of a YAML configuration file.

        Inputs: configManager - Our parent ConfigManager instance which is constructing the Config object.
                config        - The _Config object containing configuration options populated thus far.

        Outputs: A dictionary of new configuration options to add to the Config object.","[""parse"", ""configuration"", ""options"", ""out"", ""of"", ""a"", ""yaml"", ""configuration"", ""file"", ""inputs"", ""config"", ""manager"", ""our"", ""parent"", ""config"", ""manager"", ""instance"", ""which"", ""is"", ""constructing"", ""the"", ""config"", ""object"", ""config"", ""the"", ""config"", ""object"", ""containing"", ""configuration"", ""options"", ""populated"", ""thus"", ""far"", ""outputs"", ""a"", ""dictionary"", ""of"", ""new"", ""configuration"", ""options"", ""to"", ""add"", ""to"", ""the"", ""config"", ""object""]"
260,Save model in the logging directory,"[""save"", ""model"", ""in"", ""the"", ""logging"", ""directory""]"
261,Page for viewing all releases in a build.,"[""page"", ""for"", ""viewing"", ""all"", ""releases"", ""in"", ""a"", ""build""]"
262,geometrica,"[""geometrica""]"
263,"You can use a different encoding from UTF-8 by putting a specially-formatted
    comment as the first or second line of the source code.","[""you"", ""can"", ""use"", ""a"", ""different"", ""encoding"", ""from"", ""utf"", ""num"", ""by"", ""putting"", ""a"", ""specially"", ""formatted"", ""comment"", ""as"", ""the"", ""first"", ""or"", ""second"", ""line"", ""of"", ""the"", ""source"", ""code""]"
264,Cleanup a remotely merged branch.,"[""cleanup"", ""a"", ""remotely"", ""merged"", ""branch""]"
265,"Leaves a specific group

        :param group_jid: The JID of the group to leave","[""leaves"", ""a"", ""specific"", ""group"", ""param"", ""group"", ""jid"", ""the"", ""jid"", ""of"", ""the"", ""group"", ""to"", ""leave""]"
266,"Annotate the input bed file using one of the annotation beds.
        Parameters
        ----------
        bt : pybedtools.BedTool
            BedTool for either one of the anchors, the loops,
            or the loop inners.
        
        name : str
            The key for the annoation bed file in annot_beds. 
        
        col_name : str
            Used to name the columns that will be made.
            
        complete : bool
            If True, this method will check whether the features in the
            annotation bed are completely contained by the features in the input
            bed.
            
        df_col : str
            If the name for bt isn't the index of self.df, this specifies
            which column of self.df contains the names for bt. For instance,
            if bt is the anchor1 BedTool, the df_col='anchor11'.","[""annotate"", ""the"", ""input"", ""bed"", ""file"", ""using"", ""one"", ""of"", ""the"", ""annotation"", ""beds"", ""parameters"", ""bt"", ""pybedtools"", ""bed"", ""tool"", ""bed"", ""tool"", ""for"", ""either"", ""one"", ""of"", ""the"", ""anchors"", ""the"", ""loops"", ""or"", ""the"", ""loop"", ""inners"", ""name"", ""str"", ""the"", ""key"", ""for"", ""the"", ""annoation"", ""bed"", ""file"", ""in"", ""annot"", ""beds"", ""col"", ""name"", ""str"", ""used"", ""to"", ""name"", ""the"", ""columns"", ""that"", ""will"", ""be"", ""made"", ""complete"", ""bool"", ""if"", ""true"", ""this"", ""method"", ""will"", ""check"", ""whether"", ""the"", ""features"", ""in"", ""the"", ""annotation"", ""bed"", ""are"", ""completely"", ""contained"", ""by"", ""the"", ""features"", ""in"", ""the"", ""input"", ""bed"", ""df"", ""col"", ""str"", ""if"", ""the"", ""name"", ""for"", ""bt"", ""isn"", ""str"", ""anchor"", ""11""]"
267,"Send an image to specified recipient using URL.
        Image must be PNG or JPEG or GIF (more might be supported).
        https://developers.facebook.com/docs/messenger-platform/send-api-reference/image-attachment
        Input:
            recipient_id: recipient id to send to
            image_url: url of image to be sent
        Output:
            Response from API as <dict>","[""send"", ""an"", ""image"", ""to"", ""specified"", ""recipient"", ""using"", ""url"", ""image"", ""must"", ""be"", ""png"", ""or"", ""jpeg"", ""or"", ""gif"", ""more"", ""might"", ""be"", ""supported"", ""https"", ""developers"", ""facebook"", ""com"", ""docs"", ""messenger"", ""platform"", ""send"", ""api"", ""reference"", ""image"", ""attachment"", ""input"", ""recipient"", ""id"", ""recipient"", ""id"", ""to"", ""send"", ""to"", ""image"", ""url"", ""url"", ""of"", ""image"", ""to"", ""be"", ""sent"", ""output"", ""response"", ""from"", ""api"", ""as"", ""dict""]"
268,Instantiates an instance of this InputReader for the given shard spec.,"[""instantiates"", ""an"", ""instance"", ""of"", ""this"", ""input"", ""reader"", ""for"", ""the"", ""given"", ""shard"", ""spec""]"
269,"Apply ``self.span_tokenize()`` to each element of ``strings``.  I.e.:
            return iter((self.span_tokenize(s) for s in strings))
        :rtype: iter(list(tuple(int, int)))","[""apply"", ""str"", ""self"", ""span"", ""tokenize"", ""str"", ""to"", ""each"", ""element"", ""of"", ""str"", ""strings"", ""str"", ""i"", ""e"", ""return"", ""iter"", ""self"", ""span"", ""tokenize"", ""s"", ""for"", ""s"", ""in"", ""strings"", ""rtype"", ""iter"", ""list"", ""tuple"", ""int"", ""int""]"
270,"Returns the end date of the set of intervals, or ``None`` if empty.","[""returns"", ""the"", ""end"", ""date"", ""of"", ""the"", ""set"", ""of"", ""intervals"", ""or"", ""str"", ""none"", ""str"", ""if"", ""empty""]"
271,"Make predictions using fitted size distribution models.
        Args:
            model_names: Name of the models for predictions
            input_columns: Data columns used for input into ML models
            output_columns: Names of output columns
            metadata_cols: Columns from input data that should be included in the data frame with the predictions.
            data_mode: Set of data used as input for prediction models
            location: Value of fixed location parameter
        Returns:
            Predictions in dictionary of data frames grouped by group type","[""make"", ""predictions"", ""using"", ""fitted"", ""size"", ""distribution"", ""models"", ""args"", ""model"", ""names"", ""name"", ""of"", ""the"", ""models"", ""for"", ""predictions"", ""input"", ""columns"", ""data"", ""columns"", ""used"", ""for"", ""input"", ""into"", ""ml"", ""models"", ""output"", ""columns"", ""names"", ""of"", ""output"", ""columns"", ""metadata"", ""cols"", ""columns"", ""from"", ""input"", ""data"", ""that"", ""should"", ""be"", ""included"", ""in"", ""the"", ""data"", ""frame"", ""with"", ""the"", ""predictions"", ""data"", ""mode"", ""set"", ""of"", ""data"", ""used"", ""as"", ""input"", ""for"", ""prediction"", ""models"", ""location"", ""value"", ""of"", ""fixed"", ""location"", ""parameter"", ""returns"", ""predictions"", ""in"", ""dictionary"", ""of"", ""data"", ""frames"", ""grouped"", ""by"", ""group"", ""type""]"
272,Load the configuration from specified files.,"[""load"", ""the"", ""configuration"", ""from"", ""specified"", ""files""]"
273,"Return True if deck spawn pays to p2th in vout[0] and if the P2TH address
    is correct. Otherwise raises InvalidDeckSpawn.","[""return"", ""true"", ""if"", ""deck"", ""spawn"", ""pays"", ""to"", ""p"", ""2"", ""th"", ""in"", ""vout"", ""num"", ""and"", ""if"", ""the"", ""p"", ""2"", ""th"", ""address"", ""is"", ""correct"", ""otherwise"", ""raises"", ""invalid"", ""deck"", ""spawn""]"
274,Update package(s) (in an environment) by name.,"[""update"", ""package"", ""s"", ""in"", ""an"", ""environment"", ""by"", ""name""]"
275,"Create a dict with all kwargs of the `copy_file` or `link_file` method of the super class and add it to
        the queue for later processing.","[""create"", ""a"", ""dict"", ""with"", ""all"", ""kwargs"", ""of"", ""the"", ""str"", ""or"", ""str"", ""method"", ""of"", ""the"", ""super"", ""class"", ""and"", ""add"", ""it"", ""to"", ""the"", ""queue"", ""for"", ""later"", ""processing""]"
276,"r""""""Map to cube

    This method transforms the input data from a 2D map with given layout to
    a 3D cube

    Parameters
    ----------
    data_map : np.ndarray
        Input data map, 2D array
    layout : tuple
        2D layout of 2D images

    Returns
    -------
    np.ndarray 3D cube

    Raises
    ------
    ValueError
        For invalid layout

    Examples
    --------
    >>> from modopt.base.transform import map2cube
    >>> a = np.array([[0, 1, 4, 5], [2, 3, 6, 7], [8, 9, 12, 13],
    [10, 11, 14, 15]])
    >>> map2cube(a, (2, 2))
    array([[[ 0,  1],
            [ 2,  3]],

           [[ 4,  5],
            [ 6,  7]],

           [[ 8,  9],
            [10, 11]],

           [[12, 13],
            [14, 15]]])","[""r"", ""str"", ""map"", ""to"", ""cube"", ""this"", ""method"", ""transforms"", ""the"", ""input"", ""data"", ""from"", ""a"", ""d"", ""map"", ""with"", ""given"", ""layout"", ""to"", ""a"", ""d"", ""cube"", ""parameters"", ""data"", ""map"", ""np"", ""ndarray"", ""input"", ""data"", ""map"", ""d"", ""array"", ""layout"", ""tuple"", ""d"", ""layout"", ""of"", ""d"", ""images"", ""returns"", ""np"", ""ndarray"", ""d"", ""cube"", ""raises"", ""value"", ""error"", ""for"", ""invalid"", ""layout"", ""examples"", ""from"", ""modopt"", ""base"", ""transform"", ""import"", ""map"", ""2"", ""cube"", ""a"", ""np"", ""array"", ""num"", ""num"", ""num"", ""num"", ""num"", ""num"", ""num"", ""num"", ""num"", ""num"", ""num"", ""num"", ""num"", ""num"", ""num"", ""num"", ""map"", ""2"", ""cube"", ""a"", ""num"", ""num"", ""array"", ""num"", ""num"", ""num"", ""num"", ""num"", ""num"", ""num"", ""num"", ""num"", ""num"", ""num"", ""num"", ""num"", ""num"", ""num"", ""num""]"
277,"Estimate supercell matrix from conventional cell

    Diagonal supercell matrix is estimated from basis vector lengths
    and maximum number of atoms to be accepted. Supercell is assumed
    to be made from the standardized cell and to be closest to sphere
    under keeping lattice symmetry. For triclinic, monoclinic, and
    orthorhombic cells, multiplicities for a, b, c are not constrained
    by symmetry. For tetragonal and hexagonal cells, multiplicities
    for a and b are chosen to be the same, and for cubic cell, those
    of a, b, c are the same.

    Parameters
    ----------
    spglib_dataset : tuple
        Spglib symmetry dataset
    max_num_atoms : int, optional
        Maximum number of atoms in created supercell to be tolerated.

    Returns
    -------
    list of three integer numbers
        Multiplicities for a, b, c basis vectors, respectively.","[""estimate"", ""supercell"", ""matrix"", ""from"", ""conventional"", ""cell"", ""diagonal"", ""supercell"", ""matrix"", ""is"", ""estimated"", ""from"", ""basis"", ""vector"", ""lengths"", ""and"", ""maximum"", ""number"", ""of"", ""atoms"", ""to"", ""be"", ""accepted"", ""supercell"", ""is"", ""assumed"", ""to"", ""be"", ""made"", ""from"", ""the"", ""standardized"", ""cell"", ""and"", ""to"", ""be"", ""closest"", ""to"", ""sphere"", ""under"", ""keeping"", ""lattice"", ""symmetry"", ""for"", ""triclinic"", ""monoclinic"", ""and"", ""orthorhombic"", ""cells"", ""multiplicities"", ""for"", ""a"", ""b"", ""c"", ""are"", ""not"", ""constrained"", ""by"", ""symmetry"", ""for"", ""tetragonal"", ""and"", ""hexagonal"", ""cells"", ""multiplicities"", ""for"", ""a"", ""and"", ""b"", ""are"", ""chosen"", ""to"", ""be"", ""the"", ""same"", ""and"", ""for"", ""cubic"", ""cell"", ""those"", ""of"", ""a"", ""b"", ""c"", ""are"", ""the"", ""same"", ""parameters"", ""spglib"", ""dataset"", ""tuple"", ""spglib"", ""symmetry"", ""dataset"", ""max"", ""num"", ""atoms"", ""int"", ""optional"", ""maximum"", ""number"", ""of"", ""atoms"", ""in"", ""created"", ""supercell"", ""to"", ""be"", ""tolerated"", ""returns"", ""list"", ""of"", ""three"", ""integer"", ""numbers"", ""multiplicities"", ""for"", ""a"", ""b"", ""c"", ""basis"", ""vectors"", ""respectively""]"
278,"Setup a mask where unmasked pixels are within an elliptical annulus of input inner and outer arc second \
        major-axis and centre.

        Parameters
        ----------
        shape: (int, int)
            The (y,x) shape of the mask in units of pixels.
        pixel_scale: float
            The arc-second to pixel conversion factor of each pixel.
        inner_major_axis_radius_arcsec : float
            The major-axis (in arc seconds) of the inner ellipse within which pixels are masked.
        inner_axis_ratio : float
            The axis-ratio of the inner ellipse within which pixels are masked.
        inner_phi : float
            The rotation angle of the inner ellipse within which pixels are masked, (counter-clockwise from the \
            positive x-axis).
        outer_major_axis_radius_arcsec : float
            The major-axis (in arc seconds) of the outer ellipse within which pixels are unmasked.
        outer_axis_ratio : float
            The axis-ratio of the outer ellipse within which pixels are unmasked.
        outer_phi : float
            The rotation angle of the outer ellipse within which pixels are unmasked, (counter-clockwise from the \
            positive x-axis).
        centre: (float, float)
            The centre of the elliptical annuli used to mask pixels.","[""setup"", ""a"", ""mask"", ""where"", ""unmasked"", ""pixels"", ""are"", ""within"", ""an"", ""elliptical"", ""annulus"", ""of"", ""input"", ""inner"", ""and"", ""outer"", ""arc"", ""second"", ""major"", ""axis"", ""and"", ""centre"", ""parameters"", ""shape"", ""int"", ""int"", ""the"", ""y"", ""x"", ""shape"", ""of"", ""the"", ""mask"", ""in"", ""units"", ""of"", ""pixels"", ""pixel"", ""scale"", ""float"", ""the"", ""arc"", ""second"", ""to"", ""pixel"", ""conversion"", ""factor"", ""of"", ""each"", ""pixel"", ""inner"", ""major"", ""axis"", ""radius"", ""arcsec"", ""float"", ""the"", ""major"", ""axis"", ""in"", ""arc"", ""seconds"", ""of"", ""the"", ""inner"", ""ellipse"", ""within"", ""which"", ""pixels"", ""are"", ""masked"", ""inner"", ""axis"", ""ratio"", ""float"", ""the"", ""axis"", ""ratio"", ""of"", ""the"", ""inner"", ""ellipse"", ""within"", ""which"", ""pixels"", ""are"", ""masked"", ""inner"", ""phi"", ""float"", ""the"", ""rotation"", ""angle"", ""of"", ""the"", ""inner"", ""ellipse"", ""within"", ""which"", ""pixels"", ""are"", ""masked"", ""counter"", ""clockwise"", ""from"", ""the"", ""positive"", ""x"", ""axis"", ""outer"", ""major"", ""axis"", ""radius"", ""arcsec"", ""float"", ""the"", ""major"", ""axis"", ""in"", ""arc"", ""seconds"", ""of"", ""the"", ""outer"", ""ellipse"", ""within"", ""which"", ""pixels"", ""are"", ""unmasked"", ""outer"", ""axis"", ""ratio"", ""float"", ""the"", ""axis"", ""ratio"", ""of"", ""the"", ""outer"", ""ellipse"", ""within"", ""which"", ""pixels"", ""are"", ""unmasked"", ""outer"", ""phi"", ""float"", ""the"", ""rotation"", ""angle"", ""of"", ""the"", ""outer"", ""ellipse"", ""within"", ""which"", ""pixels"", ""are"", ""unmasked"", ""counter"", ""clockwise"", ""from"", ""the"", ""positive"", ""x"", ""axis"", ""centre"", ""float"", ""float"", ""the"", ""centre"", ""of"", ""the"", ""elliptical"", ""annuli"", ""used"", ""to"", ""mask"", ""pixels""]"
279,"Acknowldge sucess or failure of a flexifunction command

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                directory_type            : 0=inputs, 1=outputs (uint8_t)
                start_index               : index of first directory entry to write (uint8_t)
                count                     : count of directory entries to write (uint8_t)
                directory_data            : Settings data (int8_t)","[""acknowldge"", ""sucess"", ""or"", ""failure"", ""of"", ""a"", ""flexifunction"", ""command"", ""target"", ""system"", ""system"", ""id"", ""uint"", ""8"", ""t"", ""target"", ""component"", ""component"", ""id"", ""uint"", ""8"", ""t"", ""directory"", ""type"", ""num"", ""inputs"", ""num"", ""outputs"", ""uint"", ""8"", ""t"", ""start"", ""index"", ""index"", ""of"", ""first"", ""directory"", ""entry"", ""to"", ""write"", ""uint"", ""8"", ""t"", ""count"", ""count"", ""of"", ""directory"", ""entries"", ""to"", ""write"", ""uint"", ""8"", ""t"", ""directory"", ""data"", ""settings"", ""data"", ""int"", ""8"", ""t""]"
280,Recursively get the tree below the given key,"[""recursively"", ""get"", ""the"", ""tree"", ""below"", ""the"", ""given"", ""key""]"
281,"Access the cumulative_statistics

        :returns: twilio.rest.taskrouter.v1.workspace.workflow.workflow_cumulative_statistics.WorkflowCumulativeStatisticsList
        :rtype: twilio.rest.taskrouter.v1.workspace.workflow.workflow_cumulative_statistics.WorkflowCumulativeStatisticsList","[""access"", ""the"", ""cumulative"", ""statistics"", ""returns"", ""twilio"", ""rest"", ""taskrouter"", ""v"", ""1"", ""workspace"", ""workflow"", ""workflow"", ""cumulative"", ""statistics"", ""workflow"", ""cumulative"", ""statistics"", ""list"", ""rtype"", ""twilio"", ""rest"", ""taskrouter"", ""v"", ""1"", ""workspace"", ""workflow"", ""workflow"", ""cumulative"", ""statistics"", ""workflow"", ""cumulative"", ""statistics"", ""list""]"
282,"Figure out solc binary and version.

        Only proper versions are supported. No nightlies, commits etc (such as available in remix).","[""figure"", ""out"", ""solc"", ""binary"", ""and"", ""version"", ""only"", ""proper"", ""versions"", ""are"", ""supported"", ""no"", ""nightlies"", ""commits"", ""etc"", ""such"", ""as"", ""available"", ""in"", ""remix""]"
283,Decorator for :class:`TVDBClient` methods that require authentication,"[""decorator"", ""for"", ""class"", ""str"", ""methods"", ""that"", ""require"", ""authentication""]"
284,"A function to find 2 engines per hostname on the ipyclient.
    We'll assume that the CPUs are hyperthreaded, which is why
    we grab two. If they are not then no foul. Two multi-threaded
    jobs will be run on each of the 2 engines per host.","[""a"", ""function"", ""to"", ""find"", ""num"", ""engines"", ""per"", ""hostname"", ""on"", ""the"", ""ipyclient"", ""we"", ""ll"", ""assume"", ""that"", ""the"", ""cp"", ""us"", ""are"", ""hyperthreaded"", ""which"", ""is"", ""why"", ""we"", ""grab"", ""two"", ""if"", ""they"", ""are"", ""not"", ""then"", ""no"", ""foul"", ""two"", ""multi"", ""threaded"", ""jobs"", ""will"", ""be"", ""run"", ""on"", ""each"", ""of"", ""the"", ""num"", ""engines"", ""per"", ""host""]"
285,Generate a Telegram URL for this bot.,"[""generate"", ""a"", ""telegram"", ""url"", ""for"", ""this"", ""bot""]"
286,"int crs; //.......................................................... RECOMMENDED - A container variable storing information about the grid_mapping. All the attributes within a grid_mapping variable are described in http://cf-pcmdi.llnl.gov/documents/cf-conventions/1.6/cf-conventions.html#appendix-grid-mappings. For all the measurements based on WSG84, the default coordinate system used for GPS measurements, the values shown here should be used.
                crs:grid_mapping_name = ""latitude_longitude""; //............. RECOMMENDED
                crs:epsg_code = ""EPSG:4326"" ; //............................. RECOMMENDED - European Petroleum Survey Group code for the grid mapping name.
                crs:semi_major_axis = 6378137.0 ; //......................... RECOMMENDED
                crs:inverse_flattening = 298.257223563 ; //.................. RECOMMENDED","[""int"", ""crs"", ""recommended"", ""a"", ""container"", ""variable"", ""storing"", ""information"", ""about"", ""the"", ""grid"", ""mapping"", ""all"", ""the"", ""attributes"", ""within"", ""a"", ""grid"", ""mapping"", ""variable"", ""are"", ""described"", ""in"", ""http"", ""cf"", ""pcmdi"", ""llnl"", ""gov"", ""documents"", ""cf"", ""conventions"", ""num"", ""cf"", ""conventions"", ""html"", ""appendix"", ""grid"", ""mappings"", ""for"", ""all"", ""the"", ""measurements"", ""based"", ""on"", ""wsg"", ""84"", ""the"", ""default"", ""coordinate"", ""system"", ""used"", ""for"", ""gps"", ""measurements"", ""the"", ""values"", ""shown"", ""here"", ""should"", ""be"", ""used"", ""crs"", ""grid"", ""mapping"", ""name"", ""str"", ""recommended"", ""crs"", ""epsg"", ""code"", ""str"", ""recommended"", ""european"", ""petroleum"", ""survey"", ""group"", ""code"", ""for"", ""the"", ""grid"", ""mapping"", ""name"", ""crs"", ""semi"", ""major"", ""axis"", ""num"", ""recommended"", ""crs"", ""inverse"", ""flattening"", ""num"", ""recommended""]"
287,/*      Calculate Temperature and Density Profiles for lower atmos.  */,"[""calculate"", ""temperature"", ""and"", ""density"", ""profiles"", ""for"", ""lower"", ""atmos""]"
288,Get a listing of all private rooms with their names and IDs,"[""get"", ""a"", ""listing"", ""of"", ""all"", ""private"", ""rooms"", ""with"", ""their"", ""names"", ""and"", ""i"", ""ds""]"
289,checks if a given package is installed on pip,"[""checks"", ""if"", ""a"", ""given"", ""package"", ""is"", ""installed"", ""on"", ""pip""]"
290,Geant 4.10.0 model for 2 GeV < Tp < 5 GeV,"[""geant"", ""num"", ""num"", ""model"", ""for"", ""num"", ""ge"", ""v"", ""tp"", ""num"", ""ge"", ""v""]"
291,"Resolves an ip adres to a range object, creating it if it doesn't exists.","[""resolves"", ""an"", ""ip"", ""adres"", ""to"", ""a"", ""range"", ""object"", ""creating"", ""it"", ""if"", ""it"", ""doesn"", ""t"", ""exists""]"
292,"GetBranch.
        Get a single branch hierarchy at the given path with parents or children as specified.
        :param str path: Full path to the branch.  Default: $/ Examples: $/, $/MyProject, $/MyProject/SomeFolder.
        :param str project: Project ID or project name
        :param bool include_parent: Return the parent branch, if there is one. Default: False
        :param bool include_children: Return child branches, if there are any. Default: False
        :rtype: :class:`<TfvcBranch> <azure.devops.v5_0.tfvc.models.TfvcBranch>`","[""get"", ""branch"", ""get"", ""a"", ""single"", ""branch"", ""hierarchy"", ""at"", ""the"", ""given"", ""path"", ""with"", ""parents"", ""or"", ""children"", ""as"", ""specified"", ""param"", ""str"", ""path"", ""full"", ""path"", ""to"", ""the"", ""branch"", ""default"", ""examples"", ""my"", ""project"", ""my"", ""project"", ""some"", ""folder"", ""param"", ""str"", ""project"", ""project"", ""id"", ""or"", ""project"", ""name"", ""param"", ""bool"", ""include"", ""parent"", ""return"", ""the"", ""parent"", ""branch"", ""if"", ""there"", ""is"", ""one"", ""default"", ""false"", ""param"", ""bool"", ""include"", ""children"", ""return"", ""child"", ""branches"", ""if"", ""there"", ""are"", ""any"", ""default"", ""false"", ""rtype"", ""class"", ""str""]"
293,"for doctests kwargs

    SeeAlso:
        ut.exec_func_src
        ut.argparse_funckw","[""for"", ""doctests"", ""kwargs"", ""see"", ""also"", ""ut"", ""exec"", ""func"", ""src"", ""ut"", ""argparse"", ""funckw""]"
294,"Clear DCNM out partition information.

        Clear the DCNM OUT partition service node IP address and update
        the result","[""clear"", ""dcnm"", ""out"", ""partition"", ""information"", ""clear"", ""the"", ""dcnm"", ""out"", ""partition"", ""service"", ""node"", ""ip"", ""address"", ""and"", ""update"", ""the"", ""result""]"
295,statement : RELATE instance_name TO instance_name ACROSS rel_id USING instance_name,"[""statement"", ""relate"", ""instance"", ""name"", ""to"", ""instance"", ""name"", ""across"", ""rel"", ""id"", ""using"", ""instance"", ""name""]"
296,Execute a quick search.,"[""execute"", ""a"", ""quick"", ""search""]"
297,"Query the Forest 2.0 server for a list of underlying QPU devices.

    NOTE: These can't directly be used to manufacture pyQuil Device objects, but this gives a list
          of legal values that can be supplied to list_lattices to filter its (potentially very
          noisy) output.

    :return: A list of device names.","[""query"", ""the"", ""forest"", ""num"", ""server"", ""for"", ""a"", ""list"", ""of"", ""underlying"", ""qpu"", ""devices"", ""note"", ""these"", ""can"", ""t"", ""directly"", ""be"", ""used"", ""to"", ""manufacture"", ""py"", ""quil"", ""device"", ""objects"", ""but"", ""this"", ""gives"", ""a"", ""list"", ""of"", ""legal"", ""values"", ""that"", ""can"", ""be"", ""supplied"", ""to"", ""list"", ""lattices"", ""to"", ""filter"", ""its"", ""potentially"", ""very"", ""noisy"", ""output"", ""return"", ""a"", ""list"", ""of"", ""device"", ""names""]"
298,"Parse input yaml file and substitute {tokens} from context.

    Loads yaml into memory to do parsing, so be aware of big files.

    Args:
        context: pypyr.context.Context. Mandatory.
        - fileFormatYaml
            - in. mandatory.
              str, path-like, or an iterable (list/tuple) of
              strings/paths. Each str/path can be a glob, relative or
              absolute path.
            - out. optional. path-like.
              Can refer to a file or a directory.
              will create directory structure if it doesn't exist. If
              in-path refers to >1 file (e.g it's a glob or list), out
              path can only be a directory - it doesn't make sense to
              write >1 file to the same single file (this is not an
              appender.) To ensure out_path is read as a directory and
              not a file, be sure to have the path separator (/) at the
              end.
              If out_path is not specified or None, will in-place edit
              and overwrite the in-files.

    Returns:
        None.

    Raises:
        FileNotFoundError: take a guess
        pypyr.errors.KeyNotInContextError: fileFormatYaml or
            fileFormatYaml['in'] missing in context.
        pypyr.errors.KeyInContextHasNoValueError: fileFormatYaml or
            fileFormatYaml['in'] exists but is None.","[""parse"", ""input"", ""yaml"", ""file"", ""and"", ""substitute"", ""tokens"", ""from"", ""context"", ""loads"", ""yaml"", ""into"", ""memory"", ""to"", ""do"", ""parsing"", ""so"", ""be"", ""aware"", ""of"", ""big"", ""files"", ""args"", ""context"", ""pypyr"", ""context"", ""context"", ""mandatory"", ""file"", ""format"", ""yaml"", ""in"", ""mandatory"", ""str"", ""path"", ""like"", ""or"", ""an"", ""iterable"", ""list"", ""tuple"", ""of"", ""strings"", ""paths"", ""each"", ""str"", ""path"", ""can"", ""be"", ""a"", ""glob"", ""relative"", ""or"", ""absolute"", ""path"", ""out"", ""optional"", ""path"", ""like"", ""can"", ""refer"", ""to"", ""a"", ""file"", ""or"", ""a"", ""directory"", ""will"", ""create"", ""directory"", ""structure"", ""if"", ""it"", ""doesn"", ""str"", ""s"", ""a"", ""glob"", ""or"", ""list"", ""out"", ""path"", ""can"", ""only"", ""be"", ""a"", ""directory"", ""it"", ""doesn"", ""str"", ""in"", ""str"", ""in"", ""exists"", ""but"", ""is"", ""none""]"
299,Commit deferred writes to file.,"[""commit"", ""deferred"", ""writes"", ""to"", ""file""]"
300,"Add a condor command to the submit file that allows variable (macro)
    arguments to be passes to the executable.","[""add"", ""a"", ""condor"", ""command"", ""to"", ""the"", ""submit"", ""file"", ""that"", ""allows"", ""variable"", ""macro"", ""arguments"", ""to"", ""be"", ""passes"", ""to"", ""the"", ""executable""]"
301,Removes XML elements from an ElementTree content tree,"[""removes"", ""xml"", ""elements"", ""from"", ""an"", ""element"", ""tree"", ""content"", ""tree""]"
302,"Search element and wait until it has stopped moving

        :param element: PageElement or element locator as a tuple (locator_type, locator_value) to be found
        :param times: number of iterations checking the element's location that must be the same for all of them
        in order to considering the element has stopped
        :returns: the web element if the element is stopped
        :rtype: selenium.webdriver.remote.webelement.WebElement or appium.webdriver.webelement.WebElement
        :raises TimeoutException: If the element does not stop after the timeout","[""search"", ""element"", ""and"", ""wait"", ""until"", ""it"", ""has"", ""stopped"", ""moving"", ""param"", ""element"", ""page"", ""element"", ""or"", ""element"", ""locator"", ""as"", ""a"", ""tuple"", ""locator"", ""type"", ""locator"", ""value"", ""to"", ""be"", ""found"", ""param"", ""times"", ""number"", ""of"", ""iterations"", ""checking"", ""the"", ""element"", ""s"", ""location"", ""that"", ""must"", ""be"", ""the"", ""same"", ""for"", ""all"", ""of"", ""them"", ""in"", ""order"", ""to"", ""considering"", ""the"", ""element"", ""has"", ""stopped"", ""returns"", ""the"", ""web"", ""element"", ""if"", ""the"", ""element"", ""is"", ""stopped"", ""rtype"", ""selenium"", ""webdriver"", ""remote"", ""webelement"", ""web"", ""element"", ""or"", ""appium"", ""webdriver"", ""webelement"", ""web"", ""element"", ""raises"", ""timeout"", ""exception"", ""if"", ""the"", ""element"", ""does"", ""not"", ""stop"", ""after"", ""the"", ""timeout""]"
303,"Returns a tuple (visible, reason) stating if the data should be visible.

    Args:
      path: A dot separated path that represents a package, class, method or
      variable.  The format is identical to pythons ""import"" statement.

    Returns:
      (visible, reason) where visible is a boolean that is True if the data
      should be visible.  Reason is a string reason that can be displayed
      to the user and indicates why data is visible or not visible.","[""returns"", ""a"", ""tuple"", ""visible"", ""reason"", ""stating"", ""if"", ""the"", ""data"", ""should"", ""be"", ""visible"", ""args"", ""path"", ""a"", ""dot"", ""separated"", ""path"", ""that"", ""represents"", ""a"", ""package"", ""class"", ""method"", ""or"", ""variable"", ""the"", ""format"", ""is"", ""identical"", ""to"", ""pythons"", ""str"", ""statement"", ""returns"", ""visible"", ""reason"", ""where"", ""visible"", ""is"", ""a"", ""boolean"", ""that"", ""is"", ""true"", ""if"", ""the"", ""data"", ""should"", ""be"", ""visible"", ""reason"", ""is"", ""a"", ""string"", ""reason"", ""that"", ""can"", ""be"", ""displayed"", ""to"", ""the"", ""user"", ""and"", ""indicates"", ""why"", ""data"", ""is"", ""visible"", ""or"", ""not"", ""visible""]"
304,Apply slices to the area_extent and size of the area.,"[""apply"", ""slices"", ""to"", ""the"", ""area"", ""extent"", ""and"", ""size"", ""of"", ""the"", ""area""]"
305,"Create OpenVZ containers.

    + ctid: CTID of the container to create","[""create"", ""open"", ""vz"", ""containers"", ""ctid"", ""ctid"", ""of"", ""the"", ""container"", ""to"", ""create""]"
306,"Constructs a TaskQueueContext

        :param sid: The sid

        :returns: twilio.rest.taskrouter.v1.workspace.task_queue.TaskQueueContext
        :rtype: twilio.rest.taskrouter.v1.workspace.task_queue.TaskQueueContext","[""constructs"", ""a"", ""task"", ""queue"", ""context"", ""param"", ""sid"", ""the"", ""sid"", ""returns"", ""twilio"", ""rest"", ""taskrouter"", ""v"", ""1"", ""workspace"", ""task"", ""queue"", ""task"", ""queue"", ""context"", ""rtype"", ""twilio"", ""rest"", ""taskrouter"", ""v"", ""1"", ""workspace"", ""task"", ""queue"", ""task"", ""queue"", ""context""]"
307,"This renders the form or, if needed, does the http redirects.","[""this"", ""renders"", ""the"", ""form"", ""or"", ""if"", ""needed"", ""does"", ""the"", ""http"", ""redirects""]"
308,"Allows to edit group permissions for the considered forum.

        The view displays a form to define which permissions are granted for the given group for the
        considered forum.","[""allows"", ""to"", ""edit"", ""group"", ""permissions"", ""for"", ""the"", ""considered"", ""forum"", ""the"", ""view"", ""displays"", ""a"", ""form"", ""to"", ""define"", ""which"", ""permissions"", ""are"", ""granted"", ""for"", ""the"", ""given"", ""group"", ""for"", ""the"", ""considered"", ""forum""]"
309,"Request validation email

        :return: result
        :rtype: :class:`.EResult`","[""request"", ""validation"", ""email"", ""return"", ""result"", ""rtype"", ""class"", ""str""]"
310,"Returns a pseudo-randomly generated Local Unique prefix. Function
    follows recommandation of Section 3.2.2 of RFC 4193 for prefix
    generation.","[""returns"", ""a"", ""pseudo"", ""randomly"", ""generated"", ""local"", ""unique"", ""prefix"", ""function"", ""follows"", ""recommandation"", ""of"", ""section"", ""num"", ""num"", ""of"", ""rfc"", ""num"", ""for"", ""prefix"", ""generation""]"
311,"Get the name of the file containing configuration overrides
    from the provided environment variable.","[""get"", ""the"", ""name"", ""of"", ""the"", ""file"", ""containing"", ""configuration"", ""overrides"", ""from"", ""the"", ""provided"", ""environment"", ""variable""]"
312,Parse categories.,"[""parse"", ""categories""]"
313,"Sphinx role for referencing a JIRA ticket with ticket numbers
    enclosed in parentheses. Useful for changelogs.

    Examples::

        :jirap:`DM-6181` -> (DM-6181)
        :jirap:`DM-6181,DM-6181` -> (DM-6180, DM-6181)
        :jirap:`DM-6181,DM-6181,DM-6182` -> (DM-6180, DM-6181, DM-6182)","[""sphinx"", ""role"", ""for"", ""referencing"", ""a"", ""jira"", ""ticket"", ""with"", ""ticket"", ""numbers"", ""enclosed"", ""in"", ""parentheses"", ""useful"", ""for"", ""changelogs"", ""examples"", ""jirap"", ""str"", ""dm"", ""num"", ""jirap"", ""str"", ""dm"", ""num"", ""dm"", ""num"", ""jirap"", ""str"", ""dm"", ""num"", ""dm"", ""num"", ""dm"", ""num""]"
314,"Return single model object instance matching given criteria
       :param path: tuple or dpath expression representing the hierarchy/chain of parent keys
       :param values: single value or list of values to match. If exact is False then .contains method is used as filter
       :param raise_absent: if True then raise exception if no match is found
       :return: matching object from cache if already created or new if not","[""return"", ""single"", ""model"", ""object"", ""instance"", ""matching"", ""given"", ""criteria"", ""param"", ""path"", ""tuple"", ""or"", ""dpath"", ""expression"", ""representing"", ""the"", ""hierarchy"", ""chain"", ""of"", ""parent"", ""keys"", ""param"", ""values"", ""single"", ""value"", ""or"", ""list"", ""of"", ""values"", ""to"", ""match"", ""if"", ""exact"", ""is"", ""false"", ""then"", ""contains"", ""method"", ""is"", ""used"", ""as"", ""filter"", ""param"", ""raise"", ""absent"", ""if"", ""true"", ""then"", ""raise"", ""exception"", ""if"", ""no"", ""match"", ""is"", ""found"", ""return"", ""matching"", ""object"", ""from"", ""cache"", ""if"", ""already"", ""created"", ""or"", ""new"", ""if"", ""not""]"
315,"Compute cross product between list of 3D vectors

    Much faster than np.cross() when the number of cross products
    becomes large (>500). This is because np.cross() methods become
    less memory efficient at this stage.

    Parameters
    ----------
    x : array
        Input array 1.
    y : array
        Input array 2.

    Returns
    -------
    z : array
        Cross product of x and y.

    Notes
    -----
    x and y must both be 2D row vectors. One must have length 1, or both
    lengths must match.","[""compute"", ""cross"", ""product"", ""between"", ""list"", ""of"", ""d"", ""vectors"", ""much"", ""faster"", ""than"", ""np"", ""cross"", ""when"", ""the"", ""number"", ""of"", ""cross"", ""products"", ""becomes"", ""large"", ""num"", ""this"", ""is"", ""because"", ""np"", ""cross"", ""methods"", ""become"", ""less"", ""memory"", ""efficient"", ""at"", ""this"", ""stage"", ""parameters"", ""x"", ""array"", ""input"", ""array"", ""num"", ""y"", ""array"", ""input"", ""array"", ""num"", ""returns"", ""z"", ""array"", ""cross"", ""product"", ""of"", ""x"", ""and"", ""y"", ""notes"", ""x"", ""and"", ""y"", ""must"", ""both"", ""be"", ""d"", ""row"", ""vectors"", ""one"", ""must"", ""have"", ""length"", ""num"", ""or"", ""both"", ""lengths"", ""must"", ""match""]"
316,":raises ValueError:
        :raises pytablereader.error.ValidationError:","[""raises"", ""value"", ""error"", ""raises"", ""pytablereader"", ""error"", ""validation"", ""error""]"
317,Generates a logger that outputs messages in the same format as default Flask applications.,"[""generates"", ""a"", ""logger"", ""that"", ""outputs"", ""messages"", ""in"", ""the"", ""same"", ""format"", ""as"", ""default"", ""flask"", ""applications""]"
318,Create CodeGovProject object from GitLab Repository,"[""create"", ""code"", ""gov"", ""project"", ""object"", ""from"", ""git"", ""lab"", ""repository""]"
319,"This gets a new API key from the specified LCC-Server.

    NOTE: this only gets an anonymous API key. To get an API key tied to a user
    account (and associated privilege level), see the `import_apikey` function
    below.

    Parameters
    ----------

    lcc_server : str
        The base URL of the LCC-Server from where the API key will be fetched.

    Returns
    -------

    (apikey, expiry) : tuple
        This returns a tuple with the API key and its expiry date.","[""this"", ""gets"", ""a"", ""new"", ""api"", ""key"", ""from"", ""the"", ""specified"", ""lcc"", ""server"", ""note"", ""this"", ""only"", ""gets"", ""an"", ""anonymous"", ""api"", ""key"", ""to"", ""get"", ""an"", ""api"", ""key"", ""tied"", ""to"", ""a"", ""user"", ""account"", ""and"", ""associated"", ""privilege"", ""level"", ""see"", ""the"", ""str"", ""function"", ""below"", ""parameters"", ""lcc"", ""server"", ""str"", ""the"", ""base"", ""url"", ""of"", ""the"", ""lcc"", ""server"", ""from"", ""where"", ""the"", ""api"", ""key"", ""will"", ""be"", ""fetched"", ""returns"", ""apikey"", ""expiry"", ""tuple"", ""this"", ""returns"", ""a"", ""tuple"", ""with"", ""the"", ""api"", ""key"", ""and"", ""its"", ""expiry"", ""date""]"
320,":py:func:`asyncio.coroutine`

        Complex method for getting command.

        :param stream: connection steram
        :type stream: :py:class:`asyncio.StreamIO`

        :return: (code, rest)
        :rtype: (:py:class:`str`, :py:class:`str`)","[""py"", ""func"", ""str"", ""complex"", ""method"", ""for"", ""getting"", ""command"", ""param"", ""stream"", ""connection"", ""steram"", ""type"", ""stream"", ""py"", ""class"", ""str"", ""return"", ""code"", ""rest"", ""rtype"", ""py"", ""class"", ""str"", ""py"", ""class"", ""str""]"
321,"Ð¡ÐµÑÐ¸Ð°Ð»Ð¸Ð·Ð°ÑÐ¸Ñ JSON ÑÐµÐ´ÐµÑÐ° rsb.

    @params -- Ð¿Ð°ÑÐ°Ð¼ÐµÑÑÑ Ð² ÑÐ¾ÑÐ¼Ð°ÑÐµ JSON (dfparser.def_values.DEF_RSH_PARAMS)
    @return -- Ð±Ð¸Ð½Ð°ÑÐ½ÑÐ¹ ÑÐµÐ´ÐµÑ (2048 bytes)","[""json"", ""rsb"", ""params"", ""json"", ""dfparser"", ""def"", ""values"", ""def"", ""rsh"", ""params"", ""return"", ""num"", ""bytes""]"
322,"Return sha, lazily compute if not done yet.","[""return"", ""sha"", ""lazily"", ""compute"", ""if"", ""not"", ""done"", ""yet""]"
323,"Add bouncer goodness to the model.  This is a class decorator, when added to your User model if will add
        ``can`` and ``cannot`` methods to the class
    :param original_class:  the User class to be decorated","[""add"", ""bouncer"", ""goodness"", ""to"", ""the"", ""model"", ""this"", ""is"", ""a"", ""class"", ""decorator"", ""when"", ""added"", ""to"", ""your"", ""user"", ""model"", ""if"", ""will"", ""add"", ""str"", ""can"", ""str"", ""and"", ""str"", ""cannot"", ""str"", ""methods"", ""to"", ""the"", ""class"", ""param"", ""original"", ""class"", ""the"", ""user"", ""class"", ""to"", ""be"", ""decorated""]"
324,Main function,"[""main"", ""function""]"
325,"Gets a ``ProficiencyList`` corresponding to the given ``IdList``.

        arg:    proficiency_ids (osid.id.IdList): the list of ``Ids`` to
                retrieve
        return: (osid.learning.ProficiencyList) - the returned
                ``Proficiency`` list
        raise:  NotFound - an ``Id`` was not found
        raise:  NullArgument - ``proficiency_ids`` is ``null``
        raise:  OperationFailed - unable to complete request
        raise:  PermissionDenied - authorization failure
        *compliance: mandatory -- This method must be implemented.*","[""gets"", ""a"", ""str"", ""proficiency"", ""list"", ""str"", ""corresponding"", ""to"", ""the"", ""given"", ""str"", ""id"", ""list"", ""str"", ""arg"", ""proficiency"", ""ids"", ""osid"", ""id"", ""id"", ""list"", ""the"", ""list"", ""of"", ""str"", ""ids"", ""str"", ""to"", ""retrieve"", ""return"", ""osid"", ""learning"", ""proficiency"", ""list"", ""the"", ""returned"", ""str"", ""proficiency"", ""str"", ""list"", ""raise"", ""not"", ""found"", ""an"", ""str"", ""id"", ""str"", ""was"", ""not"", ""found"", ""raise"", ""null"", ""argument"", ""str"", ""proficiency"", ""ids"", ""str"", ""is"", ""str"", ""null"", ""str"", ""raise"", ""operation"", ""failed"", ""unable"", ""to"", ""complete"", ""request"", ""raise"", ""permission"", ""denied"", ""authorization"", ""failure"", ""compliance"", ""mandatory"", ""this"", ""method"", ""must"", ""be"", ""implemented""]"
326,"Create Fourier term features

        When an ARIMA is fit with an exogenous array, it must be forecasted
        with one also. Since at ``predict`` time in a pipeline we won't have
        ``y`` (and we may not yet have an ``exog`` array), we have to know how
        far into the future for which to compute Fourier terms (hence
        ``n_periods``).

        This method will compute the Fourier features for a given frequency and
        ``k`` term. Note that the ``y`` values are not used to compute these,
        so this does not pose a risk of data leakage.

        Parameters
        ----------
        y : array-like or None, shape=(n_samples,)
            The endogenous (time-series) array. This is unused and technically
            optional for the Fourier terms, since it uses the pre-computed
            ``n`` to calculate the seasonal Fourier terms.

        exogenous : array-like or None, shape=(n_samples, n_features), optional
            The exogenous array of additional covariates. If specified, the
            Fourier terms will be column-bound on the right side of the matrix.
            Otherwise, the Fourier terms will be returned as the new exogenous
            array.

        n_periods : int, optional (default=0)
            The number of periods in the future to forecast. If ``n_periods``
            is 0, will compute the Fourier features for the training set.
            ``n_periods`` corresponds to the number of samples that will be
            returned.","[""create"", ""fourier"", ""term"", ""features"", ""when"", ""an"", ""arima"", ""is"", ""fit"", ""with"", ""an"", ""exogenous"", ""array"", ""it"", ""must"", ""be"", ""forecasted"", ""with"", ""one"", ""also"", ""since"", ""at"", ""str"", ""predict"", ""str"", ""time"", ""in"", ""a"", ""pipeline"", ""we"", ""won"", ""t"", ""have"", ""str"", ""y"", ""str"", ""and"", ""we"", ""may"", ""not"", ""yet"", ""have"", ""an"", ""str"", ""exog"", ""str"", ""array"", ""we"", ""have"", ""to"", ""know"", ""how"", ""far"", ""into"", ""the"", ""future"", ""for"", ""which"", ""to"", ""compute"", ""fourier"", ""terms"", ""hence"", ""str"", ""n"", ""periods"", ""str"", ""this"", ""method"", ""will"", ""compute"", ""the"", ""fourier"", ""features"", ""for"", ""a"", ""given"", ""frequency"", ""and"", ""str"", ""k"", ""str"", ""term"", ""note"", ""that"", ""the"", ""str"", ""y"", ""str"", ""values"", ""are"", ""not"", ""used"", ""to"", ""compute"", ""these"", ""so"", ""this"", ""does"", ""not"", ""pose"", ""a"", ""risk"", ""of"", ""data"", ""leakage"", ""parameters"", ""y"", ""array"", ""like"", ""or"", ""none"", ""shape"", ""n"", ""samples"", ""the"", ""endogenous"", ""time"", ""series"", ""array"", ""this"", ""is"", ""unused"", ""and"", ""technically"", ""optional"", ""for"", ""the"", ""fourier"", ""terms"", ""since"", ""it"", ""uses"", ""the"", ""pre"", ""computed"", ""str"", ""n"", ""str"", ""to"", ""calculate"", ""the"", ""seasonal"", ""fourier"", ""terms"", ""exogenous"", ""array"", ""like"", ""or"", ""none"", ""shape"", ""n"", ""samples"", ""n"", ""features"", ""optional"", ""the"", ""exogenous"", ""array"", ""of"", ""additional"", ""covariates"", ""if"", ""specified"", ""the"", ""fourier"", ""terms"", ""will"", ""be"", ""column"", ""bound"", ""on"", ""the"", ""right"", ""side"", ""of"", ""the"", ""matrix"", ""otherwise"", ""the"", ""fourier"", ""terms"", ""will"", ""be"", ""returned"", ""as"", ""the"", ""new"", ""exogenous"", ""array"", ""n"", ""periods"", ""int"", ""optional"", ""default"", ""num"", ""the"", ""number"", ""of"", ""periods"", ""in"", ""the"", ""future"", ""to"", ""forecast"", ""if"", ""str"", ""n"", ""periods"", ""str"", ""is"", ""num"", ""will"", ""compute"", ""the"", ""fourier"", ""features"", ""for"", ""the"", ""training"", ""set"", ""str"", ""n"", ""periods"", ""str"", ""corresponds"", ""to"", ""the"", ""number"", ""of"", ""samples"", ""that"", ""will"", ""be"", ""returned""]"
327,"Add an observer to this event.

        Args:
            callback: A function or coroutine callback to call when the event
                is fired.

        Raises:
            ValueError: If the callback has already been added.","[""add"", ""an"", ""observer"", ""to"", ""this"", ""event"", ""args"", ""callback"", ""a"", ""function"", ""or"", ""coroutine"", ""callback"", ""to"", ""call"", ""when"", ""the"", ""event"", ""is"", ""fired"", ""raises"", ""value"", ""error"", ""if"", ""the"", ""callback"", ""has"", ""already"", ""been"", ""added""]"
328,"Filter insignificant words for key noun phrase extraction.

        determiners, relative pronouns, reflexive pronouns
        In general, pronouns are not useful, as you need context to know what they refer to.
        Most of the pronouns, however, are filtered out by blob.noun_phrase method's
        np length (>1) filter

        :param list extracted_list: A list of noun phrases extracted from parser output.","[""filter"", ""insignificant"", ""words"", ""for"", ""key"", ""noun"", ""phrase"", ""extraction"", ""determiners"", ""relative"", ""pronouns"", ""reflexive"", ""pronouns"", ""in"", ""general"", ""pronouns"", ""are"", ""not"", ""useful"", ""as"", ""you"", ""need"", ""context"", ""to"", ""know"", ""what"", ""they"", ""refer"", ""to"", ""most"", ""of"", ""the"", ""pronouns"", ""however"", ""are"", ""filtered"", ""out"", ""by"", ""blob"", ""noun"", ""phrase"", ""method"", ""s"", ""np"", ""length"", ""num"", ""filter"", ""param"", ""list"", ""extracted"", ""list"", ""a"", ""list"", ""of"", ""noun"", ""phrases"", ""extracted"", ""from"", ""parser"", ""output""]"
329,"Set the agl handler where the media player should render its video output.
    @param p_mi: the Media Player.
    @param drawable: the agl handler.","[""set"", ""the"", ""agl"", ""handler"", ""where"", ""the"", ""media"", ""player"", ""should"", ""render"", ""its"", ""video"", ""output"", ""param"", ""p"", ""mi"", ""the"", ""media"", ""player"", ""param"", ""drawable"", ""the"", ""agl"", ""handler""]"
330,"Returns a Drive instance

        :param drive_id: the drive_id to be retrieved
        :return: Drive for the id
        :rtype: Drive","[""returns"", ""a"", ""drive"", ""instance"", ""param"", ""drive"", ""id"", ""the"", ""drive"", ""id"", ""to"", ""be"", ""retrieved"", ""return"", ""drive"", ""for"", ""the"", ""id"", ""rtype"", ""drive""]"
331,Plots the observed recurrence taking into account the completeness,"[""plots"", ""the"", ""observed"", ""recurrence"", ""taking"", ""into"", ""account"", ""the"", ""completeness""]"
332,"Return a list of matched results for a given project ID.

    :param project_id: PYBOSSA Project ID
    :type project_id: integer
    :param kwargs: PYBOSSA Results members
    :type info: dict
    :rtype: list
    :returns: A list of results that match the kwargs","[""return"", ""a"", ""list"", ""of"", ""matched"", ""results"", ""for"", ""a"", ""given"", ""project"", ""id"", ""param"", ""project"", ""id"", ""pybossa"", ""project"", ""id"", ""type"", ""project"", ""id"", ""integer"", ""param"", ""kwargs"", ""pybossa"", ""results"", ""members"", ""type"", ""info"", ""dict"", ""rtype"", ""list"", ""returns"", ""a"", ""list"", ""of"", ""results"", ""that"", ""match"", ""the"", ""kwargs""]"
333,"Create a python function that interprets that action of a BridgePoint class
    operation.","[""create"", ""a"", ""python"", ""function"", ""that"", ""interprets"", ""that"", ""action"", ""of"", ""a"", ""bridge"", ""point"", ""class"", ""operation""]"
334,"Creates an ASSETS_KEY collection in the GraphDefs in saved_model_proto.

  Adds an ASSETS_KEY collection to the GraphDefs in the SavedModel and returns
  a map from original asset filename to filename when exporting the SavedModel
  to `export_path`.

  This is roughly the inverse operation of `_merge_assets_key_collection`.

  Args:
    saved_model_proto: SavedModel proto to be modified.
    export_path: string with path where the saved_model_proto will be exported.

  Returns:
    A map from original asset filename to asset filename when exporting the
    SavedModel to path.

  Raises:
    ValueError: on unsuported/unexpected SavedModel.","[""creates"", ""an"", ""assets"", ""key"", ""collection"", ""in"", ""the"", ""graph"", ""defs"", ""in"", ""saved"", ""model"", ""proto"", ""adds"", ""an"", ""assets"", ""key"", ""collection"", ""to"", ""the"", ""graph"", ""defs"", ""in"", ""the"", ""saved"", ""model"", ""and"", ""returns"", ""a"", ""map"", ""from"", ""original"", ""asset"", ""filename"", ""to"", ""filename"", ""when"", ""exporting"", ""the"", ""saved"", ""model"", ""to"", ""str"", ""this"", ""is"", ""roughly"", ""the"", ""inverse"", ""operation"", ""of"", ""str"", ""args"", ""saved"", ""model"", ""proto"", ""saved"", ""model"", ""proto"", ""to"", ""be"", ""modified"", ""export"", ""path"", ""string"", ""with"", ""path"", ""where"", ""the"", ""saved"", ""model"", ""proto"", ""will"", ""be"", ""exported"", ""returns"", ""a"", ""map"", ""from"", ""original"", ""asset"", ""filename"", ""to"", ""asset"", ""filename"", ""when"", ""exporting"", ""the"", ""saved"", ""model"", ""to"", ""path"", ""raises"", ""value"", ""error"", ""on"", ""unsuported"", ""unexpected"", ""saved"", ""model""]"
335,"Set Cache-Control headers for no caching

    Will generate proxy-revalidate, no-cache, no-store, must-revalidate,
    max-age=0.","[""set"", ""cache"", ""control"", ""headers"", ""for"", ""no"", ""caching"", ""will"", ""generate"", ""proxy"", ""revalidate"", ""no"", ""cache"", ""no"", ""store"", ""must"", ""revalidate"", ""max"", ""age"", ""num""]"
336,"Add a subtype segment

        Args:
            subtype (str): May be one of ``['a', 'c', 'r']``. See the
                `Reference Definition <https://elections.democracyclub.org.uk/reference_definition>`_.
                for valid election type/subtype combinations.

        Returns:
            IdBuilder

        Raises:
            ValueError","[""add"", ""a"", ""subtype"", ""segment"", ""args"", ""subtype"", ""str"", ""may"", ""be"", ""one"", ""of"", ""str"", ""str"", ""str"", ""str"", ""str"", ""see"", ""the"", ""str"", ""for"", ""valid"", ""election"", ""type"", ""subtype"", ""combinations"", ""returns"", ""id"", ""builder"", ""raises"", ""value"", ""error""]"
337,"Check route validity according to technical constraints (voltage and current rating)
        
        It considers constraints as
        
        * current rating of cable/line
        * voltage stability at all nodes

        Notes
        -----
            The validation is done for every tested MV grid configuration during CVRP algorithm. The current rating is
            checked using load factors from [#]_. Due to the high amount of steps the voltage rating cannot be checked
            using load flow calculation. Therefore we use a simple method which determines the voltage change between
            two consecutive nodes according to [#]_.
            Furthermore it is checked if new route has got more nodes than allowed (typ. 2*10 according to [#]_).

        References
        ----------
            
        .. [#] Deutsche Energie-Agentur GmbH (dena), ""dena-Verteilnetzstudie. Ausbau- und Innovationsbedarf der
            Stromverteilnetze in Deutschland bis 2030."", 2012
        .. [#] M. Sakulin, W. Hipp, ""Netzaspekte von dezentralen Erzeugungseinheiten,
            Studie im Auftrag der E-Control GmbH"", TU Graz, 2004
        .. [#] Klaus Heuck et al., ""Elektrische Energieversorgung"", Vieweg+Teubner, Wiesbaden, 2007
        .. [#] FGH e.V.: ""Technischer Bericht 302: Ein Werkzeug zur Optimierung der StÃ¶rungsbeseitigung
            fÃ¼r Planung und Betrieb von Mittelspannungsnetzen"", Tech. rep., 2008","[""check"", ""route"", ""validity"", ""according"", ""to"", ""technical"", ""constraints"", ""voltage"", ""and"", ""current"", ""rating"", ""it"", ""considers"", ""constraints"", ""as"", ""current"", ""rating"", ""of"", ""cable"", ""line"", ""voltage"", ""stability"", ""at"", ""all"", ""nodes"", ""notes"", ""the"", ""validation"", ""is"", ""done"", ""for"", ""every"", ""tested"", ""mv"", ""grid"", ""configuration"", ""during"", ""cvrp"", ""algorithm"", ""the"", ""current"", ""rating"", ""is"", ""checked"", ""using"", ""load"", ""factors"", ""from"", ""due"", ""to"", ""the"", ""high"", ""amount"", ""of"", ""steps"", ""the"", ""voltage"", ""rating"", ""cannot"", ""be"", ""checked"", ""using"", ""load"", ""flow"", ""calculation"", ""therefore"", ""we"", ""use"", ""a"", ""simple"", ""method"", ""which"", ""determines"", ""the"", ""voltage"", ""change"", ""between"", ""two"", ""consecutive"", ""nodes"", ""according"", ""to"", ""furthermore"", ""it"", ""is"", ""checked"", ""if"", ""new"", ""route"", ""has"", ""got"", ""more"", ""nodes"", ""than"", ""allowed"", ""typ"", ""num"", ""num"", ""according"", ""to"", ""references"", ""deutsche"", ""energie"", ""agentur"", ""gmb"", ""h"", ""dena"", ""str"", ""num"", ""m"", ""sakulin"", ""w"", ""hipp"", ""str"", ""tu"", ""graz"", ""num"", ""klaus"", ""heuck"", ""et"", ""al"", ""str"", ""vieweg"", ""teubner"", ""wiesbaden"", ""num"", ""fgh"", ""e"", ""v"", ""str"", ""tech"", ""rep"", ""num""]"
338,"Wraps a function that has a connection passed such that everything that
    happens on the connection is logged using the given logger.

    :type  logger: Logger
    :param logger: The logger that handles the logging.","[""wraps"", ""a"", ""function"", ""that"", ""has"", ""a"", ""connection"", ""passed"", ""such"", ""that"", ""everything"", ""that"", ""happens"", ""on"", ""the"", ""connection"", ""is"", ""logged"", ""using"", ""the"", ""given"", ""logger"", ""type"", ""logger"", ""logger"", ""param"", ""logger"", ""the"", ""logger"", ""that"", ""handles"", ""the"", ""logging""]"
339,"Fit two molecules.

        Args:
            mol1: First molecule. OpenBabel OBMol or pymatgen Molecule object
            mol2: Second molecule. OpenBabel OBMol or pymatgen Molecule object

        Returns:
            A boolean value indicates whether two molecules are the same.","[""fit"", ""two"", ""molecules"", ""args"", ""mol"", ""1"", ""first"", ""molecule"", ""open"", ""babel"", ""ob"", ""mol"", ""or"", ""pymatgen"", ""molecule"", ""object"", ""mol"", ""2"", ""second"", ""molecule"", ""open"", ""babel"", ""ob"", ""mol"", ""or"", ""pymatgen"", ""molecule"", ""object"", ""returns"", ""a"", ""boolean"", ""value"", ""indicates"", ""whether"", ""two"", ""molecules"", ""are"", ""the"", ""same""]"
340,"Cleans and returns the given value, or raises a ParameterNotValidError exception","[""cleans"", ""and"", ""returns"", ""the"", ""given"", ""value"", ""or"", ""raises"", ""a"", ""parameter"", ""not"", ""valid"", ""error"", ""exception""]"
341,Get the results Range from the AR,"[""get"", ""the"", ""results"", ""range"", ""from"", ""the"", ""ar""]"
342,"Print out the current version, and at least try to fetch the latest from
    PyPi to print alongside it.

    It may seem odd that this isn't in globus_cli.version , but it's done this
    way to separate concerns over printing the version from looking it up.","[""print"", ""out"", ""the"", ""current"", ""version"", ""and"", ""at"", ""least"", ""try"", ""to"", ""fetch"", ""the"", ""latest"", ""from"", ""py"", ""pi"", ""to"", ""print"", ""alongside"", ""it"", ""it"", ""may"", ""seem"", ""odd"", ""that"", ""this"", ""isn"", ""str"", ""s"", ""done"", ""this"", ""way"", ""to"", ""separate"", ""concerns"", ""over"", ""printing"", ""the"", ""version"", ""from"", ""looking"", ""it"", ""up""]"
343,"Return a binary mask containing only points that are regional maxima
    
    image     - image to be transformed
    mask      - mask of relevant pixels
    structure - binary structure giving the neighborhood and connectivity
                in which to search for maxima. Default is 8-connected.
    ties_are_ok - if this is true, then adjacent points of the same magnitude
                  are rated as maxima. 
    
    Find locations for which all neighbors as defined by the structure have
    lower values. The algorithm selects only one of a set of adjacent locations
    with identical values, first using a distance transform to find the
    innermost location, then, among equals, selected randomly.
    
    A location cannot be a local maximum if it is touching the edge or a
    masked pixel.","[""return"", ""a"", ""binary"", ""mask"", ""containing"", ""only"", ""points"", ""that"", ""are"", ""regional"", ""maxima"", ""image"", ""image"", ""to"", ""be"", ""transformed"", ""mask"", ""mask"", ""of"", ""relevant"", ""pixels"", ""structure"", ""binary"", ""structure"", ""giving"", ""the"", ""neighborhood"", ""and"", ""connectivity"", ""in"", ""which"", ""to"", ""search"", ""for"", ""maxima"", ""default"", ""is"", ""num"", ""connected"", ""ties"", ""are"", ""ok"", ""if"", ""this"", ""is"", ""true"", ""then"", ""adjacent"", ""points"", ""of"", ""the"", ""same"", ""magnitude"", ""are"", ""rated"", ""as"", ""maxima"", ""find"", ""locations"", ""for"", ""which"", ""all"", ""neighbors"", ""as"", ""defined"", ""by"", ""the"", ""structure"", ""have"", ""lower"", ""values"", ""the"", ""algorithm"", ""selects"", ""only"", ""one"", ""of"", ""a"", ""set"", ""of"", ""adjacent"", ""locations"", ""with"", ""identical"", ""values"", ""first"", ""using"", ""a"", ""distance"", ""transform"", ""to"", ""find"", ""the"", ""innermost"", ""location"", ""then"", ""among"", ""equals"", ""selected"", ""randomly"", ""a"", ""location"", ""cannot"", ""be"", ""a"", ""local"", ""maximum"", ""if"", ""it"", ""is"", ""touching"", ""the"", ""edge"", ""or"", ""a"", ""masked"", ""pixel""]"
344,"Reimplements the :meth:`QTabWidget.dropEvent` method.

        :param event: QEvent.
        :type event: QEvent","[""reimplements"", ""the"", ""meth"", ""str"", ""method"", ""param"", ""event"", ""q"", ""event"", ""type"", ""event"", ""q"", ""event""]"
345,Add a Rule to a PySB model and handle duplicate component errors.,"[""add"", ""a"", ""rule"", ""to"", ""a"", ""py"", ""sb"", ""model"", ""and"", ""handle"", ""duplicate"", ""component"", ""errors""]"
346,"Splits a large CSS file into several smaller files, each one
    containing less than the IE 4096 selector limit.","[""splits"", ""a"", ""large"", ""css"", ""file"", ""into"", ""several"", ""smaller"", ""files"", ""each"", ""one"", ""containing"", ""less"", ""than"", ""the"", ""ie"", ""num"", ""selector"", ""limit""]"
347,"Add common constrain for every token type, like ""is_required""
        Args:
            token_lst: List[Dict]
            d: Dict

        Returns: List[Dict]","[""add"", ""common"", ""constrain"", ""for"", ""every"", ""token"", ""type"", ""like"", ""str"", ""args"", ""token"", ""lst"", ""list"", ""dict"", ""d"", ""dict"", ""returns"", ""list"", ""dict""]"
348,"An internal method to fetch a single file from the ISO and write it out
        to the file object.

        Parameters:
         outfp - The file object to write data to.
         blocksize - The number of bytes in each transfer.
         iso_path - The absolute ISO9660 path to lookup on the ISO (exclusive
                    with rr_path and joliet_path).
         rr_path - The absolute Rock Ridge path to lookup on the ISO (exclusive
                   with iso_path and joliet_path).
         joliet_path - The absolute Joliet path to lookup on the ISO (exclusive
                       with iso_path and rr_path).
        Returns:
         Nothing.","[""an"", ""internal"", ""method"", ""to"", ""fetch"", ""a"", ""single"", ""file"", ""from"", ""the"", ""iso"", ""and"", ""write"", ""it"", ""out"", ""to"", ""the"", ""file"", ""object"", ""parameters"", ""outfp"", ""the"", ""file"", ""object"", ""to"", ""write"", ""data"", ""to"", ""blocksize"", ""the"", ""number"", ""of"", ""bytes"", ""in"", ""each"", ""transfer"", ""iso"", ""path"", ""the"", ""absolute"", ""iso"", ""9660"", ""path"", ""to"", ""lookup"", ""on"", ""the"", ""iso"", ""exclusive"", ""with"", ""rr"", ""path"", ""and"", ""joliet"", ""path"", ""rr"", ""path"", ""the"", ""absolute"", ""rock"", ""ridge"", ""path"", ""to"", ""lookup"", ""on"", ""the"", ""iso"", ""exclusive"", ""with"", ""iso"", ""path"", ""and"", ""joliet"", ""path"", ""joliet"", ""path"", ""the"", ""absolute"", ""joliet"", ""path"", ""to"", ""lookup"", ""on"", ""the"", ""iso"", ""exclusive"", ""with"", ""iso"", ""path"", ""and"", ""rr"", ""path"", ""returns"", ""nothing""]"
349,"Request URL, scrape response and return an EntityList.","[""request"", ""url"", ""scrape"", ""response"", ""and"", ""return"", ""an"", ""entity"", ""list""]"
350,"Collect fields.

        Given a selection_set, adds all of the fields in that selection to the passed in
        map of fields, and returns it at the end.

        collect_fields requires the ""runtime type"" of an object. For a field which
        returns an Interface or Union type, the ""runtime type"" will be the actual
        Object type returned by that field.","[""collect"", ""fields"", ""given"", ""a"", ""selection"", ""set"", ""adds"", ""all"", ""of"", ""the"", ""fields"", ""in"", ""that"", ""selection"", ""to"", ""the"", ""passed"", ""in"", ""map"", ""of"", ""fields"", ""and"", ""returns"", ""it"", ""at"", ""the"", ""end"", ""collect"", ""fields"", ""requires"", ""the"", ""str"", ""of"", ""an"", ""object"", ""for"", ""a"", ""field"", ""which"", ""returns"", ""an"", ""interface"", ""or"", ""union"", ""type"", ""the"", ""str"", ""will"", ""be"", ""the"", ""actual"", ""object"", ""type"", ""returned"", ""by"", ""that"", ""field""]"
351,"Given a deserialized witness script stack (i.e. the input-specific witness, as an array of
    Nones, ints, and strings), turn it back into a hex-encoded script","[""given"", ""a"", ""deserialized"", ""witness"", ""script"", ""stack"", ""i"", ""e"", ""the"", ""input"", ""specific"", ""witness"", ""as"", ""an"", ""array"", ""of"", ""nones"", ""ints"", ""and"", ""strings"", ""turn"", ""it"", ""back"", ""into"", ""a"", ""hex"", ""encoded"", ""script""]"
352,"Creates edge document.

            :param from_doc Document from which the edge comes
            :param to_doc Document to which the edge goes
            :param edge_data Extra data for the edge

            :returns Document","[""creates"", ""edge"", ""document"", ""param"", ""from"", ""doc"", ""document"", ""from"", ""which"", ""the"", ""edge"", ""comes"", ""param"", ""to"", ""doc"", ""document"", ""to"", ""which"", ""the"", ""edge"", ""goes"", ""param"", ""edge"", ""data"", ""extra"", ""data"", ""for"", ""the"", ""edge"", ""returns"", ""document""]"
353,"dot-text = 1*atext *(""."" 1*atext)","[""dot"", ""text"", ""num"", ""atext"", ""str"", ""num"", ""atext""]"
354,"Return a list of given length from a scalar parameter.

    The typical use case is when a single value or a sequence of
    values is accepted as input. This function makes a list from
    a given sequence or a list of identical elements from a single
    value, with cast to a given parameter type if desired.

    To distinguish a parameter sequence from a single parameter, the
    following rules are applied:

    * If ``param`` is not a sequence, it is treated as a single
      parameter (e.g. ``1``).
    * If ``len(param) == length == 1``, then ``param`` is interpreted
      as a single parameter (e.g. ``[1]`` or ``'1'``).
    * If ``len(param) == length != 1``, then ``param`` is interpreted as
      sequence of parameters.
    * Otherwise, ``param`` is interpreted as a single parameter.

    Note that this function is not applicable to parameters which are
    themselves iterable (e.g. ``'abc'`` with ``length=3`` will be
    interpreted as equivalent to ``['a', 'b', 'c']``).

    Parameters
    ----------
    param :
        Input parameter to turn into a list.
    length : nonnegative int
        Desired length of the output list.
    param_conv : callable, optional
        Conversion applied to each list element. ``None`` means no conversion.
    keep_none : bool, optional
        If ``True``, ``None`` is not converted.
    return_nonconv : bool, optional
        If ``True``, return also the list where no conversion has been
        applied.

    Returns
    -------
    plist : list
        Input parameter turned into a list of length ``length``.
    nonconv : list
        The same as ``plist``, but without conversion. This is only
        returned if ``return_nonconv == True``.

    Examples
    --------
    Turn input into a list of given length, possibly by broadcasting.
    By default, no conversion is performed.

    >>> normalized_scalar_param_list((1, 2, 3), 3)
    [1, 2, 3]
    >>> normalized_scalar_param_list((1, None, 3.0), 3)
    [1, None, 3.0]

    Single parameters are broadcast to the given length.

    >>> normalized_scalar_param_list(1, 3)
    [1, 1, 1]
    >>> normalized_scalar_param_list('10', 3)
    ['10', '10', '10']
    >>> normalized_scalar_param_list(None, 3)
    [None, None, None]

    List entries can be explicitly converted using ``param_conv``. If
    ``None`` should be kept, set ``keep_none`` to ``True``:

    >>> normalized_scalar_param_list(1, 3, param_conv=float)
    [1.0, 1.0, 1.0]
    >>> normalized_scalar_param_list('10', 3, param_conv=int)
    [10, 10, 10]
    >>> normalized_scalar_param_list((1, None, 3.0), 3, param_conv=int,
    ...                              keep_none=True)  # default
    [1, None, 3]

    The conversion parameter can be any callable:

    >>> def myconv(x):
    ...     return False if x is None else bool(x)
    >>> normalized_scalar_param_list((0, None, 3.0), 3, param_conv=myconv,
    ...                              keep_none=False)
    [False, False, True]","[""return"", ""a"", ""list"", ""of"", ""given"", ""length"", ""from"", ""a"", ""scalar"", ""parameter"", ""the"", ""typical"", ""use"", ""case"", ""is"", ""when"", ""a"", ""single"", ""value"", ""or"", ""a"", ""sequence"", ""of"", ""values"", ""is"", ""accepted"", ""as"", ""input"", ""this"", ""function"", ""makes"", ""a"", ""list"", ""from"", ""a"", ""given"", ""sequence"", ""or"", ""a"", ""list"", ""of"", ""identical"", ""elements"", ""from"", ""a"", ""single"", ""value"", ""with"", ""cast"", ""to"", ""a"", ""given"", ""parameter"", ""type"", ""if"", ""desired"", ""to"", ""distinguish"", ""a"", ""parameter"", ""sequence"", ""from"", ""a"", ""single"", ""parameter"", ""the"", ""following"", ""rules"", ""are"", ""applied"", ""if"", ""str"", ""param"", ""str"", ""is"", ""not"", ""a"", ""sequence"", ""it"", ""is"", ""treated"", ""as"", ""a"", ""single"", ""parameter"", ""e"", ""g"", ""str"", ""num"", ""str"", ""if"", ""str"", ""len"", ""param"", ""length"", ""num"", ""str"", ""then"", ""str"", ""param"", ""str"", ""is"", ""interpreted"", ""as"", ""a"", ""single"", ""parameter"", ""e"", ""g"", ""str"", ""num"", ""str"", ""or"", ""str"", ""str"", ""str"", ""if"", ""str"", ""len"", ""param"", ""length"", ""num"", ""str"", ""then"", ""str"", ""param"", ""str"", ""is"", ""interpreted"", ""as"", ""sequence"", ""of"", ""parameters"", ""otherwise"", ""str"", ""param"", ""str"", ""is"", ""interpreted"", ""as"", ""a"", ""single"", ""parameter"", ""note"", ""that"", ""this"", ""function"", ""is"", ""not"", ""applicable"", ""to"", ""parameters"", ""which"", ""are"", ""themselves"", ""iterable"", ""e"", ""g"", ""str"", ""str"", ""str"", ""with"", ""str"", ""length"", ""num"", ""str"", ""will"", ""be"", ""interpreted"", ""as"", ""equivalent"", ""to"", ""str"", ""str"", ""str"", ""str"", ""str"", ""parameters"", ""param"", ""input"", ""parameter"", ""to"", ""turn"", ""into"", ""a"", ""list"", ""length"", ""nonnegative"", ""int"", ""desired"", ""length"", ""of"", ""the"", ""output"", ""list"", ""param"", ""conv"", ""callable"", ""optional"", ""conversion"", ""applied"", ""to"", ""each"", ""list"", ""element"", ""str"", ""none"", ""str"", ""means"", ""no"", ""conversion"", ""keep"", ""none"", ""bool"", ""optional"", ""if"", ""str"", ""true"", ""str"", ""str"", ""none"", ""str"", ""is"", ""not"", ""converted"", ""return"", ""nonconv"", ""bool"", ""optional"", ""if"", ""str"", ""true"", ""str"", ""return"", ""also"", ""the"", ""list"", ""where"", ""no"", ""conversion"", ""has"", ""been"", ""applied"", ""returns"", ""plist"", ""list"", ""input"", ""parameter"", ""turned"", ""into"", ""a"", ""list"", ""of"", ""length"", ""str"", ""length"", ""str"", ""nonconv"", ""list"", ""the"", ""same"", ""as"", ""str"", ""plist"", ""str"", ""but"", ""without"", ""conversion"", ""this"", ""is"", ""only"", ""returned"", ""if"", ""str"", ""return"", ""nonconv"", ""true"", ""str"", ""examples"", ""turn"", ""input"", ""into"", ""a"", ""list"", ""of"", ""given"", ""length"", ""possibly"", ""by"", ""broadcasting"", ""by"", ""default"", ""no"", ""conversion"", ""is"", ""performed"", ""normalized"", ""scalar"", ""param"", ""list"", ""num"", ""num"", ""num"", ""num"", ""num"", ""num"", ""num"", ""normalized"", ""scalar"", ""param"", ""list"", ""num"", ""none"", ""num"", ""num"", ""num"", ""none"", ""num"", ""single"", ""parameters"", ""are"", ""broadcast"", ""to"", ""the"", ""given"", ""length"", ""normalized"", ""scalar"", ""param"", ""list"", ""num"", ""num"", ""num"", ""num"", ""num"", ""normalized"", ""scalar"", ""param"", ""list"", ""str"", ""num"", ""str"", ""str"", ""str"", ""normalized"", ""scalar"", ""param"", ""list"", ""none"", ""num"", ""none"", ""none"", ""none"", ""list"", ""entries"", ""can"", ""be"", ""explicitly"", ""converted"", ""using"", ""str"", ""param"", ""conv"", ""str"", ""if"", ""str"", ""none"", ""str"", ""should"", ""be"", ""kept"", ""set"", ""str"", ""keep"", ""none"", ""str"", ""to"", ""str"", ""true"", ""str"", ""normalized"", ""scalar"", ""param"", ""list"", ""num"", ""num"", ""param"", ""conv"", ""float"", ""num"", ""num"", ""num"", ""normalized"", ""scalar"", ""param"", ""list"", ""str"", ""num"", ""param"", ""conv"", ""int"", ""num"", ""num"", ""num"", ""normalized"", ""scalar"", ""param"", ""list"", ""num"", ""none"", ""num"", ""num"", ""param"", ""conv"", ""int"", ""keep"", ""none"", ""true"", ""default"", ""num"", ""none"", ""num"", ""the"", ""conversion"", ""parameter"", ""can"", ""be"", ""any"", ""callable"", ""def"", ""myconv"", ""x"", ""return"", ""false"", ""if"", ""x"", ""is"", ""none"", ""else"", ""bool"", ""x"", ""normalized"", ""scalar"", ""param"", ""list"", ""num"", ""none"", ""num"", ""num"", ""param"", ""conv"", ""myconv"", ""keep"", ""none"", ""false"", ""false"", ""false"", ""true""]"
355,"Setter method for mpls_adjust_bandwidth_lsp, mapped from YANG variable /brocade_mpls_rpc/mpls_adjust_bandwidth_lsp (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_adjust_bandwidth_lsp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_adjust_bandwidth_lsp() directly.","[""setter"", ""method"", ""for"", ""mpls"", ""adjust"", ""bandwidth"", ""lsp"", ""mapped"", ""from"", ""yang"", ""variable"", ""brocade"", ""mpls"", ""rpc"", ""mpls"", ""adjust"", ""bandwidth"", ""lsp"", ""rpc"", ""if"", ""this"", ""variable"", ""is"", ""read"", ""only"", ""config"", ""false"", ""in"", ""the"", ""source"", ""yang"", ""file"", ""then"", ""set"", ""mpls"", ""adjust"", ""bandwidth"", ""lsp"", ""is"", ""considered"", ""as"", ""a"", ""private"", ""method"", ""backends"", ""looking"", ""to"", ""populate"", ""this"", ""variable"", ""should"", ""do"", ""so"", ""via"", ""calling"", ""this"", ""obj"", ""set"", ""mpls"", ""adjust"", ""bandwidth"", ""lsp"", ""directly""]"
356,">>> len(list(watching(True, 1, 0)))
    1
    >>> len(list(watching(True, 1, 1)))
    2
    >>> len(list(watching(True, None, 0)))
    1","[""len"", ""list"", ""watching"", ""true"", ""num"", ""num"", ""num"", ""len"", ""list"", ""watching"", ""true"", ""num"", ""num"", ""num"", ""len"", ""list"", ""watching"", ""true"", ""none"", ""num"", ""num""]"
357,"Flip the shape in the x direction, in-place.

        Parameters
        ----------
        center : array-like, optional
            Point about which to flip.
            If not passed, the center of the shape will be used.","[""flip"", ""the"", ""shape"", ""in"", ""the"", ""x"", ""direction"", ""in"", ""place"", ""parameters"", ""center"", ""array"", ""like"", ""optional"", ""point"", ""about"", ""which"", ""to"", ""flip"", ""if"", ""not"", ""passed"", ""the"", ""center"", ""of"", ""the"", ""shape"", ""will"", ""be"", ""used""]"
358,Write fixed bagit header.,"[""write"", ""fixed"", ""bagit"", ""header""]"
359,"Scikit-learn required: Computes the feature importance scores from the training data.

        Parameters
        ----------
        X: array-like {n_samples, n_features}
            Training instances to compute the feature importance scores from
        y: array-like {n_samples}
            Training labels

        Returns
        -------
        Copy of the ReliefF instance","[""scikit"", ""learn"", ""required"", ""computes"", ""the"", ""feature"", ""importance"", ""scores"", ""from"", ""the"", ""training"", ""data"", ""parameters"", ""x"", ""array"", ""like"", ""n"", ""samples"", ""n"", ""features"", ""training"", ""instances"", ""to"", ""compute"", ""the"", ""feature"", ""importance"", ""scores"", ""from"", ""y"", ""array"", ""like"", ""n"", ""samples"", ""training"", ""labels"", ""returns"", ""copy"", ""of"", ""the"", ""relief"", ""f"", ""instance""]"
360,"Reparses the specified module file from disk, overwriting any
        cached representations etc. of the module.","[""reparses"", ""the"", ""specified"", ""module"", ""file"", ""from"", ""disk"", ""overwriting"", ""any"", ""cached"", ""representations"", ""etc"", ""of"", ""the"", ""module""]"
361,"Fetch a MediaInstance

        :returns: Fetched MediaInstance
        :rtype: twilio.rest.api.v2010.account.message.media.MediaInstance","[""fetch"", ""a"", ""media"", ""instance"", ""returns"", ""fetched"", ""media"", ""instance"", ""rtype"", ""twilio"", ""rest"", ""api"", ""v"", ""2010"", ""account"", ""message"", ""media"", ""media"", ""instance""]"
362,"Updates all objects with details given if they match a set of conditions supplied.

        This method updates each object individually, to fire callback methods and ensure
        validations are run.

        Returns the number of objects matched (which may not be equal to the number of objects
            updated if objects rows already have the new value).","[""updates"", ""all"", ""objects"", ""with"", ""details"", ""given"", ""if"", ""they"", ""match"", ""a"", ""set"", ""of"", ""conditions"", ""supplied"", ""this"", ""method"", ""updates"", ""each"", ""object"", ""individually"", ""to"", ""fire"", ""callback"", ""methods"", ""and"", ""ensure"", ""validations"", ""are"", ""run"", ""returns"", ""the"", ""number"", ""of"", ""objects"", ""matched"", ""which"", ""may"", ""not"", ""be"", ""equal"", ""to"", ""the"", ""number"", ""of"", ""objects"", ""updated"", ""if"", ""objects"", ""rows"", ""already"", ""have"", ""the"", ""new"", ""value""]"
363,"Given arbitrary sheet coordinates, return the sheet coordinates
        of the center of the closest unit.","[""given"", ""arbitrary"", ""sheet"", ""coordinates"", ""return"", ""the"", ""sheet"", ""coordinates"", ""of"", ""the"", ""center"", ""of"", ""the"", ""closest"", ""unit""]"
364,Send email and syslog by default ...,"[""send"", ""email"", ""and"", ""syslog"", ""by"", ""default""]"
365,"Sets the bin centers (x values)

        :param bins: time bin centers
        :type bins: numpy.ndarray","[""sets"", ""the"", ""bin"", ""centers"", ""x"", ""values"", ""param"", ""bins"", ""time"", ""bin"", ""centers"", ""type"", ""bins"", ""numpy"", ""ndarray""]"
366,"Changes orientation of each contig to match the reference, when possible.
           Returns a set of names of contigs that had hits in both orientations to the reference","[""changes"", ""orientation"", ""of"", ""each"", ""contig"", ""to"", ""match"", ""the"", ""reference"", ""when"", ""possible"", ""returns"", ""a"", ""set"", ""of"", ""names"", ""of"", ""contigs"", ""that"", ""had"", ""hits"", ""in"", ""both"", ""orientations"", ""to"", ""the"", ""reference""]"
367,Read only name tag,"[""read"", ""only"", ""name"", ""tag""]"
368,"Run feature detection on ffmpeg, returns True if ffmpeg supports
    the loudnorm filter","[""run"", ""feature"", ""detection"", ""on"", ""ffmpeg"", ""returns"", ""true"", ""if"", ""ffmpeg"", ""supports"", ""the"", ""loudnorm"", ""filter""]"
369,Clear the hub buffer,"[""clear"", ""the"", ""hub"", ""buffer""]"
370,"Returns information about the features available for the CPC of this
        partition.

        Authorization requirements:

        * Object-access permission to this partition.

        Returns:

          :term:`iterable`:
            An iterable where each item represents one feature that is
            available for the CPC of this partition.

            Each item is a dictionary with the following items:

            * `name` (:term:`unicode string`): Name of the feature.
            * `description` (:term:`unicode string`): Short description of
              the feature.
            * `state` (bool): Enablement state of the feature (`True` if the
              enabled, `False` if disabled).

        Raises:

          :exc:`ValueError`: Features are not supported on the HMC.
          :exc:`~zhmcclient.HTTPError`
          :exc:`~zhmcclient.ParseError`
          :exc:`~zhmcclient.AuthError`
          :exc:`~zhmcclient.ConnectionError`","[""returns"", ""information"", ""about"", ""the"", ""features"", ""available"", ""for"", ""the"", ""cpc"", ""of"", ""this"", ""partition"", ""authorization"", ""requirements"", ""object"", ""access"", ""permission"", ""to"", ""this"", ""partition"", ""returns"", ""term"", ""str"", ""an"", ""iterable"", ""where"", ""each"", ""item"", ""represents"", ""one"", ""feature"", ""that"", ""is"", ""available"", ""for"", ""the"", ""cpc"", ""of"", ""this"", ""partition"", ""each"", ""item"", ""is"", ""a"", ""dictionary"", ""with"", ""the"", ""following"", ""items"", ""str"", ""term"", ""str"", ""name"", ""of"", ""the"", ""feature"", ""str"", ""term"", ""str"", ""short"", ""description"", ""of"", ""the"", ""feature"", ""str"", ""bool"", ""enablement"", ""state"", ""of"", ""the"", ""feature"", ""str"", ""if"", ""the"", ""enabled"", ""str"", ""if"", ""disabled"", ""raises"", ""exc"", ""str"", ""features"", ""are"", ""not"", ""supported"", ""on"", ""the"", ""hmc"", ""exc"", ""str"", ""exc"", ""str"", ""exc"", ""str"", ""exc"", ""str""]"
371,"Detect if we get a class or a name, convert a name to a class.","[""detect"", ""if"", ""we"", ""get"", ""a"", ""class"", ""or"", ""a"", ""name"", ""convert"", ""a"", ""name"", ""to"", ""a"", ""class""]"
372,"Loads the plugin

        :param laser_plugin: plugin that will be loaded in the symbolic virtual machine","[""loads"", ""the"", ""plugin"", ""param"", ""laser"", ""plugin"", ""plugin"", ""that"", ""will"", ""be"", ""loaded"", ""in"", ""the"", ""symbolic"", ""virtual"", ""machine""]"
373,"Converts the tree into a flat json representation.

    The json repr will be a list of hashes, each hash having 2 fields:
      - package
      - dependencies: list of dependencies

    :param dict tree: dependency tree
    :param int indent: no. of spaces to indent json
    :returns: json representation of the tree
    :rtype: str","[""converts"", ""the"", ""tree"", ""into"", ""a"", ""flat"", ""json"", ""representation"", ""the"", ""json"", ""repr"", ""will"", ""be"", ""a"", ""list"", ""of"", ""hashes"", ""each"", ""hash"", ""having"", ""num"", ""fields"", ""package"", ""dependencies"", ""list"", ""of"", ""dependencies"", ""param"", ""dict"", ""tree"", ""dependency"", ""tree"", ""param"", ""int"", ""indent"", ""no"", ""of"", ""spaces"", ""to"", ""indent"", ""json"", ""returns"", ""json"", ""representation"", ""of"", ""the"", ""tree"", ""rtype"", ""str""]"
374,"Implements the stackdriver cell magic for ipython notebooks.

  Args:
    line: the contents of the storage line.
  Returns:
    The results of executing the cell.","[""implements"", ""the"", ""stackdriver"", ""cell"", ""magic"", ""for"", ""ipython"", ""notebooks"", ""args"", ""line"", ""the"", ""contents"", ""of"", ""the"", ""storage"", ""line"", ""returns"", ""the"", ""results"", ""of"", ""executing"", ""the"", ""cell""]"
375,items : items item,"[""items"", ""items"", ""item""]"
376,Display / set / update the readme template file.,"[""display"", ""set"", ""update"", ""the"", ""readme"", ""template"", ""file""]"
377,"Return an unordered storage system based on the specified config.

    The canonical example of such a storage container is
    ``defaultdict(set)``. Thus, the return value of this method contains
    keys and values. The values are unordered sets.

    Args:
        config (dict): Defines the configurations for the storage.
            For in-memory storage, the config ``{'type': 'dict'}`` will
            suffice. For Redis storage, the type should be ``'redis'`` and
            the configurations for the Redis database should be supplied
            under the key ``'redis'``. These parameters should be in a form
            suitable for `redis.Redis`. The parameters may alternatively
            contain references to environment variables, in which case
            literal configuration values should be replaced by dicts of
            the form::

                {'env': 'REDIS_HOSTNAME',
                 'default': 'localhost'}

            For a full example, see :ref:`minhash_lsh_at_scale`

        name (bytes, optional): A reference name for this storage container.
            For dict-type containers, this is ignored. For Redis containers,
            this name is used to prefix keys pertaining to this storage
            container within the database.","[""return"", ""an"", ""unordered"", ""storage"", ""system"", ""based"", ""on"", ""the"", ""specified"", ""config"", ""the"", ""canonical"", ""example"", ""of"", ""such"", ""a"", ""storage"", ""container"", ""is"", ""str"", ""defaultdict"", ""set"", ""str"", ""thus"", ""the"", ""return"", ""value"", ""of"", ""this"", ""method"", ""contains"", ""keys"", ""and"", ""values"", ""the"", ""values"", ""are"", ""unordered"", ""sets"", ""args"", ""config"", ""dict"", ""defines"", ""the"", ""configurations"", ""for"", ""the"", ""storage"", ""for"", ""in"", ""memory"", ""storage"", ""the"", ""config"", ""str"", ""str"", ""str"", ""str"", ""will"", ""suffice"", ""for"", ""redis"", ""storage"", ""the"", ""type"", ""should"", ""be"", ""str"", ""str"", ""str"", ""and"", ""the"", ""configurations"", ""for"", ""the"", ""redis"", ""database"", ""should"", ""be"", ""supplied"", ""under"", ""the"", ""key"", ""str"", ""str"", ""str"", ""these"", ""parameters"", ""should"", ""be"", ""in"", ""a"", ""form"", ""suitable"", ""for"", ""str"", ""the"", ""parameters"", ""may"", ""alternatively"", ""contain"", ""references"", ""to"", ""environment"", ""variables"", ""in"", ""which"", ""case"", ""literal"", ""configuration"", ""values"", ""should"", ""be"", ""replaced"", ""by"", ""dicts"", ""of"", ""the"", ""form"", ""str"", ""str"", ""str"", ""str"", ""for"", ""a"", ""full"", ""example"", ""see"", ""ref"", ""str"", ""name"", ""bytes"", ""optional"", ""a"", ""reference"", ""name"", ""for"", ""this"", ""storage"", ""container"", ""for"", ""dict"", ""type"", ""containers"", ""this"", ""is"", ""ignored"", ""for"", ""redis"", ""containers"", ""this"", ""name"", ""is"", ""used"", ""to"", ""prefix"", ""keys"", ""pertaining"", ""to"", ""this"", ""storage"", ""container"", ""within"", ""the"", ""database""]"
378,"*move template to destination*

        **Key Arguments:**
            # -

        **Return:**
            - None

        .. todo::

            - @review: when complete, clean _move_template_to_destination method
            - @review: when complete add logging","[""move"", ""template"", ""to"", ""destination"", ""key"", ""arguments"", ""return"", ""none"", ""todo"", ""review"", ""when"", ""complete"", ""clean"", ""move"", ""template"", ""to"", ""destination"", ""method"", ""review"", ""when"", ""complete"", ""add"", ""logging""]"
379,Execute UNDEF instruction.,"[""execute"", ""undef"", ""instruction""]"
380,"Converts a string to an array of integer values according to the
    base specified (int numbers must be whitespace delimited).\n
    Example: ""13 a3 3c"" => [0x13, 0xa3, 0x3c]

    :return: [int]","[""converts"", ""a"", ""string"", ""to"", ""an"", ""array"", ""of"", ""integer"", ""values"", ""according"", ""to"", ""the"", ""base"", ""specified"", ""int"", ""numbers"", ""must"", ""be"", ""whitespace"", ""delimited"", ""n"", ""example"", ""str"", ""x"", ""13"", ""xa"", ""3"", ""x"", ""3"", ""c"", ""return"", ""int""]"
381,"This method provides support for Frontiers production using base zipfiles
    as the input for ePub creation. It expects a valid pathname for one of the
    two zipfiles, and that both zipfiles are present in the same directory.","[""this"", ""method"", ""provides"", ""support"", ""for"", ""frontiers"", ""production"", ""using"", ""base"", ""zipfiles"", ""as"", ""the"", ""input"", ""for"", ""e"", ""pub"", ""creation"", ""it"", ""expects"", ""a"", ""valid"", ""pathname"", ""for"", ""one"", ""of"", ""the"", ""two"", ""zipfiles"", ""and"", ""that"", ""both"", ""zipfiles"", ""are"", ""present"", ""in"", ""the"", ""same"", ""directory""]"
382,this doesn't allow raw_keys for now,"[""this"", ""doesn"", ""t"", ""allow"", ""raw"", ""keys"", ""for"", ""now""]"
383,"Add the consequences found for a variant

            Args:
                variant_obj (puzzle.models.Variant)
                raw_variant_line (str): A raw vcf variant line","[""add"", ""the"", ""consequences"", ""found"", ""for"", ""a"", ""variant"", ""args"", ""variant"", ""obj"", ""puzzle"", ""models"", ""variant"", ""raw"", ""variant"", ""line"", ""str"", ""a"", ""raw"", ""vcf"", ""variant"", ""line""]"
384,Adds all of the users of the Rocket.Chat server to the channel.,"[""adds"", ""all"", ""of"", ""the"", ""users"", ""of"", ""the"", ""rocket"", ""chat"", ""server"", ""to"", ""the"", ""channel""]"
385,Reads from the VMware VMX file corresponding to this VM.,"[""reads"", ""from"", ""the"", ""v"", ""mware"", ""vmx"", ""file"", ""corresponding"", ""to"", ""this"", ""vm""]"
386,"Get the size of each columns from the header.

        :param header:
            The header template we have to get the size from.
        :type header: dict

        :return: The maximal size of the each data to print.
        :rtype: list","[""get"", ""the"", ""size"", ""of"", ""each"", ""columns"", ""from"", ""the"", ""header"", ""param"", ""header"", ""the"", ""header"", ""template"", ""we"", ""have"", ""to"", ""get"", ""the"", ""size"", ""from"", ""type"", ""header"", ""dict"", ""return"", ""the"", ""maximal"", ""size"", ""of"", ""the"", ""each"", ""data"", ""to"", ""print"", ""rtype"", ""list""]"
387,"Remove all table records with the supplied upload_id

        :param conn: sql connection
        :param table: table to modify
        :param sourcesystem_cd: target sourcesystem code
        :return: number of records removed","[""remove"", ""all"", ""table"", ""records"", ""with"", ""the"", ""supplied"", ""upload"", ""id"", ""param"", ""conn"", ""sql"", ""connection"", ""param"", ""table"", ""table"", ""to"", ""modify"", ""param"", ""sourcesystem"", ""cd"", ""target"", ""sourcesystem"", ""code"", ""return"", ""number"", ""of"", ""records"", ""removed""]"
388,"Runs one step of pipelined CORDIC
        Returned phase is in 1 to -1 range","[""runs"", ""one"", ""step"", ""of"", ""pipelined"", ""cordic"", ""returned"", ""phase"", ""is"", ""in"", ""num"", ""to"", ""num"", ""range""]"
389,"Generate a table to convert a whole byte to binary.
    This code was taken from the Python Cookbook, 2nd edition - O'Reilly.","[""generate"", ""a"", ""table"", ""to"", ""convert"", ""a"", ""whole"", ""byte"", ""to"", ""binary"", ""this"", ""code"", ""was"", ""taken"", ""from"", ""the"", ""python"", ""cookbook"", ""nd"", ""edition"", ""o"", ""reilly""]"
390,m._print_ll() -- Print log-likelihood (scoring) matrix,"[""m"", ""print"", ""ll"", ""print"", ""log"", ""likelihood"", ""scoring"", ""matrix""]"
391,"Get information about shares which feed the application.

        :param str token: API auth token
        :param str prot: https [DEFAULT] or http
         (use it only for dev and tracking needs).","[""get"", ""information"", ""about"", ""shares"", ""which"", ""feed"", ""the"", ""application"", ""param"", ""str"", ""token"", ""api"", ""auth"", ""token"", ""param"", ""str"", ""prot"", ""https"", ""default"", ""or"", ""http"", ""use"", ""it"", ""only"", ""for"", ""dev"", ""and"", ""tracking"", ""needs""]"
392,:param dir_entries: list of os.DirEntry() instances,"[""param"", ""dir"", ""entries"", ""list"", ""of"", ""os"", ""dir"", ""entry"", ""instances""]"
393,":param cfg: An angr CFG object
        :returns:    a dictionary of function addresses to tuples of attributes","[""param"", ""cfg"", ""an"", ""angr"", ""cfg"", ""object"", ""returns"", ""a"", ""dictionary"", ""of"", ""function"", ""addresses"", ""to"", ""tuples"", ""of"", ""attributes""]"
394,"If this async is in within another async set that async id as the
        parent.","[""if"", ""this"", ""async"", ""is"", ""in"", ""within"", ""another"", ""async"", ""set"", ""that"", ""async"", ""id"", ""as"", ""the"", ""parent""]"
395,"Convert paths into b-splines.

        Parameters
        -----------
        path_indexes : (n) int
          List of indexes of self.paths to convert
        smooth : float
          How much the spline should smooth the curve

        Returns
        ------------
        simplified: Path2D object","[""convert"", ""paths"", ""into"", ""b"", ""splines"", ""parameters"", ""path"", ""indexes"", ""n"", ""int"", ""list"", ""of"", ""indexes"", ""of"", ""self"", ""paths"", ""to"", ""convert"", ""smooth"", ""float"", ""how"", ""much"", ""the"", ""spline"", ""should"", ""smooth"", ""the"", ""curve"", ""returns"", ""simplified"", ""path"", ""2"", ""d"", ""object""]"
396,"Retrieves an alphabetical list of all the categories that have no parents.

    Syntax::

        {% get_top_level_categories [using ""app.Model""] as categories %}

    Returns an list of categories [<category>, <category>, <category, ...]","[""retrieves"", ""an"", ""alphabetical"", ""list"", ""of"", ""all"", ""the"", ""categories"", ""that"", ""have"", ""no"", ""parents"", ""syntax"", ""get"", ""top"", ""level"", ""categories"", ""using"", ""str"", ""as"", ""categories"", ""returns"", ""an"", ""list"", ""of"", ""categories"", ""category"", ""category"", ""category""]"
397,"Syllabify the given word, whether simplex or complex.","[""syllabify"", ""the"", ""given"", ""word"", ""whether"", ""simplex"", ""or"", ""complex""]"
398,JSON decoder for BaseNodes,"[""json"", ""decoder"", ""for"", ""base"", ""nodes""]"
399,"Compute k-means clustering.

        Parameters
        ----------
        Z : ArrayRDD or DictRDD containing array-like or sparse matrix
            Train data.

        Returns
        -------
        self","[""compute"", ""k"", ""means"", ""clustering"", ""parameters"", ""z"", ""array"", ""rdd"", ""or"", ""dict"", ""rdd"", ""containing"", ""array"", ""like"", ""or"", ""sparse"", ""matrix"", ""train"", ""data"", ""returns"", ""self""]"
400,"Splits a (possibly versioned) name into unversioned name and version.

       Returns a tuple ``(unversioned_name, version)``, where ``version`` may
       be ``None``.","[""splits"", ""a"", ""possibly"", ""versioned"", ""name"", ""into"", ""unversioned"", ""name"", ""and"", ""version"", ""returns"", ""a"", ""tuple"", ""str"", ""unversioned"", ""name"", ""version"", ""str"", ""where"", ""str"", ""version"", ""str"", ""may"", ""be"", ""str"", ""none"", ""str""]"
401,Create a video object from a video embed,"[""create"", ""a"", ""video"", ""object"", ""from"", ""a"", ""video"", ""embed""]"
402,"Returns a modified version of properties with all values of the
        given feature replaced by the given value.
        If 'value' is None the feature will be removed.","[""returns"", ""a"", ""modified"", ""version"", ""of"", ""properties"", ""with"", ""all"", ""values"", ""of"", ""the"", ""given"", ""feature"", ""replaced"", ""by"", ""the"", ""given"", ""value"", ""if"", ""str"", ""is"", ""none"", ""the"", ""feature"", ""will"", ""be"", ""removed""]"
403,Displays a tooltip over any cell in a certain column,"[""displays"", ""a"", ""tooltip"", ""over"", ""any"", ""cell"", ""in"", ""a"", ""certain"", ""column""]"
404,prevent the main loop spinning too fast,"[""prevent"", ""the"", ""main"", ""loop"", ""spinning"", ""too"", ""fast""]"
405,Create new element whose tag name is ``tag``.,"[""create"", ""new"", ""element"", ""whose"", ""tag"", ""name"", ""is"", ""str"", ""tag"", ""str""]"
406,Utility function to get the number of deployments a given project has,"[""utility"", ""function"", ""to"", ""get"", ""the"", ""number"", ""of"", ""deployments"", ""a"", ""given"", ""project"", ""has""]"
407,"Bind a copy of the collection to the class, modified per our class' settings.
		
		The given target (and eventual collection returned) must be safe within the context the document sublcass
		being bound is constructed within. E.g. at the module scope this binding must be thread-safe.","[""bind"", ""a"", ""copy"", ""of"", ""the"", ""collection"", ""to"", ""the"", ""class"", ""modified"", ""per"", ""our"", ""class"", ""settings"", ""the"", ""given"", ""target"", ""and"", ""eventual"", ""collection"", ""returned"", ""must"", ""be"", ""safe"", ""within"", ""the"", ""context"", ""the"", ""document"", ""sublcass"", ""being"", ""bound"", ""is"", ""constructed"", ""within"", ""e"", ""g"", ""at"", ""the"", ""module"", ""scope"", ""this"", ""binding"", ""must"", ""be"", ""thread"", ""safe""]"
408,"Returns a boolean of whether the raw_password was correct. Handles
        hashing formats behind the scenes.","[""returns"", ""a"", ""boolean"", ""of"", ""whether"", ""the"", ""raw"", ""password"", ""was"", ""correct"", ""handles"", ""hashing"", ""formats"", ""behind"", ""the"", ""scenes""]"
409,View function which handles a registration request.,"[""view"", ""function"", ""which"", ""handles"", ""a"", ""registration"", ""request""]"
410,Transition the SCTP association to a new state.,"[""transition"", ""the"", ""sctp"", ""association"", ""to"", ""a"", ""new"", ""state""]"
411,Entry point to plug the LiveReload feature.,"[""entry"", ""point"", ""to"", ""plug"", ""the"", ""live"", ""reload"", ""feature""]"
412,"Replace %xx escapes by their single-character equivalent. The optional
    encoding and errors parameters specify how to decode percent-encoded
    sequences into Unicode characters, as accepted by the bytes.decode()
    method.
    By default, percent-encoded sequences are decoded with UTF-8, and invalid
    sequences are replaced by a placeholder character.

    unquote('abc%20def') -> 'abc def'.","[""replace"", ""xx"", ""escapes"", ""by"", ""their"", ""single"", ""character"", ""equivalent"", ""the"", ""optional"", ""encoding"", ""and"", ""errors"", ""parameters"", ""specify"", ""how"", ""to"", ""decode"", ""percent"", ""encoded"", ""sequences"", ""into"", ""unicode"", ""characters"", ""as"", ""accepted"", ""by"", ""the"", ""bytes"", ""decode"", ""method"", ""by"", ""default"", ""percent"", ""encoded"", ""sequences"", ""are"", ""decoded"", ""with"", ""utf"", ""num"", ""and"", ""invalid"", ""sequences"", ""are"", ""replaced"", ""by"", ""a"", ""placeholder"", ""character"", ""unquote"", ""str"", ""str""]"
413,The list of spans representing ``words`` layer elements.,"[""the"", ""list"", ""of"", ""spans"", ""representing"", ""str"", ""words"", ""str"", ""layer"", ""elements""]"
414,Return a dictionnary of current tables,"[""return"", ""a"", ""dictionnary"", ""of"", ""current"", ""tables""]"
415,"This function allows the user to set a large variety of options for individual plots.  
    
    Parameters:
        name : str 
            Name of the tplot variable
        option : str
            The name of the option.  See section below  
        value : str/int/float/list
            The value of the option.  See section below.  
            
    Options:
        ============        ==========   =====
        Options             Value type   Notes
        ============        ==========   =====
        Color               str/list     Red, Orange, Yellow, Green, Blue, etc.
        Colormap            str/list     https://matplotlib.org/examples/color/colormaps_reference.html.
        Spec                int          1 sets the Tplot Variable to spectrogram mode, 0 reverts.
        Alt                 int          1 sets the Tplot Variable to altitude plot mode, 0 reverts.
        Map                 int          1 sets the Tplot Variable to latitude/longitude mode, 0 reverts.
        link                list         Allows a user to reference one tplot variable to another.
        ylog                int          1 sets the y axis to log scale, 0 reverts.
        zlog                int          1 sets the z axis to log scale, 0 reverts (spectrograms only).
        legend_names        list         A list of strings that will be used to identify the lines.
        xlog_interactive    bool         Sets x axis on interactive plot to log scale if True.
        ylog                bool         Set y axis on main plot window to log scale if True.
        ylog_interactive    bool         Sets y axis on interactive plot to log scale if True.
        zlog                bool         Sets z axis on main plot window to log scale if True.
        line_style          str          solid_line, dot, dash, dash_dot, dash_dot_dot_dot, long_dash.
        char_size           int          Defines character size for plot labels, etc.
        name                str          The title of the plot.
        panel_size          flt          Number between (0,1], representing the percent size of the plot.
        basemap             str          Full path and name of a background image for ""Map"" plots.
        alpha               flt          Number between [0,1], gives the transparancy of the plot lines.
        thick               flt          Sets plot line width.
        yrange              flt list     Two numbers that give the y axis range of the plot.
        zrange              flt list     Two numbers that give the z axis range of the plot.
        xrange_interactive  flt list     Two numberes that give the x axis range of interactive plots.
        yrange_interactive  flt list     Two numberes that give the y axis range of interactive plots.
        ytitle              str          Title shown on the y axis.
        ztitle              str          Title shown on the z axis.  Spec plots only.
        plotter             str          Allows a user to implement their own plotting script in place of the ones
                                         herein.
        crosshair_x         str          Title for x-axis crosshair.
        crosshair_y         str          Title for y-axis crosshair.
        crosshair_z         str          Title for z-axis crosshair.
        static              str          Datetime string that gives desired time to plot y and z values from a spec
                                         plot.
        static_tavg         str          Datetime string that gives desired time-averaged y and z values to plot
                                         from a spec plot.
        t_average           int          Seconds around which the cursor is averaged when hovering over spectrogram
                                         plots.
    Returns:
        None
    
    Examples:
        >>> # Change the y range of Variable1 
        >>> import pytplot
        >>> x_data = [1,2,3,4,5]
        >>> y_data = [1,2,3,4,5]
        >>> pytplot.store_data(""Variable1"", data={'x':x_data, 'y':y_data})
        >>> pytplot.options('Variable1', 'yrange', [2,4])
        
        >>> # Change Variable1 to use a log scale
        >>> pytplot.options('Variable1', 'ylog', 1)","[""this"", ""function"", ""allows"", ""the"", ""user"", ""to"", ""set"", ""a"", ""large"", ""variety"", ""of"", ""options"", ""for"", ""individual"", ""plots"", ""parameters"", ""name"", ""str"", ""name"", ""of"", ""the"", ""tplot"", ""variable"", ""option"", ""str"", ""the"", ""name"", ""of"", ""the"", ""option"", ""see"", ""section"", ""below"", ""value"", ""str"", ""int"", ""float"", ""list"", ""the"", ""value"", ""of"", ""the"", ""option"", ""see"", ""section"", ""below"", ""options"", ""options"", ""value"", ""type"", ""notes"", ""color"", ""str"", ""list"", ""red"", ""orange"", ""yellow"", ""green"", ""blue"", ""etc"", ""colormap"", ""str"", ""list"", ""https"", ""matplotlib"", ""org"", ""examples"", ""color"", ""colormaps"", ""reference"", ""html"", ""spec"", ""int"", ""num"", ""sets"", ""the"", ""tplot"", ""variable"", ""to"", ""spectrogram"", ""mode"", ""num"", ""reverts"", ""alt"", ""int"", ""num"", ""sets"", ""the"", ""tplot"", ""variable"", ""to"", ""altitude"", ""plot"", ""mode"", ""num"", ""reverts"", ""map"", ""int"", ""num"", ""sets"", ""the"", ""tplot"", ""variable"", ""to"", ""latitude"", ""longitude"", ""mode"", ""num"", ""reverts"", ""link"", ""list"", ""allows"", ""a"", ""user"", ""to"", ""reference"", ""one"", ""tplot"", ""variable"", ""to"", ""another"", ""ylog"", ""int"", ""num"", ""sets"", ""the"", ""y"", ""axis"", ""to"", ""log"", ""scale"", ""num"", ""reverts"", ""zlog"", ""int"", ""num"", ""sets"", ""the"", ""z"", ""axis"", ""to"", ""log"", ""scale"", ""num"", ""reverts"", ""spectrograms"", ""only"", ""legend"", ""names"", ""list"", ""a"", ""list"", ""of"", ""strings"", ""that"", ""will"", ""be"", ""used"", ""to"", ""identify"", ""the"", ""lines"", ""xlog"", ""interactive"", ""bool"", ""sets"", ""x"", ""axis"", ""on"", ""interactive"", ""plot"", ""to"", ""log"", ""scale"", ""if"", ""true"", ""ylog"", ""bool"", ""set"", ""y"", ""axis"", ""on"", ""main"", ""plot"", ""window"", ""to"", ""log"", ""scale"", ""if"", ""true"", ""ylog"", ""interactive"", ""bool"", ""sets"", ""y"", ""axis"", ""on"", ""interactive"", ""plot"", ""to"", ""log"", ""scale"", ""if"", ""true"", ""zlog"", ""bool"", ""sets"", ""z"", ""axis"", ""on"", ""main"", ""plot"", ""window"", ""to"", ""log"", ""scale"", ""if"", ""true"", ""line"", ""style"", ""str"", ""solid"", ""line"", ""dot"", ""dash"", ""dash"", ""dot"", ""dash"", ""dot"", ""dot"", ""dot"", ""long"", ""dash"", ""char"", ""size"", ""int"", ""defines"", ""character"", ""size"", ""for"", ""plot"", ""labels"", ""etc"", ""name"", ""str"", ""the"", ""title"", ""of"", ""the"", ""plot"", ""panel"", ""size"", ""flt"", ""number"", ""between"", ""num"", ""num"", ""representing"", ""the"", ""percent"", ""size"", ""of"", ""the"", ""plot"", ""basemap"", ""str"", ""full"", ""path"", ""and"", ""name"", ""of"", ""a"", ""background"", ""image"", ""for"", ""str"", ""plots"", ""alpha"", ""flt"", ""number"", ""between"", ""num"", ""num"", ""gives"", ""the"", ""transparancy"", ""of"", ""the"", ""plot"", ""lines"", ""thick"", ""flt"", ""sets"", ""plot"", ""line"", ""width"", ""yrange"", ""flt"", ""list"", ""two"", ""numbers"", ""that"", ""give"", ""the"", ""y"", ""axis"", ""range"", ""of"", ""the"", ""plot"", ""zrange"", ""flt"", ""list"", ""two"", ""numbers"", ""that"", ""give"", ""the"", ""z"", ""axis"", ""range"", ""of"", ""the"", ""plot"", ""xrange"", ""interactive"", ""flt"", ""list"", ""two"", ""numberes"", ""that"", ""give"", ""the"", ""x"", ""axis"", ""range"", ""of"", ""interactive"", ""plots"", ""yrange"", ""interactive"", ""flt"", ""list"", ""two"", ""numberes"", ""that"", ""give"", ""the"", ""y"", ""axis"", ""range"", ""of"", ""interactive"", ""plots"", ""ytitle"", ""str"", ""title"", ""shown"", ""on"", ""the"", ""y"", ""axis"", ""ztitle"", ""str"", ""title"", ""shown"", ""on"", ""the"", ""z"", ""axis"", ""spec"", ""plots"", ""only"", ""plotter"", ""str"", ""allows"", ""a"", ""user"", ""to"", ""implement"", ""their"", ""own"", ""plotting"", ""script"", ""in"", ""place"", ""of"", ""the"", ""ones"", ""herein"", ""crosshair"", ""x"", ""str"", ""title"", ""for"", ""x"", ""axis"", ""crosshair"", ""crosshair"", ""y"", ""str"", ""title"", ""for"", ""y"", ""axis"", ""crosshair"", ""crosshair"", ""z"", ""str"", ""title"", ""for"", ""z"", ""axis"", ""crosshair"", ""static"", ""str"", ""datetime"", ""string"", ""that"", ""gives"", ""desired"", ""time"", ""to"", ""plot"", ""y"", ""and"", ""z"", ""values"", ""from"", ""a"", ""spec"", ""plot"", ""static"", ""tavg"", ""str"", ""datetime"", ""string"", ""that"", ""gives"", ""desired"", ""time"", ""averaged"", ""y"", ""and"", ""z"", ""values"", ""to"", ""plot"", ""from"", ""a"", ""spec"", ""plot"", ""t"", ""average"", ""int"", ""seconds"", ""around"", ""which"", ""the"", ""cursor"", ""is"", ""averaged"", ""when"", ""hovering"", ""over"", ""spectrogram"", ""plots"", ""returns"", ""none"", ""examples"", ""change"", ""the"", ""y"", ""range"", ""of"", ""variable"", ""1"", ""import"", ""pytplot"", ""x"", ""data"", ""num"", ""num"", ""num"", ""num"", ""num"", ""y"", ""data"", ""num"", ""num"", ""num"", ""num"", ""num"", ""pytplot"", ""store"", ""data"", ""str"", ""data"", ""str"", ""x"", ""data"", ""str"", ""y"", ""data"", ""pytplot"", ""options"", ""str"", ""str"", ""num"", ""num"", ""change"", ""variable"", ""1"", ""to"", ""use"", ""a"", ""log"", ""scale"", ""pytplot"", ""options"", ""str"", ""str"", ""num""]"
416,Loads lint config from a ini-style config file,"[""loads"", ""lint"", ""config"", ""from"", ""a"", ""ini"", ""style"", ""config"", ""file""]"
417,"A simple generator that yields a File or Folder object based on
        the arguments.","[""a"", ""simple"", ""generator"", ""that"", ""yields"", ""a"", ""file"", ""or"", ""folder"", ""object"", ""based"", ""on"", ""the"", ""arguments""]"
418,"linestarts is expected to be a *list) of (offset, line number)
    where both offset and line number are in increasing order.
    Return the closes line number at or below the offset.
    If offset is less than the first line number given in linestarts,
    return line number 0.","[""linestarts"", ""is"", ""expected"", ""to"", ""be"", ""a"", ""list"", ""of"", ""offset"", ""line"", ""number"", ""where"", ""both"", ""offset"", ""and"", ""line"", ""number"", ""are"", ""in"", ""increasing"", ""order"", ""return"", ""the"", ""closes"", ""line"", ""number"", ""at"", ""or"", ""below"", ""the"", ""offset"", ""if"", ""offset"", ""is"", ""less"", ""than"", ""the"", ""first"", ""line"", ""number"", ""given"", ""in"", ""linestarts"", ""return"", ""line"", ""number"", ""num""]"
419,"This drives the periodicfeatures collection for a list of periodfinding
    pickles.

    Parameters
    ----------

    pfpkl_list : list of str
        The list of period-finding pickles to use.

    lcbasedir : str
        The base directory where the associated light curves are located.

    outdir : str
        The directory where the results will be written.

    starfeaturesdir : str or None
        The directory containing the `starfeatures-<objectid>.pkl` files for
        each object to use calculate neighbor proximity light curve features.

    fourierorder : int
        The Fourier order to use to generate sinusoidal function and fit that to
        the phased light curve.

    transitparams : list of floats
        The transit depth, duration, and ingress duration to use to generate a
        trapezoid planet transit model fit to the phased light curve. The period
        used is the one provided in `period`, while the epoch is automatically
        obtained from a spline fit to the phased light curve.

    ebparams : list of floats
        The primary eclipse depth, eclipse duration, the primary-secondary depth
        ratio, and the phase of the secondary eclipse to use to generate an
        eclipsing binary model fit to the phased light curve. The period used is
        the one provided in `period`, while the epoch is automatically obtained
        from a spline fit to the phased light curve.

    pdiff_threshold : float
        This is the max difference between periods to consider them the same.

    sidereal_threshold : float
        This is the max difference between any of the 'best' periods and the
        sidereal day periods to consider them the same.

    sampling_peak_multiplier : float
        This is the minimum multiplicative factor of a 'best' period's
        normalized periodogram peak over the sampling periodogram peak at the
        same period required to accept the 'best' period as possibly real.

    sampling_startp, sampling_endp : float
        If the `pgramlist` doesn't have a time-sampling Lomb-Scargle
        periodogram, it will be obtained automatically. Use these kwargs to
        control the minimum and maximum period interval to be searched when
        generating this periodogram.

    timecols : list of str or None
        The timecol keys to use from the lcdict in calculating the features.

    magcols : list of str or None
        The magcol keys to use from the lcdict in calculating the features.

    errcols : list of str or None
        The errcol keys to use from the lcdict in calculating the features.

    lcformat : str
        This is the `formatkey` associated with your light curve format, which
        you previously passed in to the `lcproc.register_lcformat`
        function. This will be used to look up how to find and read the light
        curves specified in `basedir` or `use_list_of_filenames`.

    lcformatdir : str or None
        If this is provided, gives the path to a directory when you've stored
        your lcformat description JSONs, other than the usual directories lcproc
        knows to search for them in. Use this along with `lcformat` to specify
        an LC format JSON file that's not currently registered with lcproc.

    sigclip : float or int or sequence of two floats/ints or None
        If a single float or int, a symmetric sigma-clip will be performed using
        the number provided as the sigma-multiplier to cut out from the input
        time-series.

        If a list of two ints/floats is provided, the function will perform an
        'asymmetric' sigma-clip. The first element in this list is the sigma
        value to use for fainter flux/mag values; the second element in this
        list is the sigma value to use for brighter flux/mag values. For
        example, `sigclip=[10., 3.]`, will sigclip out greater than 10-sigma
        dimmings and greater than 3-sigma brightenings. Here the meaning of
        ""dimming"" and ""brightening"" is set by *physics* (not the magnitude
        system), which is why the `magsarefluxes` kwarg must be correctly set.

        If `sigclip` is None, no sigma-clipping will be performed, and the
        time-series (with non-finite elems removed) will be passed through to
        the output.

    verbose : bool
        If True, will indicate progress while working.

    maxobjects : int
        The total number of objects to process from `pfpkl_list`.

    Returns
    -------

    Nothing.","[""this"", ""drives"", ""the"", ""periodicfeatures"", ""collection"", ""for"", ""a"", ""list"", ""of"", ""periodfinding"", ""pickles"", ""parameters"", ""pfpkl"", ""list"", ""list"", ""of"", ""str"", ""the"", ""list"", ""of"", ""period"", ""finding"", ""pickles"", ""to"", ""use"", ""lcbasedir"", ""str"", ""the"", ""base"", ""directory"", ""where"", ""the"", ""associated"", ""light"", ""curves"", ""are"", ""located"", ""outdir"", ""str"", ""the"", ""directory"", ""where"", ""the"", ""results"", ""will"", ""be"", ""written"", ""starfeaturesdir"", ""str"", ""or"", ""none"", ""the"", ""directory"", ""containing"", ""the"", ""str"", ""files"", ""for"", ""each"", ""object"", ""to"", ""use"", ""calculate"", ""neighbor"", ""proximity"", ""light"", ""curve"", ""features"", ""fourierorder"", ""int"", ""the"", ""fourier"", ""order"", ""to"", ""use"", ""to"", ""generate"", ""sinusoidal"", ""function"", ""and"", ""fit"", ""that"", ""to"", ""the"", ""phased"", ""light"", ""curve"", ""transitparams"", ""list"", ""of"", ""floats"", ""the"", ""transit"", ""depth"", ""duration"", ""and"", ""ingress"", ""duration"", ""to"", ""use"", ""to"", ""generate"", ""a"", ""trapezoid"", ""planet"", ""transit"", ""model"", ""fit"", ""to"", ""the"", ""phased"", ""light"", ""curve"", ""the"", ""period"", ""used"", ""is"", ""the"", ""one"", ""provided"", ""in"", ""str"", ""while"", ""the"", ""epoch"", ""is"", ""automatically"", ""obtained"", ""from"", ""a"", ""spline"", ""fit"", ""to"", ""the"", ""phased"", ""light"", ""curve"", ""ebparams"", ""list"", ""of"", ""floats"", ""the"", ""primary"", ""eclipse"", ""depth"", ""eclipse"", ""duration"", ""the"", ""primary"", ""secondary"", ""depth"", ""ratio"", ""and"", ""the"", ""phase"", ""of"", ""the"", ""secondary"", ""eclipse"", ""to"", ""use"", ""to"", ""generate"", ""an"", ""eclipsing"", ""binary"", ""model"", ""fit"", ""to"", ""the"", ""phased"", ""light"", ""curve"", ""the"", ""period"", ""used"", ""is"", ""the"", ""one"", ""provided"", ""in"", ""str"", ""while"", ""the"", ""epoch"", ""is"", ""automatically"", ""obtained"", ""from"", ""a"", ""spline"", ""fit"", ""to"", ""the"", ""phased"", ""light"", ""curve"", ""pdiff"", ""threshold"", ""float"", ""this"", ""is"", ""the"", ""max"", ""difference"", ""between"", ""periods"", ""to"", ""consider"", ""them"", ""the"", ""same"", ""sidereal"", ""threshold"", ""float"", ""this"", ""is"", ""the"", ""max"", ""difference"", ""between"", ""any"", ""of"", ""the"", ""str"", ""periods"", ""and"", ""the"", ""sidereal"", ""day"", ""periods"", ""to"", ""consider"", ""them"", ""the"", ""same"", ""sampling"", ""peak"", ""multiplier"", ""float"", ""this"", ""is"", ""the"", ""minimum"", ""multiplicative"", ""factor"", ""of"", ""a"", ""str"", ""period"", ""str"", ""best"", ""str"", ""t"", ""have"", ""a"", ""time"", ""sampling"", ""lomb"", ""scargle"", ""periodogram"", ""it"", ""will"", ""be"", ""obtained"", ""automatically"", ""use"", ""these"", ""kwargs"", ""to"", ""control"", ""the"", ""minimum"", ""and"", ""maximum"", ""period"", ""interval"", ""to"", ""be"", ""searched"", ""when"", ""generating"", ""this"", ""periodogram"", ""timecols"", ""list"", ""of"", ""str"", ""or"", ""none"", ""the"", ""timecol"", ""keys"", ""to"", ""use"", ""from"", ""the"", ""lcdict"", ""in"", ""calculating"", ""the"", ""features"", ""magcols"", ""list"", ""of"", ""str"", ""or"", ""none"", ""the"", ""magcol"", ""keys"", ""to"", ""use"", ""from"", ""the"", ""lcdict"", ""in"", ""calculating"", ""the"", ""features"", ""errcols"", ""list"", ""of"", ""str"", ""or"", ""none"", ""the"", ""errcol"", ""keys"", ""to"", ""use"", ""from"", ""the"", ""lcdict"", ""in"", ""calculating"", ""the"", ""features"", ""lcformat"", ""str"", ""this"", ""is"", ""the"", ""str"", ""associated"", ""with"", ""your"", ""light"", ""curve"", ""format"", ""which"", ""you"", ""previously"", ""passed"", ""in"", ""to"", ""the"", ""str"", ""function"", ""this"", ""will"", ""be"", ""used"", ""to"", ""look"", ""up"", ""how"", ""to"", ""find"", ""and"", ""read"", ""the"", ""light"", ""curves"", ""specified"", ""in"", ""str"", ""or"", ""str"", ""lcformatdir"", ""str"", ""or"", ""none"", ""if"", ""this"", ""is"", ""provided"", ""gives"", ""the"", ""path"", ""to"", ""a"", ""directory"", ""when"", ""you"", ""str"", ""s"", ""not"", ""currently"", ""registered"", ""with"", ""lcproc"", ""sigclip"", ""float"", ""or"", ""int"", ""or"", ""sequence"", ""of"", ""two"", ""floats"", ""ints"", ""or"", ""none"", ""if"", ""a"", ""single"", ""float"", ""or"", ""int"", ""a"", ""symmetric"", ""sigma"", ""clip"", ""will"", ""be"", ""performed"", ""using"", ""the"", ""number"", ""provided"", ""as"", ""the"", ""sigma"", ""multiplier"", ""to"", ""cut"", ""out"", ""from"", ""the"", ""input"", ""time"", ""series"", ""if"", ""a"", ""list"", ""of"", ""two"", ""ints"", ""floats"", ""is"", ""provided"", ""the"", ""function"", ""will"", ""perform"", ""an"", ""str"", ""sigma"", ""clip"", ""the"", ""first"", ""element"", ""in"", ""this"", ""list"", ""is"", ""the"", ""sigma"", ""value"", ""to"", ""use"", ""for"", ""fainter"", ""flux"", ""mag"", ""values"", ""the"", ""second"", ""element"", ""in"", ""this"", ""list"", ""is"", ""the"", ""sigma"", ""value"", ""to"", ""use"", ""for"", ""brighter"", ""flux"", ""mag"", ""values"", ""for"", ""example"", ""str"", ""will"", ""sigclip"", ""out"", ""greater"", ""than"", ""num"", ""sigma"", ""dimmings"", ""and"", ""greater"", ""than"", ""num"", ""sigma"", ""brightenings"", ""here"", ""the"", ""meaning"", ""of"", ""str"", ""and"", ""str"", ""is"", ""set"", ""by"", ""physics"", ""not"", ""the"", ""magnitude"", ""system"", ""which"", ""is"", ""why"", ""the"", ""str"", ""kwarg"", ""must"", ""be"", ""correctly"", ""set"", ""if"", ""str"", ""is"", ""none"", ""no"", ""sigma"", ""clipping"", ""will"", ""be"", ""performed"", ""and"", ""the"", ""time"", ""series"", ""with"", ""non"", ""finite"", ""elems"", ""removed"", ""will"", ""be"", ""passed"", ""through"", ""to"", ""the"", ""output"", ""verbose"", ""bool"", ""if"", ""true"", ""will"", ""indicate"", ""progress"", ""while"", ""working"", ""maxobjects"", ""int"", ""the"", ""total"", ""number"", ""of"", ""objects"", ""to"", ""process"", ""from"", ""str"", ""returns"", ""nothing""]"
420,"The action text, with any hyperlinked related entities.","[""the"", ""action"", ""text"", ""with"", ""any"", ""hyperlinked"", ""related"", ""entities""]"
421,"Function which updates the thumbnail for a particular video object with a locally saved image.

    :param api_key: <string> JWPlatform api-key
    :param api_secret: <string> JWPlatform shared-secret
    :param video_key: <string> Video's object ID. Can be found within JWPlayer Dashboard.
    :param local_video_image_path: <string> Local system path to an image.
    :param api_format: <string> REQUIRED Acceptable values include 'py','xml','json',and 'php'
    :param kwargs: Arguments conforming to standards found @ https://developer.jwplayer.com/jw-platform/reference/v1/methods/videos/thumbnails/update.html
    :return: <dict> Dict which represents the JSON response.","[""function"", ""which"", ""updates"", ""the"", ""thumbnail"", ""for"", ""a"", ""particular"", ""video"", ""object"", ""with"", ""a"", ""locally"", ""saved"", ""image"", ""param"", ""api"", ""key"", ""string"", ""jw"", ""platform"", ""api"", ""key"", ""param"", ""api"", ""secret"", ""string"", ""jw"", ""platform"", ""shared"", ""secret"", ""param"", ""video"", ""key"", ""string"", ""video"", ""str"", ""py"", ""str"", ""xml"", ""str"", ""json"", ""str"", ""php"", ""param"", ""kwargs"", ""arguments"", ""conforming"", ""to"", ""standards"", ""found"", ""https"", ""developer"", ""jwplayer"", ""com"", ""jw"", ""platform"", ""reference"", ""v"", ""1"", ""methods"", ""videos"", ""thumbnails"", ""update"", ""html"", ""return"", ""dict"", ""dict"", ""which"", ""represents"", ""the"", ""json"", ""response""]"
422,"Extracts database dump from given database URL and outputs sanitized
    copy of it into given stream.

    :param url: URL to the database which is to be sanitized.
    :type url: str

    :param output: Stream where sanitized copy of the database dump will be
                   written into.
    :type output: file

    :param config: Optional sanitizer configuration to be used for sanitation
                   of the values stored in the database.
    :type config: database_sanitizer.config.Configuration|None","[""extracts"", ""database"", ""dump"", ""from"", ""given"", ""database"", ""url"", ""and"", ""outputs"", ""sanitized"", ""copy"", ""of"", ""it"", ""into"", ""given"", ""stream"", ""param"", ""url"", ""url"", ""to"", ""the"", ""database"", ""which"", ""is"", ""to"", ""be"", ""sanitized"", ""type"", ""url"", ""str"", ""param"", ""output"", ""stream"", ""where"", ""sanitized"", ""copy"", ""of"", ""the"", ""database"", ""dump"", ""will"", ""be"", ""written"", ""into"", ""type"", ""output"", ""file"", ""param"", ""config"", ""optional"", ""sanitizer"", ""configuration"", ""to"", ""be"", ""used"", ""for"", ""sanitation"", ""of"", ""the"", ""values"", ""stored"", ""in"", ""the"", ""database"", ""type"", ""config"", ""database"", ""sanitizer"", ""config"", ""configuration"", ""none""]"
423,"Return the Noise Power Spectrum (NPS).

    The NPS is given by the squared magnitude of the Fourier transform of the
    noise.

    Parameters
    ----------
    data : `DiscreteLpElement` or `array-like`
        Input data to compare to the ground truth. If not a
        `DiscreteLpElement`, a default space with cell size 1 will be assumed.
    ground_truth : `array-like`
        Reference to which ``data`` should be compared.
    radial : bool
        If ``True``, compute the radial NPS.
    radial_binning_factor : positive float, optional
        Reduce the number of radial bins by this factor. Increasing this
        number can help reducing fluctuations due to the variance of points
        that fall in a particular annulus.
        A binning factor of ``1`` corresponds to a bin size equal to
        image pixel size for images with square pixels, otherwise ::

            max(norm2(c)) / norm2(shape)

        where the maximum is taken over all corners of the image domain.

    Returns
    -------
    noise_power_spectrum : `DiscreteLp`-element
        The space is the Fourier space corresponding to ``space``, and
        hence the axes indicate frequency.
        If ``radial`` is ``True``, an average over concentric annuli is
        taken. The result is an element of a one-dimensional space with
        domain ``[0, rmax]``, where ``rmax`` is the radius of the smallest
        ball containing ``space.domain``. Its shape is ``(N,)`` with ::

            N = int(sqrt(sum(n ** 2 for n in image.shape)) / binning_factor)","[""return"", ""the"", ""noise"", ""power"", ""spectrum"", ""nps"", ""the"", ""nps"", ""is"", ""given"", ""by"", ""the"", ""squared"", ""magnitude"", ""of"", ""the"", ""fourier"", ""transform"", ""of"", ""the"", ""noise"", ""parameters"", ""data"", ""str"", ""or"", ""str"", ""input"", ""data"", ""to"", ""compare"", ""to"", ""the"", ""ground"", ""truth"", ""if"", ""not"", ""a"", ""str"", ""a"", ""default"", ""space"", ""with"", ""cell"", ""size"", ""num"", ""will"", ""be"", ""assumed"", ""ground"", ""truth"", ""str"", ""reference"", ""to"", ""which"", ""str"", ""data"", ""str"", ""should"", ""be"", ""compared"", ""radial"", ""bool"", ""if"", ""str"", ""true"", ""str"", ""compute"", ""the"", ""radial"", ""nps"", ""radial"", ""binning"", ""factor"", ""positive"", ""float"", ""optional"", ""reduce"", ""the"", ""number"", ""of"", ""radial"", ""bins"", ""by"", ""this"", ""factor"", ""increasing"", ""this"", ""number"", ""can"", ""help"", ""reducing"", ""fluctuations"", ""due"", ""to"", ""the"", ""variance"", ""of"", ""points"", ""that"", ""fall"", ""in"", ""a"", ""particular"", ""annulus"", ""a"", ""binning"", ""factor"", ""of"", ""str"", ""num"", ""str"", ""corresponds"", ""to"", ""a"", ""bin"", ""size"", ""equal"", ""to"", ""image"", ""pixel"", ""size"", ""for"", ""images"", ""with"", ""square"", ""pixels"", ""otherwise"", ""max"", ""norm"", ""2"", ""c"", ""norm"", ""2"", ""shape"", ""where"", ""the"", ""maximum"", ""is"", ""taken"", ""over"", ""all"", ""corners"", ""of"", ""the"", ""image"", ""domain"", ""returns"", ""noise"", ""power"", ""spectrum"", ""str"", ""element"", ""the"", ""space"", ""is"", ""the"", ""fourier"", ""space"", ""corresponding"", ""to"", ""str"", ""space"", ""str"", ""and"", ""hence"", ""the"", ""axes"", ""indicate"", ""frequency"", ""if"", ""str"", ""radial"", ""str"", ""is"", ""str"", ""true"", ""str"", ""an"", ""average"", ""over"", ""concentric"", ""annuli"", ""is"", ""taken"", ""the"", ""result"", ""is"", ""an"", ""element"", ""of"", ""a"", ""one"", ""dimensional"", ""space"", ""with"", ""domain"", ""str"", ""num"", ""rmax"", ""str"", ""where"", ""str"", ""rmax"", ""str"", ""is"", ""the"", ""radius"", ""of"", ""the"", ""smallest"", ""ball"", ""containing"", ""str"", ""space"", ""domain"", ""str"", ""its"", ""shape"", ""is"", ""str"", ""n"", ""str"", ""with"", ""n"", ""int"", ""sqrt"", ""sum"", ""n"", ""num"", ""for"", ""n"", ""in"", ""image"", ""shape"", ""binning"", ""factor""]"
424,"Plot accuracy and loss from a panda's dataframe.

    Args:
        data: Panda dataframe in the format of the Keras CSV log.
        output_dir_path: The path to the directory where the resultings plots
            should end up.","[""plot"", ""accuracy"", ""and"", ""loss"", ""from"", ""a"", ""panda"", ""s"", ""dataframe"", ""args"", ""data"", ""panda"", ""dataframe"", ""in"", ""the"", ""format"", ""of"", ""the"", ""keras"", ""csv"", ""log"", ""output"", ""dir"", ""path"", ""the"", ""path"", ""to"", ""the"", ""directory"", ""where"", ""the"", ""resultings"", ""plots"", ""should"", ""end"", ""up""]"
425,"Matplotlib patch object for this region (`matplotlib.patches.Polygon`).

        Parameters:
        -----------
        origin : array_like, optional
            The ``(x, y)`` pixel position of the origin of the displayed image.
            Default is (0, 0).
        kwargs : `dict`
            All keywords that a `~matplotlib.patches.Polygon` object accepts

        Returns
        -------
        patch : `~matplotlib.patches.Polygon`
            Matplotlib polygon patch","[""matplotlib"", ""patch"", ""object"", ""for"", ""this"", ""region"", ""str"", ""parameters"", ""origin"", ""array"", ""like"", ""optional"", ""the"", ""str"", ""x"", ""y"", ""str"", ""pixel"", ""position"", ""of"", ""the"", ""origin"", ""of"", ""the"", ""displayed"", ""image"", ""default"", ""is"", ""num"", ""num"", ""kwargs"", ""str"", ""all"", ""keywords"", ""that"", ""a"", ""str"", ""object"", ""accepts"", ""returns"", ""patch"", ""str"", ""matplotlib"", ""polygon"", ""patch""]"
426,"Returns all fixations that are on this image.
        A precondition for this to work is that a fixmat 
        is associated with this Image object.","[""returns"", ""all"", ""fixations"", ""that"", ""are"", ""on"", ""this"", ""image"", ""a"", ""precondition"", ""for"", ""this"", ""to"", ""work"", ""is"", ""that"", ""a"", ""fixmat"", ""is"", ""associated"", ""with"", ""this"", ""image"", ""object""]"
427,Simple function that adds fixed colors depending on the class,"[""simple"", ""function"", ""that"", ""adds"", ""fixed"", ""colors"", ""depending"", ""on"", ""the"", ""class""]"
428,"Generate a ``tuple`` object for each leaf category in this
        collection, containing the leaf category followed by its ""parent""
        categories, e.g. ``('San Francisco', 'CA', 'USA'). Each tuple will be
        the same length as the number of levels (excepting certain edge
        cases which I believe always indicate a chart construction error).","[""generate"", ""a"", ""str"", ""tuple"", ""str"", ""object"", ""for"", ""each"", ""leaf"", ""category"", ""in"", ""this"", ""collection"", ""containing"", ""the"", ""leaf"", ""category"", ""followed"", ""by"", ""its"", ""str"", ""categories"", ""e"", ""g"", ""str"", ""str"", ""str"", ""str"", ""each"", ""tuple"", ""will"", ""be"", ""the"", ""same"", ""length"", ""as"", ""the"", ""number"", ""of"", ""levels"", ""excepting"", ""certain"", ""edge"", ""cases"", ""which"", ""i"", ""believe"", ""always"", ""indicate"", ""a"", ""chart"", ""construction"", ""error""]"
429,"Sends the url with parameters to the requested url, validating them
        to make sure that they are what we expect to have passed to us

        :param method: a string, the request method you want to make
        :param params: a dict, the parameters used for the API request
        :param valid_parameters: a list, the list of valid parameters
        :param needs_api_key: a boolean, whether or not your request needs an api key injected

        :returns: a dict parsed from the JSON response","[""sends"", ""the"", ""url"", ""with"", ""parameters"", ""to"", ""the"", ""requested"", ""url"", ""validating"", ""them"", ""to"", ""make"", ""sure"", ""that"", ""they"", ""are"", ""what"", ""we"", ""expect"", ""to"", ""have"", ""passed"", ""to"", ""us"", ""param"", ""method"", ""a"", ""string"", ""the"", ""request"", ""method"", ""you"", ""want"", ""to"", ""make"", ""param"", ""params"", ""a"", ""dict"", ""the"", ""parameters"", ""used"", ""for"", ""the"", ""api"", ""request"", ""param"", ""valid"", ""parameters"", ""a"", ""list"", ""the"", ""list"", ""of"", ""valid"", ""parameters"", ""param"", ""needs"", ""api"", ""key"", ""a"", ""boolean"", ""whether"", ""or"", ""not"", ""your"", ""request"", ""needs"", ""an"", ""api"", ""key"", ""injected"", ""returns"", ""a"", ""dict"", ""parsed"", ""from"", ""the"", ""json"", ""response""]"
430,Read points from istream and output to ostream.,"[""read"", ""points"", ""from"", ""istream"", ""and"", ""output"", ""to"", ""ostream""]"
431,"Set/create link with specified rel, set href and any other attributes.

        Any link element must have both rel and href values, the specification
        also defines the type attributes and others are permitted also. See
        description of allowed formats in

        http://www.openarchives.org/rs/resourcesync.html#DocumentFormats

        Be aware that adding links to a Resource object will
        significantly increase the size of the object.","[""set"", ""create"", ""link"", ""with"", ""specified"", ""rel"", ""set"", ""href"", ""and"", ""any"", ""other"", ""attributes"", ""any"", ""link"", ""element"", ""must"", ""have"", ""both"", ""rel"", ""and"", ""href"", ""values"", ""the"", ""specification"", ""also"", ""defines"", ""the"", ""type"", ""attributes"", ""and"", ""others"", ""are"", ""permitted"", ""also"", ""see"", ""description"", ""of"", ""allowed"", ""formats"", ""in"", ""http"", ""www"", ""openarchives"", ""org"", ""rs"", ""resourcesync"", ""html"", ""document"", ""formats"", ""be"", ""aware"", ""that"", ""adding"", ""links"", ""to"", ""a"", ""resource"", ""object"", ""will"", ""significantly"", ""increase"", ""the"", ""size"", ""of"", ""the"", ""object""]"
432,"Sets the type of this AggregatedQuotaUsageReport.
        Type of quota usage entry.

        :param type: The type of this AggregatedQuotaUsageReport.
        :type: str","[""sets"", ""the"", ""type"", ""of"", ""this"", ""aggregated"", ""quota"", ""usage"", ""report"", ""type"", ""of"", ""quota"", ""usage"", ""entry"", ""param"", ""type"", ""the"", ""type"", ""of"", ""this"", ""aggregated"", ""quota"", ""usage"", ""report"", ""type"", ""str""]"
433,"Transforms one or multiple columns into rows.
    Unlike melt function, two value columns can be returned by
    the function (e.g. an evolution column and a price column)

    ---

    ### Parameters

    *mandatory :*
    - `first_value_vars` (*list of str*): name of the columns corresponding to the first returned value column
    - `second_value_vars` (*list of str*): name of the columns corresponding to the second returned value column
    - `var_name` (*str*): name of the column containing values in first_value_vars
    - `value_name` (*str*): suffix of the two value columns (suffix_first / suffix_second)
    ---

    ### Example

    **Input**

    |    Region |      avg |       total |  evo_avg |   evo_total |
    |:---------:|:--------:|:-----------:|:--------:|:-----------:|
    |         A |        50|         100 |        1 |           4 |
    |         B |       40 |         250 |        2 |           5 |


    ```cson
    two_values_melt:
      first_value_vars: [""avg"", ""total""]
      second_value_vars: [""evo_avg"", ""evo_total""]
      var_name: ""type""
      value_name: ""value""
    ```

    **Output**

    |    Region |     type |  value_first |  value_second |
    |:---------:|:--------:|:------------:|:-------------:|
    |         A |       avg|           50 |             1 |
    |         A |     total|          100 |             4 |
    |         B |       avg|           40 |             2 |
    |         B |       avg|          250 |             5 |","[""transforms"", ""one"", ""or"", ""multiple"", ""columns"", ""into"", ""rows"", ""unlike"", ""melt"", ""function"", ""two"", ""value"", ""columns"", ""can"", ""be"", ""returned"", ""by"", ""the"", ""function"", ""e"", ""g"", ""an"", ""evolution"", ""column"", ""and"", ""a"", ""price"", ""column"", ""parameters"", ""mandatory"", ""str"", ""list"", ""of"", ""str"", ""name"", ""of"", ""the"", ""columns"", ""corresponding"", ""to"", ""the"", ""first"", ""returned"", ""value"", ""column"", ""str"", ""list"", ""of"", ""str"", ""name"", ""of"", ""the"", ""columns"", ""corresponding"", ""to"", ""the"", ""second"", ""returned"", ""value"", ""column"", ""str"", ""str"", ""name"", ""of"", ""the"", ""column"", ""containing"", ""values"", ""in"", ""first"", ""value"", ""vars"", ""str"", ""str"", ""suffix"", ""of"", ""the"", ""two"", ""value"", ""columns"", ""suffix"", ""first"", ""suffix"", ""second"", ""example"", ""input"", ""region"", ""avg"", ""total"", ""evo"", ""avg"", ""evo"", ""total"", ""a"", ""num"", ""num"", ""num"", ""num"", ""b"", ""num"", ""num"", ""num"", ""num"", ""str"", ""str"", ""str"", ""output"", ""region"", ""type"", ""value"", ""first"", ""value"", ""second"", ""a"", ""avg"", ""num"", ""num"", ""a"", ""total"", ""num"", ""num"", ""b"", ""avg"", ""num"", ""num"", ""b"", ""avg"", ""num"", ""num""]"
434,"Construct an ArrayList instance from an existing base dataset

        Parameters
        ----------
        %(ArrayList.from_dataset.parameters)s
        main: Project
            The main project that this project corresponds to

        Other Parameters
        ----------------
        %(ArrayList.from_dataset.other_parameters)s

        Returns
        -------
        Project
            The newly created project instance","[""construct"", ""an"", ""array"", ""list"", ""instance"", ""from"", ""an"", ""existing"", ""base"", ""dataset"", ""parameters"", ""array"", ""list"", ""from"", ""dataset"", ""parameters"", ""s"", ""main"", ""project"", ""the"", ""main"", ""project"", ""that"", ""this"", ""project"", ""corresponds"", ""to"", ""other"", ""parameters"", ""array"", ""list"", ""from"", ""dataset"", ""other"", ""parameters"", ""s"", ""returns"", ""project"", ""the"", ""newly"", ""created"", ""project"", ""instance""]"
435,Set the attack strength for the given policies.,"[""set"", ""the"", ""attack"", ""strength"", ""for"", ""the"", ""given"", ""policies""]"
436,Return the script as a string for the specific os,"[""return"", ""the"", ""script"", ""as"", ""a"", ""string"", ""for"", ""the"", ""specific"", ""os""]"
437,"Sets the authentication service
        :param auth_service: BaseAuthService Authentication service
        :raises: TypeError If the auth_service object is not a subclass of rinzler.auth.BaseAuthService
        :rtype: Rinzler","[""sets"", ""the"", ""authentication"", ""service"", ""param"", ""auth"", ""service"", ""base"", ""auth"", ""service"", ""authentication"", ""service"", ""raises"", ""type"", ""error"", ""if"", ""the"", ""auth"", ""service"", ""object"", ""is"", ""not"", ""a"", ""subclass"", ""of"", ""rinzler"", ""auth"", ""base"", ""auth"", ""service"", ""rtype"", ""rinzler""]"
438,"D.listdir() -> List of items in this directory.

        Use D.files() or D.dirs() instead if you want a listing
        of just files or just subdirectories.

        The elements of the list are path objects.

        With the optional 'pattern' argument, this only lists
        items whose names match the given pattern.","[""d"", ""listdir"", ""list"", ""of"", ""items"", ""in"", ""this"", ""directory"", ""use"", ""d"", ""files"", ""or"", ""d"", ""dirs"", ""instead"", ""if"", ""you"", ""want"", ""a"", ""listing"", ""of"", ""just"", ""files"", ""or"", ""just"", ""subdirectories"", ""the"", ""elements"", ""of"", ""the"", ""list"", ""are"", ""path"", ""objects"", ""with"", ""the"", ""optional"", ""str"", ""argument"", ""this"", ""only"", ""lists"", ""items"", ""whose"", ""names"", ""match"", ""the"", ""given"", ""pattern""]"
439,"Builds and returns the WHERE portion of the sql

        :return: the WHERE portion of the sql
        :rtype: str","[""builds"", ""and"", ""returns"", ""the"", ""where"", ""portion"", ""of"", ""the"", ""sql"", ""return"", ""the"", ""where"", ""portion"", ""of"", ""the"", ""sql"", ""rtype"", ""str""]"
440,"Set or create a :class:`Content <pages.models.Content>` for a
        particular page and language.

        :param page: the concerned page object.
        :param language: the wanted language.
        :param ctype: the content type.
        :param body: the content of the Content object.","[""set"", ""or"", ""create"", ""a"", ""class"", ""str"", ""for"", ""a"", ""particular"", ""page"", ""and"", ""language"", ""param"", ""page"", ""the"", ""concerned"", ""page"", ""object"", ""param"", ""language"", ""the"", ""wanted"", ""language"", ""param"", ""ctype"", ""the"", ""content"", ""type"", ""param"", ""body"", ""the"", ""content"", ""of"", ""the"", ""content"", ""object""]"
441,"Open a file, downloading it first if it does not yet exist.

        Unlike when you call a loader directly like ``my_loader()``,
        this ``my_loader.open()`` method does not attempt to parse or
        interpret the file; it simply returns an open file object.

        The ``url`` can be either an external URL, or else the path to a
        file on the current filesystem.  A relative path will be assumed
        to be relative to the base directory of this loader object.

        If a URL was provided and the ``reload`` parameter is true, then
        any existing file will be removed before the download starts.

        The ``filename`` parameter lets you specify an alternative local
        filename instead of having the filename extracted from the final
        component of the URL.","[""open"", ""a"", ""file"", ""downloading"", ""it"", ""first"", ""if"", ""it"", ""does"", ""not"", ""yet"", ""exist"", ""unlike"", ""when"", ""you"", ""call"", ""a"", ""loader"", ""directly"", ""like"", ""str"", ""my"", ""loader"", ""str"", ""this"", ""str"", ""my"", ""loader"", ""open"", ""str"", ""method"", ""does"", ""not"", ""attempt"", ""to"", ""parse"", ""or"", ""interpret"", ""the"", ""file"", ""it"", ""simply"", ""returns"", ""an"", ""open"", ""file"", ""object"", ""the"", ""str"", ""url"", ""str"", ""can"", ""be"", ""either"", ""an"", ""external"", ""url"", ""or"", ""else"", ""the"", ""path"", ""to"", ""a"", ""file"", ""on"", ""the"", ""current"", ""filesystem"", ""a"", ""relative"", ""path"", ""will"", ""be"", ""assumed"", ""to"", ""be"", ""relative"", ""to"", ""the"", ""base"", ""directory"", ""of"", ""this"", ""loader"", ""object"", ""if"", ""a"", ""url"", ""was"", ""provided"", ""and"", ""the"", ""str"", ""reload"", ""str"", ""parameter"", ""is"", ""true"", ""then"", ""any"", ""existing"", ""file"", ""will"", ""be"", ""removed"", ""before"", ""the"", ""download"", ""starts"", ""the"", ""str"", ""filename"", ""str"", ""parameter"", ""lets"", ""you"", ""specify"", ""an"", ""alternative"", ""local"", ""filename"", ""instead"", ""of"", ""having"", ""the"", ""filename"", ""extracted"", ""from"", ""the"", ""final"", ""component"", ""of"", ""the"", ""url""]"
442,Checks to see if this module uses Python's built-in logging.,"[""checks"", ""to"", ""see"", ""if"", ""this"", ""module"", ""uses"", ""python"", ""s"", ""built"", ""in"", ""logging""]"
443,scalar  : INDENT scalar_group DEDENT,"[""scalar"", ""indent"", ""scalar"", ""group"", ""dedent""]"
444,"Compute metrics in the overview section for enriched github issues
    indexes.
    Returns a dictionary. Each key in the dictionary is the name of
    a metric, the value is the value of that metric. Value can be
    a complex object (eg, a time series).

    :param index: index object
    :param start: date to apply the filters from
    :param end: date to apply the filters upto
    :return: dictionary with the value of the metrics","[""compute"", ""metrics"", ""in"", ""the"", ""overview"", ""section"", ""for"", ""enriched"", ""github"", ""issues"", ""indexes"", ""returns"", ""a"", ""dictionary"", ""each"", ""key"", ""in"", ""the"", ""dictionary"", ""is"", ""the"", ""name"", ""of"", ""a"", ""metric"", ""the"", ""value"", ""is"", ""the"", ""value"", ""of"", ""that"", ""metric"", ""value"", ""can"", ""be"", ""a"", ""complex"", ""object"", ""eg"", ""a"", ""time"", ""series"", ""param"", ""index"", ""index"", ""object"", ""param"", ""start"", ""date"", ""to"", ""apply"", ""the"", ""filters"", ""from"", ""param"", ""end"", ""date"", ""to"", ""apply"", ""the"", ""filters"", ""upto"", ""return"", ""dictionary"", ""with"", ""the"", ""value"", ""of"", ""the"", ""metrics""]"
445,"Returns an integer that is equal to the margin of victory of the election profile.

        :ivar Profile profile: A Profile object that represents an election profile.","[""returns"", ""an"", ""integer"", ""that"", ""is"", ""equal"", ""to"", ""the"", ""margin"", ""of"", ""victory"", ""of"", ""the"", ""election"", ""profile"", ""ivar"", ""profile"", ""profile"", ""a"", ""profile"", ""object"", ""that"", ""represents"", ""an"", ""election"", ""profile""]"
446,Reshapes x to the same shape as y.,"[""reshapes"", ""x"", ""to"", ""the"", ""same"", ""shape"", ""as"", ""y""]"
447,Make a trivial single-dispatch generic function,"[""make"", ""a"", ""trivial"", ""single"", ""dispatch"", ""generic"", ""function""]"
448,"Creates a type converter for a T with 0..1 times
        by using the type converter for one item of T.

        :param converter: Type converter (function) for data type T.
        :param pattern:  Regexp pattern for an item (=converter.pattern).
        :return: type-converter for optional<T> (T or None).","[""creates"", ""a"", ""type"", ""converter"", ""for"", ""a"", ""t"", ""with"", ""num"", ""num"", ""times"", ""by"", ""using"", ""the"", ""type"", ""converter"", ""for"", ""one"", ""item"", ""of"", ""t"", ""param"", ""converter"", ""type"", ""converter"", ""function"", ""for"", ""data"", ""type"", ""t"", ""param"", ""pattern"", ""regexp"", ""pattern"", ""for"", ""an"", ""item"", ""converter"", ""pattern"", ""return"", ""type"", ""converter"", ""for"", ""optional"", ""t"", ""t"", ""or"", ""none""]"
449,Logs out user and redirects them to Nexus home,"[""logs"", ""out"", ""user"", ""and"", ""redirects"", ""them"", ""to"", ""nexus"", ""home""]"
450,calculate the sum of histogram intersection of texture,"[""calculate"", ""the"", ""sum"", ""of"", ""histogram"", ""intersection"", ""of"", ""texture""]"
451,https://developer.zendesk.com/rest_api/docs/core/ticket_skips#list-skips-for-the-current-account,"[""https"", ""developer"", ""zendesk"", ""com"", ""rest"", ""api"", ""docs"", ""core"", ""ticket"", ""skips"", ""list"", ""skips"", ""for"", ""the"", ""current"", ""account""]"
452,".. versionadded:: 2016.11.0

    Used by :py:func:`file.get_managed <salt.modules.file.get_managed>` to
    obtain the hash and hash type from the parameters specified below.

    file_name
        Optional file name being managed, for matching with
        :py:func:`file.extract_hash <salt.modules.file.extract_hash>`.

    source
        Source file, as used in :py:mod:`file <salt.states.file>` and other
        states. If ``source_hash`` refers to a file containing hashes, then
        this filename will be used to match a filename in that file. If the
        ``source_hash`` is a hash expression, then this argument will be
        ignored.

    source_hash
        Hash file/expression, as used in :py:mod:`file <salt.states.file>` and
        other states. If this value refers to a remote URL or absolute path to
        a local file, it will be cached and :py:func:`file.extract_hash
        <salt.modules.file.extract_hash>` will be used to obtain a hash from
        it.

    source_hash_name
        Specific file name to look for when ``source_hash`` refers to a remote
        file, used to disambiguate ambiguous matches.

    saltenv : base
        Salt fileserver environment from which to retrieve the source_hash. This
        value will only be used when ``source_hash`` refers to a file on the
        Salt fileserver (i.e. one beginning with ``salt://``).

    CLI Example:

    .. code-block:: bash

        salt '*' file.get_source_sum /tmp/foo.tar.gz source=http://mydomain.tld/foo.tar.gz source_hash=499ae16dcae71eeb7c3a30c75ea7a1a6
        salt '*' file.get_source_sum /tmp/foo.tar.gz source=http://mydomain.tld/foo.tar.gz source_hash=https://mydomain.tld/hashes.md5
        salt '*' file.get_source_sum /tmp/foo.tar.gz source=http://mydomain.tld/foo.tar.gz source_hash=https://mydomain.tld/hashes.md5 source_hash_name=./dir2/foo.tar.gz","[""versionadded"", ""num"", ""num"", ""used"", ""by"", ""py"", ""func"", ""str"", ""to"", ""obtain"", ""the"", ""hash"", ""and"", ""hash"", ""type"", ""from"", ""the"", ""parameters"", ""specified"", ""below"", ""file"", ""name"", ""optional"", ""file"", ""name"", ""being"", ""managed"", ""for"", ""matching"", ""with"", ""py"", ""func"", ""str"", ""source"", ""source"", ""file"", ""as"", ""used"", ""in"", ""py"", ""mod"", ""str"", ""and"", ""other"", ""states"", ""if"", ""str"", ""source"", ""hash"", ""str"", ""refers"", ""to"", ""a"", ""file"", ""containing"", ""hashes"", ""then"", ""this"", ""filename"", ""will"", ""be"", ""used"", ""to"", ""match"", ""a"", ""filename"", ""in"", ""that"", ""file"", ""if"", ""the"", ""str"", ""source"", ""hash"", ""str"", ""is"", ""a"", ""hash"", ""expression"", ""then"", ""this"", ""argument"", ""will"", ""be"", ""ignored"", ""source"", ""hash"", ""hash"", ""file"", ""expression"", ""as"", ""used"", ""in"", ""py"", ""mod"", ""str"", ""and"", ""other"", ""states"", ""if"", ""this"", ""value"", ""refers"", ""to"", ""a"", ""remote"", ""url"", ""or"", ""absolute"", ""path"", ""to"", ""a"", ""local"", ""file"", ""it"", ""will"", ""be"", ""cached"", ""and"", ""py"", ""func"", ""str"", ""will"", ""be"", ""used"", ""to"", ""obtain"", ""a"", ""hash"", ""from"", ""it"", ""source"", ""hash"", ""name"", ""specific"", ""file"", ""name"", ""to"", ""look"", ""for"", ""when"", ""str"", ""source"", ""hash"", ""str"", ""refers"", ""to"", ""a"", ""remote"", ""file"", ""used"", ""to"", ""disambiguate"", ""ambiguous"", ""matches"", ""saltenv"", ""base"", ""salt"", ""fileserver"", ""environment"", ""from"", ""which"", ""to"", ""retrieve"", ""the"", ""source"", ""hash"", ""this"", ""value"", ""will"", ""only"", ""be"", ""used"", ""when"", ""str"", ""source"", ""hash"", ""str"", ""refers"", ""to"", ""a"", ""file"", ""on"", ""the"", ""salt"", ""fileserver"", ""i"", ""e"", ""one"", ""beginning"", ""with"", ""str"", ""salt"", ""str"", ""cli"", ""example"", ""code"", ""block"", ""bash"", ""salt"", ""str"", ""file"", ""get"", ""source"", ""sum"", ""tmp"", ""foo"", ""tar"", ""gz"", ""source"", ""http"", ""mydomain"", ""tld"", ""foo"", ""tar"", ""gz"", ""source"", ""hash"", ""ae"", ""16"", ""dcae"", ""71"", ""eeb"", ""7"", ""c"", ""3"", ""a"", ""30"", ""c"", ""75"", ""ea"", ""7"", ""a"", ""1"", ""a"", ""6"", ""salt"", ""str"", ""file"", ""get"", ""source"", ""sum"", ""tmp"", ""foo"", ""tar"", ""gz"", ""source"", ""http"", ""mydomain"", ""tld"", ""foo"", ""tar"", ""gz"", ""source"", ""hash"", ""https"", ""mydomain"", ""tld"", ""hashes"", ""md"", ""5"", ""salt"", ""str"", ""file"", ""get"", ""source"", ""sum"", ""tmp"", ""foo"", ""tar"", ""gz"", ""source"", ""http"", ""mydomain"", ""tld"", ""foo"", ""tar"", ""gz"", ""source"", ""hash"", ""https"", ""mydomain"", ""tld"", ""hashes"", ""md"", ""5"", ""source"", ""hash"", ""name"", ""dir"", ""2"", ""foo"", ""tar"", ""gz""]"
453,"**Description**
            Delete an existing image registry

        **Arguments**
            - registry: Full hostname/port of registry. Eg. myrepo.example.com:5000","[""description"", ""delete"", ""an"", ""existing"", ""image"", ""registry"", ""arguments"", ""registry"", ""full"", ""hostname"", ""port"", ""of"", ""registry"", ""eg"", ""myrepo"", ""example"", ""com"", ""num""]"
454,"Fetch an item by namespace and key

        Args:
            ns (str): Namespace prefix
            key (str): Item key

        Returns:
            :obj:`Configitem`: Returns config item object if found, else `None`","[""fetch"", ""an"", ""item"", ""by"", ""namespace"", ""and"", ""key"", ""args"", ""ns"", ""str"", ""namespace"", ""prefix"", ""key"", ""str"", ""item"", ""key"", ""returns"", ""obj"", ""str"", ""returns"", ""config"", ""item"", ""object"", ""if"", ""found"", ""else"", ""str""]"
455,"Perform post MD5 skip on check
        :param Uploader self: this
        :param str key: md5 map key
        :param bool md5_match: if MD5 matches","[""perform"", ""post"", ""md"", ""5"", ""skip"", ""on"", ""check"", ""param"", ""uploader"", ""self"", ""this"", ""param"", ""str"", ""key"", ""md"", ""5"", ""map"", ""key"", ""param"", ""bool"", ""md"", ""5"", ""match"", ""if"", ""md"", ""5"", ""matches""]"
456,"Sets the log level.
    Lower log levels log more.
    if level is 8, nothing is logged. If level is 0, everything is logged.","[""sets"", ""the"", ""log"", ""level"", ""lower"", ""log"", ""levels"", ""log"", ""more"", ""if"", ""level"", ""is"", ""num"", ""nothing"", ""is"", ""logged"", ""if"", ""level"", ""is"", ""num"", ""everything"", ""is"", ""logged""]"
457,"Find elements in the current context.

        Support:
            Android iOS Web(WebView)

        Args:
            using(str): The element location strategy.
            value(str): The value of the location strategy.

        Returns:
            Return a List<Element | None>, if no element matched, the list is empty.

        Raises:
            WebDriverException.","[""find"", ""elements"", ""in"", ""the"", ""current"", ""context"", ""support"", ""android"", ""i"", ""os"", ""web"", ""web"", ""view"", ""args"", ""using"", ""str"", ""the"", ""element"", ""location"", ""strategy"", ""value"", ""str"", ""the"", ""value"", ""of"", ""the"", ""location"", ""strategy"", ""returns"", ""return"", ""a"", ""list"", ""element"", ""none"", ""if"", ""no"", ""element"", ""matched"", ""the"", ""list"", ""is"", ""empty"", ""raises"", ""web"", ""driver"", ""exception""]"
458,"Switches the visible widget to the one named *display*

        :param: the name of the desired display to show
        :type: str","[""switches"", ""the"", ""visible"", ""widget"", ""to"", ""the"", ""one"", ""named"", ""display"", ""param"", ""the"", ""name"", ""of"", ""the"", ""desired"", ""display"", ""to"", ""show"", ""type"", ""str""]"
459,"Auxiliary function to rebin ndarray data.
    Source : http://www.scipy.org/Cookbook/Rebinning
        example usage:
        >>> a=rand(6,4); b=rebin(a,(3,2))","[""auxiliary"", ""function"", ""to"", ""rebin"", ""ndarray"", ""data"", ""source"", ""http"", ""www"", ""scipy"", ""org"", ""cookbook"", ""rebinning"", ""example"", ""usage"", ""a"", ""rand"", ""num"", ""num"", ""b"", ""rebin"", ""a"", ""num"", ""num""]"
460,"Load a file.

    File format is inferred from url. File retrieval strategy is inferred from
    URL. Returned object type is inferred from url extension.

    Args:
      url_or_handle: a (reachable) URL, or an already open file handle

    Raises:
      RuntimeError: If file extension or URL is not supported.","[""load"", ""a"", ""file"", ""file"", ""format"", ""is"", ""inferred"", ""from"", ""url"", ""file"", ""retrieval"", ""strategy"", ""is"", ""inferred"", ""from"", ""url"", ""returned"", ""object"", ""type"", ""is"", ""inferred"", ""from"", ""url"", ""extension"", ""args"", ""url"", ""or"", ""handle"", ""a"", ""reachable"", ""url"", ""or"", ""an"", ""already"", ""open"", ""file"", ""handle"", ""raises"", ""runtime"", ""error"", ""if"", ""file"", ""extension"", ""or"", ""url"", ""is"", ""not"", ""supported""]"
461,"Takes a list of explored parameters and finds unique parameter combinations.

    If parameter ranges are hashable operates in O(N), otherwise O(N**2).

    :param explored_parameters:

        List of **explored** parameters

    :return:

        List of tuples, first entry being the parameter values, second entry a list
        containing the run position of the unique combination.","[""takes"", ""a"", ""list"", ""of"", ""explored"", ""parameters"", ""and"", ""finds"", ""unique"", ""parameter"", ""combinations"", ""if"", ""parameter"", ""ranges"", ""are"", ""hashable"", ""operates"", ""in"", ""o"", ""n"", ""otherwise"", ""o"", ""n"", ""num"", ""param"", ""explored"", ""parameters"", ""list"", ""of"", ""explored"", ""parameters"", ""return"", ""list"", ""of"", ""tuples"", ""first"", ""entry"", ""being"", ""the"", ""parameter"", ""values"", ""second"", ""entry"", ""a"", ""list"", ""containing"", ""the"", ""run"", ""position"", ""of"", ""the"", ""unique"", ""combination""]"
462,Verify that the checks versions are in sync with the requirements-agent-release.txt file,"[""verify"", ""that"", ""the"", ""checks"", ""versions"", ""are"", ""in"", ""sync"", ""with"", ""the"", ""requirements"", ""agent"", ""release"", ""txt"", ""file""]"
463,"Remove the specified kernel module

    mod
        Name of module to remove

    persist
        Also remove module from /boot/loader.conf

    comment
        If persist is set don't remove line from /boot/loader.conf but only
        comment it

    CLI Example:

    .. code-block:: bash

        salt '*' kmod.remove vmm","[""remove"", ""the"", ""specified"", ""kernel"", ""module"", ""mod"", ""name"", ""of"", ""module"", ""to"", ""remove"", ""persist"", ""also"", ""remove"", ""module"", ""from"", ""boot"", ""loader"", ""conf"", ""comment"", ""if"", ""persist"", ""is"", ""set"", ""don"", ""str"", ""kmod"", ""remove"", ""vmm""]"
464,"Gets Child Managed Object from UCS.

		- in_mo, if provided, it acts as a parent for the present operation. (required if in_dn is None).
		- in_dn, parent mo dn (required if in_mo is None)
		- class_id of the managed object/s to get.(optional)
		- in_hierarchical, Explores hierarchy if true, else returns managed objects at a single level.(optional)","[""gets"", ""child"", ""managed"", ""object"", ""from"", ""ucs"", ""in"", ""mo"", ""if"", ""provided"", ""it"", ""acts"", ""as"", ""a"", ""parent"", ""for"", ""the"", ""present"", ""operation"", ""required"", ""if"", ""in"", ""dn"", ""is"", ""none"", ""in"", ""dn"", ""parent"", ""mo"", ""dn"", ""required"", ""if"", ""in"", ""mo"", ""is"", ""none"", ""class"", ""id"", ""of"", ""the"", ""managed"", ""object"", ""s"", ""to"", ""get"", ""optional"", ""in"", ""hierarchical"", ""explores"", ""hierarchy"", ""if"", ""true"", ""else"", ""returns"", ""managed"", ""objects"", ""at"", ""a"", ""single"", ""level"", ""optional""]"
465,"After mark_tokens() has been called, returns the (startpos, endpos) positions in source text
    corresponding to the given node. Returns (0, 0) for nodes (like `Load`) that don't correspond
    to any particular text.","[""after"", ""mark"", ""tokens"", ""has"", ""been"", ""called"", ""returns"", ""the"", ""startpos"", ""endpos"", ""positions"", ""in"", ""source"", ""text"", ""corresponding"", ""to"", ""the"", ""given"", ""node"", ""returns"", ""num"", ""num"", ""for"", ""nodes"", ""like"", ""str"", ""that"", ""don"", ""t"", ""correspond"", ""to"", ""any"", ""particular"", ""text""]"
466,"Assign the primary unicode to the glyph.
        This will be an integer or None.

        Subclasses may override this method.","[""assign"", ""the"", ""primary"", ""unicode"", ""to"", ""the"", ""glyph"", ""this"", ""will"", ""be"", ""an"", ""integer"", ""or"", ""none"", ""subclasses"", ""may"", ""override"", ""this"", ""method""]"
467,Explicit Abode login.,"[""explicit"", ""abode"", ""login""]"
468,"Create a callable that will take the string value of a header and cast it
    to the appropriate type.  This can involve:

    - splitting a header of type 'array' by its delimeters.
    - type casting the internal elements of the array.","[""create"", ""a"", ""callable"", ""that"", ""will"", ""take"", ""the"", ""string"", ""value"", ""of"", ""a"", ""header"", ""and"", ""cast"", ""it"", ""to"", ""the"", ""appropriate"", ""type"", ""this"", ""can"", ""involve"", ""splitting"", ""a"", ""header"", ""of"", ""type"", ""str"", ""by"", ""its"", ""delimeters"", ""type"", ""casting"", ""the"", ""internal"", ""elements"", ""of"", ""the"", ""array""]"
469,Returns True if given `ipv6_prefix` is a valid IPv6 prefix.,"[""returns"", ""true"", ""if"", ""given"", ""str"", ""is"", ""a"", ""valid"", ""i"", ""pv"", ""6"", ""prefix""]"
470,"Parse /proc/mdstat.

        File format:
        The first line is the ""Personalities"" line.
        It won't get parsed since it contains only string metrics.
        The second to second-last lines contain raid array information.
        The last line contains the unused devices.
        It won't get parsed since it contains only string metrics.

        :return: Parsed information
        :rtype: dict","[""parse"", ""proc"", ""mdstat"", ""file"", ""format"", ""the"", ""first"", ""line"", ""is"", ""the"", ""str"", ""line"", ""it"", ""won"", ""str"", ""t"", ""get"", ""parsed"", ""since"", ""it"", ""contains"", ""only"", ""string"", ""metrics"", ""return"", ""parsed"", ""information"", ""rtype"", ""dict""]"
471,"Return a string representation of the actual |anntools.ANN| object
        that is prefixed with the given string.","[""return"", ""a"", ""string"", ""representation"", ""of"", ""the"", ""actual"", ""anntools"", ""ann"", ""object"", ""that"", ""is"", ""prefixed"", ""with"", ""the"", ""given"", ""string""]"
472,"Read ``num`` number of bits from the stream

        :num: number of bits to read
        :returns: a list of ``num`` bits, or an empty list if EOF has been reached","[""read"", ""str"", ""num"", ""str"", ""number"", ""of"", ""bits"", ""from"", ""the"", ""stream"", ""num"", ""number"", ""of"", ""bits"", ""to"", ""read"", ""returns"", ""a"", ""list"", ""of"", ""str"", ""num"", ""str"", ""bits"", ""or"", ""an"", ""empty"", ""list"", ""if"", ""eof"", ""has"", ""been"", ""reached""]"
473,"Serialize input expr into a parsable value.

    :rtype: str","[""serialize"", ""input"", ""expr"", ""into"", ""a"", ""parsable"", ""value"", ""rtype"", ""str""]"
474,Returns the integer width of help lines that is used in TextWrap.,"[""returns"", ""the"", ""integer"", ""width"", ""of"", ""help"", ""lines"", ""that"", ""is"", ""used"", ""in"", ""text"", ""wrap""]"
475,"r""""""Eliminate diagonally dominance.

    Helper function that eliminates diagonally dominant rows and cols from A
    in the separate matrix C.  This is useful because it eliminates nodes in C
    which we don't want coarsened.  These eliminated nodes in C just become
    the rows and columns of the identity.

    Parameters
    ----------
    A : {csr_matrix, bsr_matrix}
        Sparse NxN matrix
    C : {csr_matrix}
        Sparse MxM matrix, where M is the number of nodes in A.  M=N if A
        is CSR or is BSR with blocksize 1.  Otherwise M = N/blocksize.
    theta : {float}
        determines diagonal dominance threshhold

    Returns
    -------
    C : {csr_matrix}
        C updated such that the rows and columns corresponding to diagonally
        dominant rows in A have been eliminated and replaced with rows and
        columns of the identity.

    Notes
    -----
    Diagonal dominance is defined as
    :math:`\| (e_i, A) - a_{ii} \|_1  <  \\theta a_{ii}`
    that is, the 1-norm of the off diagonal elements in row i must be less than
    theta times the diagonal element.

    Examples
    --------
    >>> from pyamg.gallery import poisson
    >>> from pyamg.util.utils import eliminate_diag_dom_nodes
    >>> A = poisson( (4,), format='csr' )
    >>> C = eliminate_diag_dom_nodes(A, A.copy(), 1.1)
    >>> C.todense()
    matrix([[ 1.,  0.,  0.,  0.],
            [ 0.,  2., -1.,  0.],
            [ 0., -1.,  2.,  0.],
            [ 0.,  0.,  0.,  1.]])","[""r"", ""str"", ""eliminate"", ""diagonally"", ""dominance"", ""helper"", ""function"", ""that"", ""eliminates"", ""diagonally"", ""dominant"", ""rows"", ""and"", ""cols"", ""from"", ""a"", ""in"", ""the"", ""separate"", ""matrix"", ""c"", ""this"", ""is"", ""useful"", ""because"", ""it"", ""eliminates"", ""nodes"", ""in"", ""c"", ""which"", ""we"", ""don"", ""str"", ""csr"", ""c"", ""eliminate"", ""diag"", ""dom"", ""nodes"", ""a"", ""a"", ""copy"", ""num"", ""c"", ""todense"", ""matrix"", ""num"", ""num"", ""num"", ""num"", ""num"", ""num"", ""num"", ""num"", ""num"", ""num"", ""num"", ""num"", ""num"", ""num"", ""num"", ""num""]"
476,"Parameters:
     - db_name
     - tbl_name
     - part_vals
     - max_parts
     - user_name
     - group_names","[""parameters"", ""db"", ""name"", ""tbl"", ""name"", ""part"", ""vals"", ""max"", ""parts"", ""user"", ""name"", ""group"", ""names""]"
477,"Checks if the student's query returned a result.
    
    Args:
        incorrect_msg: If specified, this overrides the automatically generated feedback message
                       in case the student's query did not return a result.","[""checks"", ""if"", ""the"", ""student"", ""str"", ""s"", ""query"", ""did"", ""not"", ""return"", ""a"", ""result""]"
478,"Send _message_ to Graphite Server and attempt reconnect on failure.

        If _autoreconnect_ was specified, attempt to reconnect if first send
        fails.

        :raises AttributeError: When the socket has not been set.
        :raises socket.error: When the socket connection is no longer valid.","[""send"", ""message"", ""to"", ""graphite"", ""server"", ""and"", ""attempt"", ""reconnect"", ""on"", ""failure"", ""if"", ""autoreconnect"", ""was"", ""specified"", ""attempt"", ""to"", ""reconnect"", ""if"", ""first"", ""send"", ""fails"", ""raises"", ""attribute"", ""error"", ""when"", ""the"", ""socket"", ""has"", ""not"", ""been"", ""set"", ""raises"", ""socket"", ""error"", ""when"", ""the"", ""socket"", ""connection"", ""is"", ""no"", ""longer"", ""valid""]"
479,"Register a custom randering function with libtcod.

    Note:
        This callback will only be called by the SDL renderer.

    The callack will receive a :any:`CData <ffi-cdata>` void* to an
    SDL_Surface* struct.

    The callback is called on every call to :any:`tcod.console_flush`.

    Args:
        callback Callable[[CData], None]:
            A function which takes a single argument.","[""register"", ""a"", ""custom"", ""randering"", ""function"", ""with"", ""libtcod"", ""note"", ""this"", ""callback"", ""will"", ""only"", ""be"", ""called"", ""by"", ""the"", ""sdl"", ""renderer"", ""the"", ""callack"", ""will"", ""receive"", ""a"", ""any"", ""str"", ""void"", ""to"", ""an"", ""sdl"", ""surface"", ""struct"", ""the"", ""callback"", ""is"", ""called"", ""on"", ""every"", ""call"", ""to"", ""any"", ""str"", ""args"", ""callback"", ""callable"", ""c"", ""data"", ""none"", ""a"", ""function"", ""which"", ""takes"", ""a"", ""single"", ""argument""]"
480,"Load a config for a hostname or url.

        This method calls :func:`ftr_get_config` and :meth`append`
        internally. Refer to their docs for details on parameters.","[""load"", ""a"", ""config"", ""for"", ""a"", ""hostname"", ""or"", ""url"", ""this"", ""method"", ""calls"", ""func"", ""str"", ""and"", ""meth"", ""str"", ""internally"", ""refer"", ""to"", ""their"", ""docs"", ""for"", ""details"", ""on"", ""parameters""]"
481,decode the contents of the PDU and put them into the NPDU.,"[""decode"", ""the"", ""contents"", ""of"", ""the"", ""pdu"", ""and"", ""put"", ""them"", ""into"", ""the"", ""npdu""]"
482,"Shows the URL of the current cloud server or throws an error if no cloud
    server is selected","[""shows"", ""the"", ""url"", ""of"", ""the"", ""current"", ""cloud"", ""server"", ""or"", ""throws"", ""an"", ""error"", ""if"", ""no"", ""cloud"", ""server"", ""is"", ""selected""]"
483,"Takes a list of rows and a column and returns the max of the values under that column in
        those rows.","[""takes"", ""a"", ""list"", ""of"", ""rows"", ""and"", ""a"", ""column"", ""and"", ""returns"", ""the"", ""max"", ""of"", ""the"", ""values"", ""under"", ""that"", ""column"", ""in"", ""those"", ""rows""]"
484,Load the contents of the resource file ~/.uDMXrc,"[""load"", ""the"", ""contents"", ""of"", ""the"", ""resource"", ""file"", ""u"", ""dm"", ""xrc""]"
485,"Get the source of a column function.

    If a column is a registered Series and not a function then all that is
    returned is {'type': 'series'}.

    If the column is a registered function then the JSON returned has keys
    ""type"", ""filename"", ""lineno"", ""text"", and ""html"". ""text"" is the raw
    text of the function, ""html"" has been marked up by Pygments.","[""get"", ""the"", ""source"", ""of"", ""a"", ""column"", ""function"", ""if"", ""a"", ""column"", ""is"", ""a"", ""registered"", ""series"", ""and"", ""not"", ""a"", ""function"", ""then"", ""all"", ""that"", ""is"", ""returned"", ""is"", ""str"", ""str"", ""if"", ""the"", ""column"", ""is"", ""a"", ""registered"", ""function"", ""then"", ""the"", ""json"", ""returned"", ""has"", ""keys"", ""str"", ""str"", ""str"", ""str"", ""and"", ""str"", ""str"", ""is"", ""the"", ""raw"", ""text"", ""of"", ""the"", ""function"", ""str"", ""has"", ""been"", ""marked"", ""up"", ""by"", ""pygments""]"
486,annotation_comment : ANNOTATION_COMMENT TEXT,"[""annotation"", ""comment"", ""annotation"", ""comment"", ""text""]"
487,"Get current search or search from session, reset page if search is changed","[""get"", ""current"", ""search"", ""or"", ""search"", ""from"", ""session"", ""reset"", ""page"", ""if"", ""search"", ""is"", ""changed""]"
488,":type aws_access_key_id: string
    :param aws_access_key_id: Your AWS Access Key ID

    :type aws_secret_access_key: string
    :param aws_secret_access_key: Your AWS Secret Access Key

    :rtype: :class:`boto.dns.Route53Connection`
    :return: A connection to Amazon's Route53 DNS Service","[""type"", ""aws"", ""access"", ""key"", ""id"", ""string"", ""param"", ""aws"", ""access"", ""key"", ""id"", ""your"", ""aws"", ""access"", ""key"", ""id"", ""type"", ""aws"", ""secret"", ""access"", ""key"", ""string"", ""param"", ""aws"", ""secret"", ""access"", ""key"", ""your"", ""aws"", ""secret"", ""access"", ""key"", ""rtype"", ""class"", ""str"", ""return"", ""a"", ""connection"", ""to"", ""amazon"", ""s"", ""route"", ""53"", ""dns"", ""service""]"
489,return earth frame gyro vector,"[""return"", ""earth"", ""frame"", ""gyro"", ""vector""]"
490,Generate experiemnt URLs and print them to the console.,"[""generate"", ""experiemnt"", ""ur"", ""ls"", ""and"", ""print"", ""them"", ""to"", ""the"", ""console""]"
491,"restarts a dedicated process
    :return:","[""restarts"", ""a"", ""dedicated"", ""process"", ""return""]"
492,Same as wait_for_partial_link_text() - returns the element,"[""same"", ""as"", ""wait"", ""for"", ""partial"", ""link"", ""text"", ""returns"", ""the"", ""element""]"
493,Absolute system path to the node,"[""absolute"", ""system"", ""path"", ""to"", ""the"", ""node""]"
494,The main script,"[""the"", ""main"", ""script""]"
495,Start a new kernel.,"[""start"", ""a"", ""new"", ""kernel""]"
496,"Args:
            settings (dict): Dict to pop applicable fields from","[""args"", ""settings"", ""dict"", ""dict"", ""to"", ""pop"", ""applicable"", ""fields"", ""from""]"
497,"Get the balance of an account for a particular token
    Returns an int","[""get"", ""the"", ""balance"", ""of"", ""an"", ""account"", ""for"", ""a"", ""particular"", ""token"", ""returns"", ""an"", ""int""]"
498,Determine whether this range overlaps with another.,"[""determine"", ""whether"", ""this"", ""range"", ""overlaps"", ""with"", ""another""]"
499,"Converts sequence to list of elements.

        >>> type(seq([]).to_list())
        list

        >>> type(seq([]))
        functional.pipeline.Sequence

        >>> seq([1, 2, 3]).to_list()
        [1, 2, 3]

        :param n: Take n elements of sequence if not None
        :return: list of elements in sequence","[""converts"", ""sequence"", ""to"", ""list"", ""of"", ""elements"", ""type"", ""seq"", ""to"", ""list"", ""list"", ""type"", ""seq"", ""functional"", ""pipeline"", ""sequence"", ""seq"", ""num"", ""num"", ""num"", ""to"", ""list"", ""num"", ""num"", ""num"", ""param"", ""n"", ""take"", ""n"", ""elements"", ""of"", ""sequence"", ""if"", ""not"", ""none"", ""return"", ""list"", ""of"", ""elements"", ""in"", ""sequence""]"
500,"a helper function to construct a full prior covariance matrix using
    a mixture of geostastical structures and parameter bounds information.
    The covariance of parameters associated with geostatistical structures is defined
    as a mixture of GeoStruct and bounds.  That is, the GeoStruct is used to construct a
    pyemu.Cov, then the entire pyemu.Cov is scaled by the uncertainty implied by the bounds and
    sigma_range. Sounds complicated...

    Parameters
    ----------
    pst : pyemu.Pst
        a control file (or the name of control file)
    struct_dict : dict
        a python dict of GeoStruct (or structure file), and list of pp tpl files pairs
        If the values in the dict are pd.DataFrames, then they must have an
        'x','y', and 'parnme' column.  If the filename ends in '.csv',
        then a pd.DataFrame is loaded, otherwise a pilot points file is loaded.
    sigma_range : float
        a float representing the number of standard deviations implied by parameter bounds.
        Default is 4.0, which implies 95% confidence parameter bounds.
    par_knowledge_dict : dict
        used to condition on existing knowledge about parameters.  This functionality is
        currently in dev - don't use it.
    verbose : bool
        stdout flag
    Returns
    -------
    Cov : pyemu.Cov
        a covariance matrix that includes all adjustable parameters in the control
        file.

    Example
    -------
    ``>>>import pyemu``

    ``>>>pst = pyemu.Pst(""pest.pst"")``

    ``>>>sd = {""struct.dat"":[""hkpp.dat.tpl"",""vka.dat.tpl""]}``

    ``>>>cov = pyemu.helpers.geostatistical_prior_builder(pst,struct_dict=sd)``

    ``>>>cov.to_ascii(""prior.cov"")``","[""a"", ""helper"", ""function"", ""to"", ""construct"", ""a"", ""full"", ""prior"", ""covariance"", ""matrix"", ""using"", ""a"", ""mixture"", ""of"", ""geostastical"", ""structures"", ""and"", ""parameter"", ""bounds"", ""information"", ""the"", ""covariance"", ""of"", ""parameters"", ""associated"", ""with"", ""geostatistical"", ""structures"", ""is"", ""defined"", ""as"", ""a"", ""mixture"", ""of"", ""geo"", ""struct"", ""and"", ""bounds"", ""that"", ""is"", ""the"", ""geo"", ""struct"", ""is"", ""used"", ""to"", ""construct"", ""a"", ""pyemu"", ""cov"", ""then"", ""the"", ""entire"", ""pyemu"", ""cov"", ""is"", ""scaled"", ""by"", ""the"", ""uncertainty"", ""implied"", ""by"", ""the"", ""bounds"", ""and"", ""sigma"", ""range"", ""sounds"", ""complicated"", ""parameters"", ""pst"", ""pyemu"", ""pst"", ""a"", ""control"", ""file"", ""or"", ""the"", ""name"", ""of"", ""control"", ""file"", ""struct"", ""dict"", ""dict"", ""a"", ""python"", ""dict"", ""of"", ""geo"", ""struct"", ""or"", ""structure"", ""file"", ""and"", ""list"", ""of"", ""pp"", ""tpl"", ""files"", ""pairs"", ""if"", ""the"", ""values"", ""in"", ""the"", ""dict"", ""are"", ""pd"", ""data"", ""frames"", ""then"", ""they"", ""must"", ""have"", ""an"", ""str"", ""str"", ""and"", ""str"", ""column"", ""if"", ""the"", ""filename"", ""ends"", ""in"", ""str"", ""then"", ""a"", ""pd"", ""data"", ""frame"", ""is"", ""loaded"", ""otherwise"", ""a"", ""pilot"", ""points"", ""file"", ""is"", ""loaded"", ""sigma"", ""range"", ""float"", ""a"", ""float"", ""representing"", ""the"", ""number"", ""of"", ""standard"", ""deviations"", ""implied"", ""by"", ""parameter"", ""bounds"", ""default"", ""is"", ""num"", ""which"", ""implies"", ""num"", ""confidence"", ""parameter"", ""bounds"", ""par"", ""knowledge"", ""dict"", ""dict"", ""used"", ""to"", ""condition"", ""on"", ""existing"", ""knowledge"", ""about"", ""parameters"", ""this"", ""functionality"", ""is"", ""currently"", ""in"", ""dev"", ""don"", ""t"", ""use"", ""it"", ""verbose"", ""bool"", ""stdout"", ""flag"", ""returns"", ""cov"", ""pyemu"", ""cov"", ""a"", ""covariance"", ""matrix"", ""that"", ""includes"", ""all"", ""adjustable"", ""parameters"", ""in"", ""the"", ""control"", ""file"", ""example"", ""str"", ""import"", ""pyemu"", ""str"", ""str"", ""pst"", ""pyemu"", ""pst"", ""str"", ""str"", ""str"", ""sd"", ""str"", ""str"", ""str"", ""str"", ""str"", ""cov"", ""pyemu"", ""helpers"", ""geostatistical"", ""prior"", ""builder"", ""pst"", ""struct"", ""dict"", ""sd"", ""str"", ""str"", ""cov"", ""to"", ""ascii"", ""str"", ""str""]"
